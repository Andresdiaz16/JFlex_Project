/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lexer;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import static java.lang.System.exit;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 /* @author Andres Diaz
 */
public class view extends javax.swing.JFrame {

    /**
     * Creates new form view
     */
    
    /*
    Global variable intances
    Some variables that are going to be used thru out the project
    */
    Lexer_Generator lGen;
    int returnVal;
    Path outFile;
    ArrayList<String> lines = new ArrayList<String>();
    ArrayList<String> document;
    ArrayList<String>initFunctions = new ArrayList<String>(); 
    ArrayList<String> errorList = new ArrayList<String>();
    ArrayList<LINE> Tdetail;
    String userPath;
    String fileName;
    String[] splitString;
    int parserPos;
    int line;
    int column;
    
    public view() {
        //SETS THE LOOK AND FEEL OF WINDOWS
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        }
        //CHANGES THE TOOLTIP BACKGROUND COLOR TO WHITE
        UIManager.put("ToolTip.background", Color.WHITE);
        //INITIALIZES THE JFRAME AND ITS COMPONENTS
        initComponents();
        //GETS THE CURRENT DIRECTORY WHERE THE PROJECT IS CURRENTLY ON FOR FUTURE USE
        userPath = System.getProperty("user.dir");
        //SETS THE TEXT THAT WILL APPEAR UPON START
        jLabel1.setText("BLEHG");
        //GETS THE DIMENTIONS OF THE USER SCREEN
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        //initialize the parser position
        parserPos = 0;         
        //INITIALIZING THE LIST THAT WILL CONTAIN THE BASIC OPERATIONS OF THE QUERYS
        initFunctions.add("AVG");
        initFunctions.add("SUM");
        initFunctions.add("COUNT");
        initFunctions.add("DIFF");
        initFunctions.add("DATEDIFF");
        initFunctions.add("DATEPART");
        initFunctions.add("DATENAME");
        initFunctions.add("CAST");
        initFunctions.add("CONVERT");
        //INITIALIZE THE STRING ARRAY VARIABLE THA WILL BE USE TO GET THE NAME OF THE SELECTED FILE.
        splitString = new String[2];
        //SETTING THE JFRAME LOCATION TO THE CENTER OF THE USERS SCREEN
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        //SETTING THE RESIZABLE OPTION TO FALSE SO THE JFRAME KEEPS ITS INTENDED SIZE.
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Analyze File");
        jButton1.setToolTipText("Opens the .sql or .txt ile you want to analyze");
        jButton1.setFocusPainted(false);
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Generate Lexer");
        jButton2.setToolTipText("Generates the .java that will analyze the input  file");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton2.setFocusPainted(false);
        jButton2.setFocusable(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Open File Location");
        jButton3.setToolTipText("Opens the project location");
        jButton3.setFocusPainted(false);
        jButton3.setFocusable(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addContainerGap(191, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //BUTTON THAT GENERATES THE .JAVA FILE FROM THE .LEXER FILE
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //CREATES A TEMPORARY FILE OF THE .JAVA THAT WAS GENERATED OF THE .LEXER FILE IF IT EXISTS
        File tempFile = new File(userPath+"\\src\\lexer\\Analyzer.java");
        boolean exists = tempFile.exists();
        /*
        COMPARES IF THE .JAVA FILE EXIST OR NOT
        IF IT DOESNT EXIST IT CREATES ONE IF IT DOES EXIST THEN
        IT WOULD FIRST DELETE THE FILE THAT EXISTS AND THEN IT WILL CREATE A NEW
        THIS TO PREVENT THE USER CHANGING THE .LEXER FILE AND THE PROGRAM USING THE 
        OLD ONE INSTEAD OF THE NEWLY ADDED.
        */
        if (exists) {
            tempFile.delete();
            lGen = new Lexer_Generator(userPath+"/src/lexer/Lexer.flex");
            lGen.GenerateLexer();
            jLabel1.setText("RULES ADDED");
        }
        else{
            lGen = new Lexer_Generator(userPath+"/src/lexer/Lexer.flex");
            lGen.GenerateLexer();
            jLabel1.setText("RULES ADDED");
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    
    //BUTTON THAT ANALYZES THE INPUT FILE
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //INSTANCING A JFILECHOOSER TO SELECT A FILE
        JFileChooser flc = new JFileChooser();
        //CREATING A FILTER SO ONLY SQL AND TEXT FILES CAN BE SELECTED BY THE JFC
        FileNameExtensionFilter filter = new FileNameExtensionFilter("SQL or TEXT files", "sql","txt");
        //ADDING THE PREVIOUS FILTER TO THE JFC
        flc.setFileFilter(filter);
        //SHOWS THE FILE DIALOG IN THE CENTER
        returnVal = flc.showOpenDialog(null);
        //CHECKS TO SE IF THE SELECTION MADE BY THE USER WAS A VALID FILE
        if(returnVal == JFileChooser.APPROVE_OPTION){
            File fld = flc.getSelectedFile();
            try {
                BufferedReader reader = new BufferedReader(new FileReader(fld));
                Analyzer lexer = new Analyzer(reader);
                splitString = fld.getName().split("\\.");
                fileName = splitString[0];
                String line = "";
                File filePath = new File(userPath+"\\src\\lexer\\Output\\" +fileName +".out");
                boolean fileEX = filePath.exists();
                if(fileEX){
                    filePath.delete();
                    outFile = Paths.get(userPath+"\\src\\lexer\\Output\\" +fileName+".out");
                    Files.createFile(outFile);
                }
                else{
                    outFile = Paths.get(userPath+"\\src\\lexer\\Output\\"+fileName+".out");
                    Files.createFile(outFile);
                }
                do{
                    Tokens token = lexer.yylex();
                    if(token == null){
                    //return EOF
                    Files.write(outFile, lines,StandardCharsets.UTF_8, StandardOpenOption.APPEND);
                    lines.clear();
                    document = new ArrayList<String>(lexer.doc);
                    Tdetail = new ArrayList<LINE>(lexer.docDetail);
                    Start_Token(document.get(0));
                    
                    if(errorList.isEmpty()){
                        jLabel1.setText("Se completo con exito");
                    }
                    else{
                        jLabel1.setText("Se completo con errores");
                    }
                    return;
                    }
                    else{
                        //verificacion de errores Lexicograficos
                        switch(token){
                            case ErrorToken:
                                //exit(0); 
                                break;
                            case ErrorLINEA:
                                //exit(0);                                 
                               break;
                            case ERRORSTRING:
                                //exit(0);
                            break;
                        }
                    }                    
                }while(true);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
//metodo que recibe el token inicial de la gramatica sea: SELECT, UPDATE, INSERT, DELETE, CREATE,ALTER,DROP O TRUNCATE
    private void Start_Token(String initToken){
       switch(initToken){
           case "SELECT":
               document.remove(0);parserPos++;
               Select();
               break;
           case "UPDATE":
               document.remove(0);parserPos++;
               Update();
               break;
           case "DELTE":
               document.remove(0);parserPos++;
               Delete();
               break;
           case "INSERT":                   
               document.remove(0);parserPos++;
               Insert();
               break;
           case "CREATE":
               document.remove(0);parserPos++;
               Create();
               break;
           case "ALTER":
               whileEnd();
               break;
           case "TRUNCATE":
               document.remove(0);parserPos++;
               Truncate();
               break;
           case "DROP":
               document.remove(0);parserPos++;
               Drop();
               break;
           case "$":
               //Fin de programa
               break;
       }
    }
    //Metod para el statement select
    private void Select(){
        checkParams();
        if (document.get(0).equals("FROM")) {
            document.remove(0);parserPos++;
            From();
        }else{
            line = Tdetail.get(parserPos).returnLine();
            column = Tdetail.get(parserPos).returnColumn();
            errorList.add("Missing: FROM Statement on line: " +line+" and column: " + column );
            whileEnd();
        }

    }
    
    //Metodo para el statement del update
    private void Update(){
        checkParams();
        boolean flag = false;
        if (document.get(0).equals("SET")|| flag == true) {
            document.remove(0);parserPos++;
            flag = true;
            checkParams();
            if (document.get(0).equals("OUTPUT")) {
                document.remove(0);parserPos++;
                checkParams();
            }
            if (document.get(0).equals("FROM")) {
                document.remove(0);parserPos++;
                From();
            }
            else if (document.get(0).equals("WHERE")) {
                From();
            }
            else{
                line = Tdetail.get(parserPos).returnLine();
                column = Tdetail.get(parserPos).returnColumn();
                errorList.add("Missing: From or Where Statement on line: " +line+" and column: " + column );
            }
        }else{
            line = Tdetail.get(parserPos).returnLine();
            column = Tdetail.get(parserPos).returnColumn();
            errorList.add("Missing: SET Statement on line: " +line+" and column: " + column );
            whileEnd();
        }
        flag = false;
    }
    
    //metodo privado para la funcion de delete
    private void Delete(){
        String tkn = document.get(0);
        switch(tkn){
            case "TOP":
            expression();
            if(document.get(0).equals("PERCENT")){
            document.remove(0);parserPos++;
            }
            Delete();
                break;
            case "OUTPUT":
                checkParams();
                Delete();
                break;
            case "FROM":
                document.remove(0);parserPos++;
                From();
                break;
            default:
                line = Tdetail.get(parserPos).returnLine();
                column = Tdetail.get(parserPos).returnColumn();
                errorList.add("Missing: From Statement on line: " +line+" and column: " + column );
                break;
        }
    }
    
    //Metodo privado para INSERT
    private void Insert(){
        String tkn = document.get(0);
        switch(tkn){
            case "TOP":    
            document.remove(0);parserPos++;
            expression();
            if(document.get(0).equals("PERCENT")){
            document.remove(0);parserPos++;
            }
            Insert();
                break;
            case "OUTPUT":
                document.remove(0);parserPos++;
                checkParams();
                Insert();
                break;
            case "INTO":
                document.remove(0);parserPos++;
                identifier();
                expression();
                if(document.get(0).equals("VALUES")){
                    document.remove(0);parserPos++;
                    expression();
                    endF();
                }
                else if(document.get(0).equals("$")){
                    
                }
                else{                                        
                    line = Tdetail.get(parserPos).returnLine();
                    column = Tdetail.get(parserPos).returnColumn();
                    errorList.add("Missing: VALUES Statement on line: " +line+" and column: " + column );
                    whileEnd();
                }
                break;
            default:
                line = Tdetail.get(parserPos).returnLine();
                column = Tdetail.get(parserPos).returnColumn();
                errorList.add("Missing: INTO Statement on line: " +line+" and column: " + column );
                break;
        }
    }
    
    private void Create(){
        String tkn = document.get(0);
        switch(tkn){
            case "TABLE":
                document.remove(0);parserPos++;
                Table();
                break;
            case"VIEW":
                document.remove(0);parserPos++;
                View();
                break;
            case "DATABASE":
                document.remove(0);parserPos++;
                Database();
                break;
            case"INDEX":
                whileEnd();
                break;
            case"USER":
                whileEnd();
                break;
            default:
            line = Tdetail.get(parserPos).returnLine();
                column = Tdetail.get(parserPos).returnColumn();
                errorList.add("Missing: TABLE,VIEW,INDEX,DATABASE or USER Statement on line: " +line+" and column: " + column );
                break;
        }
    }
    
    private void Truncate(){
        String tkn = document.get(0);
         switch(tkn){
             case "TABLE":
                 document.remove(0);parserPos++;
                 checkParams();
                 break;
             default:
                line = Tdetail.get(parserPos).returnLine();
                column = Tdetail.get(parserPos).returnColumn();
                errorList.add("Missing: TABLE Statement to be able to TRUNCATE on line: " +line+" and column: " + column );
                 whileEnd();
                 break;
         }
         endF();
    }
    
    private void Database(){
        checkParams();
        endF();
    }
    
    //metodo que crea una view
    private void View(){
        checkParams();
        endF();
    }
    //metodo que crea una tabla
    private void Table(){
        if (document.get(0).equals("ident")) {
            identifier(); 
        }
        else{
            line = Tdetail.get(parserPos).returnLine();
            column = Tdetail.get(parserPos).returnColumn();
            errorList.add("Missing: table name on line: " +line+" and column: " + column );
            whileEnd();
        }
        expression();
        checkParams();
        endF();
    }
    
    //Metodo que maneja las diferentes opciones del drop statement
    private void Drop(){
        String tkn = document.get(0);
        switch(tkn){
            case "DATABASE":
                document.remove(0);parserPos++;
                if (document.get(0).equals("IF")) {
                    document.remove(0);parserPos++;
                    if (document.get(0).equals("EXISTS")) {
                        document.remove(0);parserPos++;
                    }
                }
                checkParams();
                break;
            case "USER":
                document.remove(0);parserPos++;
                if (document.get(0).equals("IF")) {
                    document.remove(0);parserPos++;
                    if (document.get(0).equals("EXISTS")) {
                        document.remove(0);parserPos++;
                    }
                }
                identifier();
                break;
            case "TABLE":
                document.remove(0);parserPos++;
                if (document.get(0).equals("IF")) {
                    document.remove(0);parserPos++;
                    if (document.get(0).equals("EXISTS")) {
                        document.remove(0);parserPos++;
                    }
                }
                checkParams();
                break;
            case "INDEX":
                document.remove(0);parserPos++;
                if (document.get(0).equals("IF")) {
                    document.remove(0);parserPos++;
                    if (document.get(0).equals("EXISTS")) {
                        document.remove(0);parserPos++;
                    }
                }
                checkParams();
                if (document.get(0).equals("ON")) {
                    checkParams();
                }
                break;
            case "VIEW":
                document.remove(0);parserPos++;
                if (document.get(0).equals("IF")) {
                    document.remove(0);parserPos++;
                    if (document.get(0).equals("EXISTS")) {
                        document.remove(0);parserPos++;
                    }
                }
                checkParams();
                break;
            default:
            line = Tdetail.get(parserPos).returnLine();
            column = Tdetail.get(parserPos).returnColumn();
            errorList.add("Missing: VIEW,TABLE,DATABASE,INDEX or USER name on line: " +line+" and column: " + column );
            whileEnd();                
                break;
        }
        endF();
    }
    
    //funcion de from
    private void From(){
        checkParams();
        if("AS".equals(document.get(0))){
            document.remove(0);parserPos++;
            identifier();
        }
        String tkn = document.get(0);        
        switch(tkn){
            case "LEFT":
                document.remove(0);parserPos++;
                if("OUTER".equals(document.get(0))){
                    document.remove(0);parserPos++;
                }
                From();
                break;
            case "RIGHT":
                document.remove(0);parserPos++;
                if("OUTER".equals(document.get(0))){
                    document.remove(0);parserPos++;
                }
                From();
                break;
            case "INNER":
                document.remove(0);parserPos++;
                From();
                break;
            case "JOIN":
                    document.remove(0);parserPos++;
                    identifier();
                    if ("ON".equals(document.get(0))) {
                         document.remove(0);parserPos++;
                         identifier();
                         expression();
                         identifier();
                         From();
                    }
                    else{
                    line = Tdetail.get(parserPos).returnLine();
                    column = Tdetail.get(parserPos).returnColumn();
                    errorList.add("Missing: ON Statement on line: " +line+" and column: " + column );
                    whileEnd();
                    }
                break;

        }
        if("WHERE".equals(document.get(0))){
            //llamado a la funcion del where
            document.remove(0);parserPos++;
            if("CURRENT".equals(document.get(0))){
                document.remove(0);parserPos++;
                if ("OF".equals(document.get(0))) {
                    document.remove(0);parserPos++;
                    if ("GLOBAL".equals(document.get(0))) {
                        document.remove(0);parserPos++;
                        identifier();
                        byFunction();
                        endF();
                    }
                    else{
                    identifier();
                    byFunction();
                    endF();
                    }
                }
                else{
                    line = Tdetail.get(parserPos).returnLine();
                    column = Tdetail.get(parserPos).returnColumn();
                    errorList.add("Missing: OF or OF GLOBAL statement on line: " +line+" and column: " + column );
                    whileEnd();
                }
            }
            else{
            checkParams();
            byFunction();
            endF();
            }
        }
        else{
            byFunction();
            endF();
        }
    }
    
    //funcion que elimna el token que podria venir despues de un from o de un where
    private void byFunction(){
        if (document.get(0).equals("GROUP")) {
            document.remove(0);parserPos++;
            if (document.get(0).equals("BY")) {
                document.remove(0);parserPos++;
                expression();
                checkParams();
                if (document.get(0).equals("ORDER")) {
                    document.remove(0);parserPos++;
                    if (document.get(0).equals("BY")) {
                        document.remove(0);parserPos++;
                        checkParams();
                        if (document.get(0).equals("HAVING")) {
                            document.remove(0);parserPos++;
                            checkParams();
                        }
                    }
                    
                }
            }
            else{
            line = Tdetail.get(parserPos).returnLine();
            column = Tdetail.get(parserPos).returnColumn();
            errorList.add("Missing: "+Tdetail.get(parserPos).getText()+ " Statement on line: " +line+" and column: " + column );
                whileEnd();
            }
            if (document.get(0).equals("ORDER")) {
                document.remove(0);parserPos++;
                if (document.get(0).equals("BY")) {
                    document.remove(0);parserPos++;
                    checkParams();
                    if (document.get(0).equals("HAVING")) {
                        document.remove(0);parserPos++;
                        checkParams();
                    }
                }
                else{
            line = Tdetail.get(parserPos).returnLine();
            column = Tdetail.get(parserPos).returnColumn();
            errorList.add("Missing: "+Tdetail.get(parserPos).getText()+ " Statement on line: " +line+" and column: " + column );
                        whileEnd();
                }
            }if (document.get(0).equals("HAVING")) {
                document.remove(0);parserPos++;
                checkParams();
            }

        }
    }
    
    // Si existe un error en algun token se llama a esta funcion para que elimine todo el contenido hasta el primer 'GO' || ';' que logre encontrar
    private void whileEnd(){
        while((!"GO".equals(document.get(0))) && (!"$".equals(document.get(0))) && !";".equals(document.get(0))){
            document.remove(0);parserPos++;           
        }
        endF();
    }
    
    //metodo que elimina las finalizaciones de sentencias y llama al metodo principal que analiza las funciones iniciales
    private void endF(){
        if(document.get(0).equals("GO")){
            document.remove(0);parserPos++;
            if(document.get(0).equals(";")){
                document.remove(0);parserPos++;
                Start_Token(document.get(0));
            }
            else{
                Start_Token(document.get(0));
            }
        }
        else if(document.get(0).equals(";")){
            document.remove(0);parserPos++;
            Start_Token(document.get(0));
        }
    }
    
    //metodo que checkea los diferentes posibles parametros que podrian venir en cada una de las funciones
    private void checkParams(){
        if(document.get(0).equals("string")){
            str();
            expression();
            checkParams();
        }
        if(document.get(0).equals("number")){
            nums();
            expression();
            checkParams();
        }
        if(document.get(0).equals("ident")){
            identifier();
            expression();
            checkParams();
        }
        //en caso del select que venga un valor de multiplicacion se elimina en expression();
        if(document.get(0).equals("*")){
           expression();
        }
        if (document.get(0).equals("AS")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("SELECT")) {
            document.remove(0);parserPos++;
            Select();
        }
        if (document.get(0).equals("MATCH")) {
            document.remove(0);parserPos++;
            expression();
        }
        if (document.get(0).equals("IS")) {
            document.remove(0);parserPos++;
            if (document.get(0).equals("NOT")) {
                document.remove(0);parserPos++;
                if (document.get(0).equals("NULL")) {
                document.remove(0);parserPos++;
                checkParams();
                }
            }
            else if (document.get(0).equals("NULL")) {
                document.remove(0);parserPos++;
                checkParams();
            }
            else{
                checkParams();
            }
        }
        if (document.get(0).equals("NOT")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("AND")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("OR")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("LIKE")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("SCAPE")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("BETWEEN")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("CONTAINS")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("DISTINCT")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("TOP")) {
            document.remove(0);parserPos++;
            expression();
            if (document.get(0).equals("PERCENT")) {
                document.remove(0);parserPos++;
            }
            expression();
            checkParams();
        }
        if (document.get(0).equals("COLLATE")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("CONSTRAINT")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("DEFAULT")) {
            document.remove(0);parserPos++;
            String doc = document.get(0);
            switch(doc){
                case"number":
                    nums();
                    break;
                case "string":
                    str();
                    break;
                case"NULL":
                    document.remove(0);parserPos++;
                    break;
                default:
                    errorList.add("Missing:  statement after the DEFAULT");
                    whileEnd();
                    break;
            }
            expression();
            checkParams();
        }
        if (document.get(0).equals("PRIMARY")) {
            document.remove(0);parserPos++;
            if (document.get(0).equals("KEY")) {
                document.remove(0);parserPos++;
                if (document.get(0).equals("UNIQUE")) {
                    line = Tdetail.get(parserPos).returnLine();
                    column = Tdetail.get(parserPos).returnColumn();           
                    errorList.add("Ambiguous declaration of PRIMARY KEY, its already a unique statement on line: " + line + " and column: "+column);
                    whileEnd();
                }
                if (document.get(0).equals("NONCLUSTERED")) {
                    document.remove(0);parserPos++;
                }
                if (document.get(0).equals("CLUSTERED")) {
                    document.remove(0);parserPos++;
                }
                if (document.get(0).equals("ON")) {
                    document.remove(0);parserPos++;
                    if (document.get(0).equals("\"default\"")) {
                        document.remove(0);parserPos++;
                    }
                    checkParams();
                }
            }
            else{
            line = Tdetail.get(parserPos).returnLine();
            column = Tdetail.get(parserPos).returnColumn();
            errorList.add("Missing: "+Tdetail.get(parserPos).getText()+ " Statement on line: " +line+" and column: " + column );
                whileEnd();
            }
            expression();
            checkParams();
        }
        if (document.get(0).equals("UNIQUE")) {
            document.remove(0);parserPos++;
            if (document.get(0).equals("PRIMARY")) {
                line = Tdetail.get(parserPos).returnLine();
                column = Tdetail.get(parserPos).returnColumn();           
                errorList.add("Ambiguous declaration of PRIMARY KEY, its already a unique statement on line: " + line + " and column: "+column);
                whileEnd();
            }
            if (document.get(0).equals("NONCLUSTERED")) {
                document.remove(0);parserPos++;
            }
            if (document.get(0).equals("CLUSTERED")) {
            document.remove(0);parserPos++;
            }
            if (document.get(0).equals("ON")) {
                document.remove(0);parserPos++;
                if (document.get(0).equals("\"default\"")) {
                    document.remove(0);parserPos++;
                }
                checkParams();
            }            
            expression();
            checkParams();
        }
        if (document.get(0).equals("FOREIGN")) {
            document.remove(0);parserPos++;
            if (document.get(0).equals("KEY")) {
                document.remove(0);parserPos++;
                expression();
                if (document.get(0).equals("REFERENCES")) {
                    document.remove(0);parserPos++;
                    checkParams();
                    if (document.get(0).equals("ON")) {
                        document.remove(0);parserPos++;
                        String token = document.get(0);
                        switch(token){
                            case"DELETE":
                                document.remove(0);parserPos++;
                                if (document.get(0).equals("NO")) {
                                    document.remove(0);parserPos++;
                                    if (document.get(0).equals("ACTION")) {
                                        document.remove(0);parserPos++;
                                    }
                                    else{

                                        line = Tdetail.get(parserPos).returnLine();
                                        column = Tdetail.get(parserPos).returnColumn();
                                        errorList.add("Missing: "+Tdetail.get(parserPos).getText()+ " Statement on line: " +line+" and column: " + column );
                                    }
                                }
                                else if (document.get(0).equals(("SET"))) {
                                    document.remove(0);parserPos++;
                                    if (document.get(0).equals("NULL")) {
                                        document.remove(0);parserPos++;
                                    }
                                    else if (document.get(0).equals("DEFAULT")) {
                                        document.remove(0);parserPos++;
                                    }
                                    else{
                                        line = Tdetail.get(parserPos).returnLine();
                                        column = Tdetail.get(parserPos).returnColumn();
                                        errorList.add("Missing: "+Tdetail.get(parserPos).getText()+ " Statement on line: " +line+" and column: " + column );
                                        whileEnd();
                                    }
                                }
                                else if (document.get(0).equals("CASCADE")) {
                                    document.remove(0);parserPos++;
                                }
                                else{
                                    line = Tdetail.get(parserPos).returnLine();
                                    column = Tdetail.get(parserPos).returnColumn();
                                    errorList.add("Missing: "+Tdetail.get(parserPos).getText()+ " Statement on line: " +line+" and column: " + column );
                                    whileEnd();
                                }
                                break;
                            case"UPDATE":
                                document.remove(0);parserPos++;
                                document.remove(0);parserPos++;
                                if (document.get(0).equals("NO")) {
                                    document.remove(0);parserPos++;
                                    if (document.get(0).equals("ACTION")) {
                                        document.remove(0);parserPos++;
                                    }
                                    else{
                                        line = Tdetail.get(parserPos).returnLine();
                                        column = Tdetail.get(parserPos).returnColumn();
                                        errorList.add("Missing: "+Tdetail.get(parserPos).getText()+ " Statement on line: " +line+" and column: " + column );
                                    }
                                }
                                else if (document.get(0).equals(("SET"))) {
                                    document.remove(0);parserPos++;
                                    if (document.get(0).equals("NULL")) {
                                        document.remove(0);parserPos++;
                                    }
                                    else if (document.get(0).equals("DEFAULT")) {
                                        document.remove(0);parserPos++;
                                    }
                                    else{
                                        line = Tdetail.get(parserPos).returnLine();
                                        column = Tdetail.get(parserPos).returnColumn();
                                        errorList.add("Missing:SET Statement predicate on line: " +line+" and column: " + column );
                                        whileEnd();
                                    }
                                }
                                else if (document.get(0).equals("CASCADE")) {
                                    document.remove(0);parserPos++;
                                }
                                else{
                                    errorList.add("Missing:  Statement after the update fuction.");
                                    whileEnd();
                                }                                
                                break;
                                case"NOT":
                                    document.remove(0);parserPos++;
                                    if (document.get(0).equals("FOR")) {
                                        document.remove(0);parserPos++;
                                        if (document.get(0).equals("REPLICATION")) {
                                           document.remove(0);parserPos++;
                                        }
                                        else{
                                        line = Tdetail.get(parserPos).returnLine();
                                        column = Tdetail.get(parserPos).returnColumn();
                                        errorList.add("Missing: REPLICATION Statement on line: " +line+" and column: " + column );                                            
                                        }
                                    }
                                    else{
                                        line = Tdetail.get(parserPos).returnLine();
                                        column = Tdetail.get(parserPos).returnColumn();
                                        errorList.add("Missing: REPLICATIO Statement on line: " +line+" and column: " + column );                                        
                                    }
                                    break;
                        }
                    }
                }   
            }
            else{
                line = Tdetail.get(parserPos).returnLine();
                column = Tdetail.get(parserPos).returnColumn();
                errorList.add("Missing: KEY Statement on line: " +line+" and column: " + column );
                whileEnd();
            }
            expression();
            checkParams();
        }
        if (document.get(0).equals("CHECK")) {
            document.remove(0);parserPos++;
            if (document.get(0).equals("NOT")) {
                document.remove(0);parserPos++;
                if (document.get(0).equals("FOR")) {
                    document.remove(0);parserPos++;
                    if (document.get(0).equals("REPLICATION")) {
                        document.remove(0);parserPos++;
                    }
                }
            }
            expression();
            checkParams();
        }
        if (document.get(0).equals("INT")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("VARCHAR")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("NCHAR")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("DATETIME")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("BIT")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("FLOAT")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("MAX")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("DOCUMENT")) {
            document.remove(0);parserPos++;
            identifier();
            expression();
            checkParams();
        }
        if (document.get(0).equals("CONTENT")) {
            document.remove(0);parserPos++;
            identifier();
            expression();
            checkParams();
        }
        if (document.get(0).equals("CHAR")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
            
        }
        if (document.get(0).equals("NVARCHAR")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("BIGINT")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();            
        }
        if (document.get(0).equals("SMALLINT")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();            
        }
        if (document.get(0).equals("TINYINT")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("REAL")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("INDEX")) {
            document.remove(0);parserPos++;
            identifier();
            if (document.get(0).equals("CLUSTERED")) {
                document.remove(0);parserPos++;
                if (document.get(0).equals("COLUMNSTORE")) {
                    document.remove(0);parserPos++;
                }
            }
            else if(document.get(0).equals("NONCLUSTERED")){
                document.remove(0);parserPos++;
                if (document.get(0).equals("COLUMNSTORE")) {
                    document.remove(0);parserPos++;
                    expression();
                }
            }
            else if (document.get(0).equals("COLUMNSTORE")){
                document.remove(0);parserPos++;
                expression();
            }
            if (document.get(0).equals("ON")) {
                document.remove(0);parserPos++;
                identifier();
                expression();
            }
            expression();
            if (document.get(0).equals("WHERE")) {
                From();
            }
        }
        if (document.get(0).equals("ASC")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("DESC")) {
            document.remove(0);parserPos++;
            checkParams();
        }
        if (document.get(0).equals("NULL")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("ON")) {
            document.remove(0);parserPos++;
            if (document.get(0).equals("PRIMARY")) {
                document.remove(0);parserPos++;
                expression();
                checkParams();
            }
            if (document.get(0).equals("LOG")) {
                document.remove(0);parserPos++;
                if (document.get(0).equals("ON")) {
                    document.remove(0);parserPos++;
                    expression();
                    checkParams();
                }
            }
            expression();
            checkParams();
        }
        if (document.get(0).equals("NAME")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("FILENAME")) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
        if (document.get(0).equals("SIZE")) {
            document.remove(0);parserPos++;
            expression();
        }
        if (document.get(0).equals("KB")) {
            document.remove(0);parserPos++;
            expression();
        }
        
        if (document.get(0).equals("MB")) {
            document.remove(0);parserPos++;
            expression();
        }
        
        if (document.get(0).equals("GB")) {
            document.remove(0);parserPos++;
            expression();
        }
        
        if (document.get(0).equals("TB")) {
            document.remove(0);parserPos++;
            expression();
        }
        
        if (document.get(0).equals("FILEGROWTH")) {
            document.remove(0);parserPos++;
            expression();
        }
        if (initFunctions.contains(document.get(0))) {
            document.remove(0);parserPos++;
            expression();
            checkParams();
        }
    }
    
    //metodo que elimina los tokens "number" que incluye enteros, float y exponenciales no importando si son o no negativos
    private void nums(){
        if(document.get(0).equals("number")){
            document.remove(0);parserPos++;
        }
    }
    
    //metodo que analiza y elimina los diferentes tipos de identificador que hay
    private void  identifier(){
        if(document.get(0).equals("ident")){
            document.remove(0);parserPos++;
            expression();
            if(document.get(0).equals("ident") || document.get(0).equals("*")){               
                document.remove(0);parserPos++;
                expression();
                if(document.get(0).equals("ident") || document.get(0).equals(".") ){
                    document.remove(0);parserPos++;
                }
            }
        }
    }
    //metodo que elimina los strings atrapados dentro de ''
    private void str(){
        if(document.get(0).equals("string")){
            document.remove(0);parserPos++;
            expression();
            str();
        }
    }
//metodo que elimina todos aquellos operandos que son parte de la gramatica    
    private void expression(){
        String token = document.get(0);
        switch(token){
        case".":
            document.remove(0);parserPos++;
            break;
        case"+":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "-":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "*":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "/":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "%":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "<":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "<=":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case ">":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case ">=":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "=":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "==":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "!=":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "!":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "&&":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "||":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "|":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "&":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case ",":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "[":
            //falta el closing braket
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "(":
            document.remove(0);parserPos++;
            checkParams();
            if(document.get(0).equals(")")){
                document.remove(0);parserPos++;
            }
            else{
                line = Tdetail.get(parserPos).returnLine();
                column = Tdetail.get(parserPos).returnColumn();
                errorList.add("Missing: closing Parenthesis on line: " +line+" and column: " + column );
                whileEnd();
            }
            expression();
            break;
        case "[]":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "()":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "{":
            //falta el closing brace
            document.remove(0);parserPos++;
            if ("}".equals(document.get(0))) {
                document.remove(0);parserPos++;
            }
            else{
                line = Tdetail.get(parserPos).returnLine();
                column = Tdetail.get(parserPos).returnColumn();
                errorList.add("Missing: closing braket on line: " +line+" and column: " + column );
                whileEnd();
            }
            break;
        case "{}":
            document.remove(0);parserPos++;
            break;
        case"@":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case"#":
            document.remove(0);parserPos++;
            checkParams();
            break;
        case "##":
            document.remove(0);parserPos++;
            checkParams();
            break;
        }
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            Runtime.getRuntime().exec("explorer.exe /open, "+userPath+"\\src\\lexer\\Output");
        } catch (IOException ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new view().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
