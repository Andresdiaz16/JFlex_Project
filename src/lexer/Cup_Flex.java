/* The following code was generated by JFlex 1.7.0 */

package lexer;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/diego/Documents/NetBeansProjects/Lexer/src/lexer/Cup_Flex.flex</tt>
 */
class Cup_Flex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\12\1\66\1\13\1\11\22\0\1\13\1\62\1\0"+
    "\1\53\1\0\1\51\1\0\1\16\1\56\1\57\1\15\1\10\1\55"+
    "\1\4\1\5\1\14\1\3\1\3\10\3\1\0\1\54\1\60\1\52"+
    "\1\61\1\0\1\63\1\25\1\42\1\37\1\35\1\34\1\22\1\27"+
    "\1\32\1\31\1\41\1\45\1\21\1\40\1\17\1\23\1\30\1\46"+
    "\1\24\1\26\1\33\1\20\1\36\1\44\1\47\1\43\1\50\4\0"+
    "\1\2\1\0\4\1\1\7\25\1\1\64\1\6\1\65\7\0\1\66"+
    "\u1fa2\0\1\66\1\66\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\1\27\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\1\1\23\1\24"+
    "\1\25\1\26\1\3\1\7\2\0\1\27\1\2\1\30"+
    "\17\2\1\31\1\2\1\32\7\2\1\33\13\2\1\34"+
    "\1\2\1\35\3\2\1\36\1\37\1\40\10\2\1\41"+
    "\24\2\1\42\5\2\1\43\3\2\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\2\26\2\0\2\2\1\52\17\2"+
    "\1\53\15\2\1\54\1\55\1\2\1\56\1\57\1\60"+
    "\1\2\1\61\4\2\1\62\11\2\1\63\6\2\1\64"+
    "\35\2\1\65\1\66\5\2\1\67\5\2\1\70\1\0"+
    "\1\7\1\71\1\2\1\72\5\2\1\73\1\2\1\74"+
    "\1\75\1\2\1\76\1\77\1\100\3\2\1\101\1\2"+
    "\1\102\10\2\1\103\6\2\1\104\13\2\1\105\5\2"+
    "\1\106\1\2\1\107\1\2\1\110\1\111\4\2\1\112"+
    "\1\2\1\113\3\2\1\114\4\2\1\115\11\2\1\116"+
    "\5\2\1\117\1\120\4\2\1\121\1\122\3\2\1\123"+
    "\1\2\1\124\4\2\1\125\1\126\6\2\1\127\1\130"+
    "\3\2\1\131\4\2\1\132\7\2\1\133\1\2\1\134"+
    "\1\2\1\135\2\2\1\136\2\2\1\137\2\2\1\140"+
    "\21\2\1\141\4\2\1\142\3\2\1\143\2\2\1\144"+
    "\1\2\1\145\5\2\1\146\1\147\5\2\1\150\6\2"+
    "\1\151\1\152\1\2\1\153\1\154\1\155\1\2\1\156"+
    "\2\2\1\157\3\2\1\160\3\2\1\161\1\162\1\163"+
    "\2\2\1\164\3\2\1\165\2\2\1\166\2\2\1\167"+
    "\1\2\1\170\1\171\1\2\1\172\2\2\1\173\1\2"+
    "\1\174\3\2\1\175\1\176\15\2\1\177\1\200\1\201"+
    "\1\202\6\2\1\203\1\204\1\205\1\206\1\207\2\2"+
    "\1\210\1\211\1\212\1\213\1\214\1\2\1\215\3\2"+
    "\1\216\2\2\1\217\6\2\1\220\1\221\3\2\1\222"+
    "\1\223\3\2\1\224\6\2\1\225\1\2\1\226\2\2"+
    "\1\227\1\2\1\230\4\2\1\231\1\232\1\233\1\234"+
    "\4\2\1\235\3\2\1\236\1\2\1\237\1\2\1\240"+
    "\1\241\1\242\1\243\1\244";

  private static int [] zzUnpackAction() {
    int [] result = new int[608];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\67\0\67\0\u0113"+
    "\0\67\0\u014a\0\67\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d"+
    "\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\67\0\u06a9\0\u06e0\0\67\0\67"+
    "\0\67\0\67\0\u0717\0\u074e\0\u0785\0\67\0\67\0\67"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0181\0\67\0\u0898\0\u08cf"+
    "\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\156"+
    "\0\u0c3f\0\156\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\156\0\u108b\0\156"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\156\0\156\0\u119e\0\u11d5"+
    "\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\156\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\156\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\156\0\67\0\67"+
    "\0\67\0\67\0\67\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d"+
    "\0\u1aa4\0\156\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e"+
    "\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\156"+
    "\0\156\0\u2116\0\156\0\156\0\156\0\u214d\0\156\0\u2184"+
    "\0\u21bb\0\u21f2\0\u2229\0\156\0\u2260\0\u2297\0\u22ce\0\u2305"+
    "\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd"+
    "\0\u24f4\0\u252b\0\u2562\0\u2599\0\156\0\u25d0\0\u2607\0\u263e"+
    "\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6"+
    "\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae"+
    "\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66"+
    "\0\u2b9d\0\u2bd4\0\u2c0b\0\156\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7"+
    "\0\u2d1e\0\156\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68"+
    "\0\u2e9f\0\u19ff\0\156\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2"+
    "\0\u2fe9\0\u3020\0\156\0\u3057\0\156\0\156\0\u308e\0\156"+
    "\0\156\0\156\0\u30c5\0\u30fc\0\u3133\0\156\0\u316a\0\u31a1"+
    "\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359"+
    "\0\156\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\156"+
    "\0\u34da\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b"+
    "\0\u3692\0\u36c9\0\u3700\0\156\0\u3737\0\u376e\0\u37a5\0\u37dc"+
    "\0\u3813\0\156\0\u384a\0\u3881\0\u38b8\0\u38ef\0\156\0\u3926"+
    "\0\u395d\0\u3994\0\u39cb\0\156\0\u3a02\0\156\0\u3a39\0\u3a70"+
    "\0\u3aa7\0\156\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\156\0\u3bba"+
    "\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72"+
    "\0\156\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\156\0\156"+
    "\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61\0\156\0\156\0\u3f98\0\u3fcf"+
    "\0\u4006\0\156\0\u403d\0\156\0\u4074\0\u40ab\0\u40e2\0\u4119"+
    "\0\156\0\156\0\u4150\0\u4187\0\u41be\0\u41f5\0\u422c\0\u4263"+
    "\0\156\0\156\0\u429a\0\u42d1\0\u4308\0\156\0\u433f\0\u4376"+
    "\0\u43ad\0\u43e4\0\156\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7"+
    "\0\u452e\0\u4565\0\156\0\u459c\0\156\0\u45d3\0\156\0\u460a"+
    "\0\u4641\0\156\0\u4678\0\u46af\0\156\0\u46e6\0\u471d\0\156"+
    "\0\u4754\0\u478b\0\u47c2\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5"+
    "\0\u490c\0\u4943\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d"+
    "\0\u4ac4\0\156\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\156\0\u4bd7"+
    "\0\u4c0e\0\u4c45\0\156\0\u4c7c\0\u4cb3\0\156\0\u4cea\0\156"+
    "\0\u4d21\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd\0\156\0\156\0\u4e34"+
    "\0\u4e6b\0\u4ea2\0\u4ed9\0\u4f10\0\156\0\u4f47\0\u4f7e\0\u4fb5"+
    "\0\u4fec\0\u5023\0\u505a\0\156\0\156\0\u5091\0\156\0\156"+
    "\0\u50c8\0\u50ff\0\156\0\u5136\0\u516d\0\156\0\u51a4\0\u51db"+
    "\0\u5212\0\156\0\u5249\0\u5280\0\u52b7\0\156\0\156\0\156"+
    "\0\u52ee\0\u5325\0\156\0\u535c\0\u5393\0\u53ca\0\156\0\u5401"+
    "\0\u5438\0\156\0\u546f\0\u54a6\0\156\0\u54dd\0\156\0\156"+
    "\0\u5514\0\156\0\u554b\0\u5582\0\156\0\u55b9\0\156\0\u55f0"+
    "\0\u5627\0\u565e\0\156\0\156\0\u5695\0\u56cc\0\u5703\0\u573a"+
    "\0\u5771\0\u57a8\0\u57df\0\u5816\0\u584d\0\u5884\0\u58bb\0\u58f2"+
    "\0\u5929\0\156\0\156\0\156\0\156\0\u5960\0\u5997\0\u59ce"+
    "\0\u5a05\0\u5a3c\0\u5a73\0\156\0\156\0\156\0\156\0\156"+
    "\0\u5aaa\0\u5ae1\0\156\0\156\0\156\0\156\0\156\0\u5b18"+
    "\0\156\0\u5b4f\0\u5b86\0\u5bbd\0\156\0\u5bf4\0\u5c2b\0\156"+
    "\0\u5c62\0\u5c99\0\u5cd0\0\u5d07\0\u5d3e\0\u5d75\0\156\0\156"+
    "\0\u5dac\0\u5de3\0\u5e1a\0\156\0\156\0\u5e51\0\u5e88\0\u5ebf"+
    "\0\156\0\u5ef6\0\u5f2d\0\u5f64\0\u5f9b\0\u5fd2\0\u6009\0\156"+
    "\0\u6040\0\156\0\u6077\0\u60ae\0\156\0\u60e5\0\156\0\u611c"+
    "\0\u6153\0\u618a\0\u61c1\0\156\0\156\0\156\0\156\0\u61f8"+
    "\0\u622f\0\u6266\0\u629d\0\156\0\u62d4\0\u630b\0\u6342\0\156"+
    "\0\u6379\0\156\0\u63b0\0\156\0\156\0\156\0\156\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[608];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\2\1\3"+
    "\1\7\1\10\2\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\3\3\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\71\0\3\3\3\0\1\3\7\0"+
    "\32\3\21\0\1\4\1\0\1\61\64\0\1\62\1\63"+
    "\74\0\1\11\71\0\1\64\51\0\11\65\2\0\3\65"+
    "\1\66\50\65\1\0\3\3\3\0\1\3\7\0\1\3"+
    "\1\67\2\3\1\70\1\3\1\71\10\3\1\72\1\73"+
    "\11\3\17\0\3\3\3\0\1\3\7\0\1\74\6\3"+
    "\1\75\1\3\1\76\20\3\17\0\3\3\3\0\1\3"+
    "\7\0\4\3\1\77\5\3\1\100\2\3\1\101\14\3"+
    "\17\0\3\3\3\0\1\3\7\0\1\3\1\102\1\103"+
    "\1\3\1\104\1\105\1\106\3\3\1\107\17\3\17\0"+
    "\3\3\3\0\1\3\7\0\1\110\1\111\1\3\1\112"+
    "\1\3\1\113\3\3\1\114\20\3\17\0\3\3\3\0"+
    "\1\3\7\0\4\3\1\115\5\3\1\116\2\3\1\117"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\1\120\1\3"+
    "\1\121\4\3\1\122\6\3\1\123\1\124\1\125\11\3"+
    "\17\0\3\3\3\0\1\3\7\0\1\3\1\126\4\3"+
    "\1\127\3\3\1\130\1\3\1\131\1\132\2\3\1\133"+
    "\1\134\10\3\17\0\3\3\3\0\1\3\7\0\2\3"+
    "\1\135\1\3\1\136\1\137\15\3\1\140\6\3\17\0"+
    "\3\3\3\0\1\3\7\0\5\3\1\141\4\3\1\142"+
    "\2\3\1\143\14\3\17\0\3\3\3\0\1\3\7\0"+
    "\1\144\2\3\1\145\3\3\1\146\6\3\1\147\2\3"+
    "\1\150\10\3\17\0\3\3\3\0\1\3\7\0\6\3"+
    "\1\151\23\3\17\0\3\3\3\0\1\3\7\0\4\3"+
    "\1\152\1\153\1\154\3\3\1\155\2\3\1\156\5\3"+
    "\1\157\1\160\5\3\17\0\3\3\3\0\1\3\7\0"+
    "\7\3\1\161\20\3\1\162\1\3\17\0\3\3\3\0"+
    "\1\3\7\0\4\3\1\163\1\164\1\165\3\3\1\166"+
    "\2\3\1\167\6\3\1\170\5\3\17\0\3\3\3\0"+
    "\1\3\7\0\6\3\1\171\3\3\1\172\17\3\17\0"+
    "\3\3\3\0\1\3\7\0\1\3\1\173\1\174\1\3"+
    "\1\175\1\176\5\3\1\177\16\3\17\0\3\3\3\0"+
    "\1\3\7\0\4\3\1\200\1\3\1\201\3\3\1\202"+
    "\2\3\1\203\5\3\1\204\6\3\17\0\3\3\3\0"+
    "\1\3\7\0\4\3\1\205\25\3\17\0\3\3\3\0"+
    "\1\3\7\0\2\3\1\206\1\3\1\207\5\3\1\210"+
    "\2\3\1\211\6\3\1\212\5\3\17\0\3\3\3\0"+
    "\1\3\7\0\15\3\1\213\14\3\17\0\3\3\3\0"+
    "\1\3\7\0\13\3\1\214\16\3\17\0\3\3\3\0"+
    "\1\3\7\0\15\3\1\215\5\3\1\216\6\3\70\0"+
    "\1\217\67\0\1\220\65\0\1\221\66\0\1\222\66\0"+
    "\1\223\17\0\1\61\2\0\2\224\24\0\1\224\35\0"+
    "\1\62\1\0\1\225\61\0\11\63\2\0\54\63\15\226"+
    "\1\227\51\226\1\0\3\3\3\0\1\3\7\0\2\3"+
    "\1\230\27\3\17\0\3\3\3\0\1\3\7\0\1\231"+
    "\13\3\1\232\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\21\3\1\233\10\3\17\0\3\3\3\0\1\3\7\0"+
    "\6\3\1\234\23\3\17\0\3\3\3\0\1\3\7\0"+
    "\13\3\1\235\16\3\17\0\3\3\3\0\1\3\7\0"+
    "\2\3\1\236\6\3\1\237\1\240\17\3\17\0\3\3"+
    "\3\0\1\3\7\0\15\3\1\241\14\3\17\0\3\3"+
    "\3\0\1\3\7\0\16\3\1\242\13\3\17\0\3\3"+
    "\3\0\1\3\7\0\1\243\3\3\1\244\13\3\1\245"+
    "\11\3\17\0\3\3\3\0\1\3\7\0\26\3\1\246"+
    "\3\3\17\0\3\3\3\0\1\3\7\0\3\3\1\247"+
    "\26\3\17\0\3\3\3\0\1\3\7\0\2\3\1\250"+
    "\27\3\17\0\3\3\3\0\1\3\7\0\4\3\1\251"+
    "\25\3\17\0\3\3\3\0\1\3\7\0\5\3\1\252"+
    "\24\3\17\0\3\3\3\0\1\3\7\0\4\3\1\253"+
    "\25\3\17\0\3\3\3\0\1\3\7\0\7\3\1\254"+
    "\22\3\17\0\3\3\3\0\1\3\7\0\2\3\1\255"+
    "\27\3\17\0\3\3\3\0\1\3\7\0\14\3\1\256"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\16\3\1\257"+
    "\13\3\17\0\3\3\3\0\1\3\7\0\14\3\1\260"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\2\3\1\261"+
    "\22\3\1\262\4\3\17\0\3\3\3\0\1\3\7\0"+
    "\10\3\1\263\21\3\17\0\3\3\3\0\1\3\7\0"+
    "\3\3\1\264\2\3\1\265\2\3\1\266\7\3\1\267"+
    "\10\3\17\0\3\3\3\0\1\3\7\0\16\3\1\270"+
    "\13\3\17\0\3\3\3\0\1\3\7\0\2\3\1\271"+
    "\11\3\1\272\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\20\3\1\273\11\3\17\0\3\3\3\0\1\3\7\0"+
    "\16\3\1\274\13\3\17\0\3\3\3\0\1\3\7\0"+
    "\10\3\1\275\21\3\17\0\3\3\3\0\1\3\7\0"+
    "\14\3\1\276\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\21\3\1\277\10\3\17\0\3\3\3\0\1\3\7\0"+
    "\17\3\1\300\12\3\17\0\3\3\3\0\1\3\7\0"+
    "\31\3\1\301\17\0\3\3\3\0\1\3\7\0\6\3"+
    "\1\302\23\3\17\0\3\3\3\0\1\3\7\0\2\3"+
    "\1\303\11\3\1\304\15\3\17\0\3\3\3\0\1\3"+
    "\7\0\5\3\1\305\24\3\17\0\3\3\3\0\1\3"+
    "\7\0\6\3\1\306\23\3\17\0\3\3\3\0\1\3"+
    "\7\0\4\3\1\307\25\3\17\0\3\3\3\0\1\3"+
    "\7\0\4\3\1\310\25\3\17\0\3\3\3\0\1\3"+
    "\7\0\12\3\1\311\17\3\17\0\3\3\3\0\1\3"+
    "\7\0\17\3\1\312\12\3\17\0\3\3\3\0\1\3"+
    "\7\0\5\3\1\313\24\3\17\0\3\3\3\0\1\3"+
    "\7\0\1\314\6\3\1\315\4\3\1\316\1\3\1\317"+
    "\1\3\1\320\11\3\17\0\3\3\3\0\1\3\7\0"+
    "\15\3\1\321\14\3\17\0\3\3\3\0\1\3\7\0"+
    "\6\3\1\322\23\3\17\0\3\3\3\0\1\3\7\0"+
    "\7\3\1\323\7\3\1\324\12\3\17\0\3\3\3\0"+
    "\1\3\7\0\11\3\1\325\20\3\17\0\3\3\3\0"+
    "\1\3\7\0\6\3\1\326\23\3\17\0\3\3\3\0"+
    "\1\3\7\0\23\3\1\327\6\3\17\0\3\3\3\0"+
    "\1\3\7\0\21\3\1\330\10\3\17\0\3\3\3\0"+
    "\1\3\7\0\30\3\1\331\1\3\17\0\3\3\3\0"+
    "\1\3\7\0\11\3\1\332\20\3\17\0\3\3\3\0"+
    "\1\3\7\0\20\3\1\333\11\3\17\0\3\3\3\0"+
    "\1\3\7\0\12\3\1\334\17\3\17\0\3\3\3\0"+
    "\1\3\7\0\1\3\1\335\30\3\17\0\3\3\3\0"+
    "\1\3\7\0\4\3\1\336\25\3\17\0\3\3\3\0"+
    "\1\3\7\0\14\3\1\337\15\3\17\0\3\3\3\0"+
    "\1\3\7\0\7\3\1\340\22\3\17\0\3\3\3\0"+
    "\1\3\7\0\2\3\1\341\1\342\3\3\1\343\10\3"+
    "\1\344\11\3\17\0\3\3\3\0\1\3\7\0\1\345"+
    "\31\3\17\0\3\3\3\0\1\3\7\0\2\3\1\346"+
    "\2\3\1\347\24\3\17\0\3\3\3\0\1\3\7\0"+
    "\15\3\1\350\14\3\17\0\3\3\3\0\1\3\7\0"+
    "\5\3\1\351\24\3\17\0\3\3\3\0\1\3\7\0"+
    "\1\3\1\352\30\3\17\0\3\3\3\0\1\3\7\0"+
    "\1\353\1\354\1\355\16\3\1\356\10\3\17\0\3\3"+
    "\3\0\1\3\7\0\15\3\1\357\14\3\17\0\3\3"+
    "\3\0\1\3\7\0\6\3\1\360\6\3\1\361\14\3"+
    "\17\0\3\3\3\0\1\3\7\0\16\3\1\362\13\3"+
    "\17\0\3\3\3\0\1\3\7\0\30\3\1\363\1\3"+
    "\17\0\3\3\3\0\1\3\7\0\1\364\31\3\17\0"+
    "\3\3\3\0\1\3\7\0\5\3\1\365\24\3\17\0"+
    "\3\3\3\0\1\3\7\0\12\3\1\366\17\3\17\0"+
    "\3\3\3\0\1\3\7\0\4\3\1\367\25\3\17\0"+
    "\3\3\3\0\1\3\7\0\4\3\1\370\25\3\17\0"+
    "\3\3\3\0\1\3\7\0\1\371\13\3\1\372\15\3"+
    "\17\0\3\3\3\0\1\3\7\0\10\3\1\373\3\3"+
    "\1\374\15\3\17\0\3\3\3\0\1\3\7\0\14\3"+
    "\1\375\15\3\17\0\3\3\3\0\1\3\7\0\6\3"+
    "\1\376\23\3\17\0\3\3\3\0\1\3\7\0\15\3"+
    "\1\377\14\3\17\0\3\3\3\0\1\3\7\0\24\3"+
    "\1\u0100\5\3\21\0\2\225\1\0\1\225\1\0\1\225"+
    "\61\0\1\225\63\0\15\226\1\u0101\65\226\1\u0102\1\u0101"+
    "\51\226\1\0\3\3\3\0\1\3\7\0\2\3\1\u0103"+
    "\27\3\17\0\3\3\3\0\1\3\7\0\20\3\1\u0104"+
    "\11\3\17\0\3\3\3\0\1\3\7\0\15\3\1\u0105"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\5\3\1\u0106"+
    "\24\3\17\0\3\3\3\0\1\3\7\0\6\3\1\u0107"+
    "\23\3\17\0\3\3\3\0\1\3\7\0\12\3\1\u0108"+
    "\17\3\17\0\3\3\3\0\1\3\7\0\12\3\1\u0109"+
    "\17\3\17\0\3\3\3\0\1\3\7\0\27\3\1\u010a"+
    "\2\3\17\0\3\3\3\0\1\3\7\0\5\3\1\u010b"+
    "\24\3\17\0\3\3\3\0\1\3\7\0\6\3\1\u010c"+
    "\23\3\17\0\3\3\3\0\1\3\7\0\10\3\1\u010d"+
    "\21\3\17\0\3\3\3\0\1\3\7\0\11\3\1\u010e"+
    "\20\3\17\0\3\3\3\0\1\3\7\0\6\3\1\u010f"+
    "\23\3\17\0\3\3\3\0\1\3\7\0\15\3\1\u0110"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\14\3\1\u0111"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\2\3\1\u0112"+
    "\27\3\17\0\3\3\3\0\1\3\7\0\6\3\1\u0113"+
    "\23\3\17\0\3\3\3\0\1\3\7\0\15\3\1\u0114"+
    "\7\3\1\u0115\4\3\17\0\3\3\3\0\1\3\7\0"+
    "\21\3\1\u0116\10\3\17\0\3\3\3\0\1\3\7\0"+
    "\14\3\1\u0117\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\15\3\1\u0118\14\3\17\0\3\3\3\0\1\3\7\0"+
    "\11\3\1\u0119\3\3\1\u011a\14\3\17\0\3\3\3\0"+
    "\1\3\7\0\15\3\1\u011b\14\3\17\0\3\3\3\0"+
    "\1\3\7\0\12\3\1\u011c\17\3\17\0\3\3\3\0"+
    "\1\3\7\0\2\3\1\u011d\27\3\17\0\3\3\3\0"+
    "\1\3\7\0\10\3\1\u011e\21\3\17\0\3\3\3\0"+
    "\1\3\7\0\13\3\1\u011f\16\3\17\0\3\3\3\0"+
    "\1\3\7\0\15\3\1\u0120\14\3\17\0\3\3\3\0"+
    "\1\3\7\0\2\3\1\u0121\13\3\1\u0122\13\3\17\0"+
    "\3\3\3\0\1\3\7\0\2\3\1\u0123\27\3\17\0"+
    "\3\3\3\0\1\3\7\0\4\3\1\u0124\25\3\17\0"+
    "\3\3\3\0\1\3\7\0\15\3\1\u0125\14\3\17\0"+
    "\3\3\3\0\1\3\7\0\12\3\1\u0126\17\3\17\0"+
    "\3\3\3\0\1\3\7\0\15\3\1\u0127\14\3\17\0"+
    "\3\3\3\0\1\3\7\0\15\3\1\u0128\14\3\17\0"+
    "\3\3\3\0\1\3\7\0\14\3\1\u0129\15\3\17\0"+
    "\3\3\3\0\1\3\7\0\15\3\1\u012a\14\3\17\0"+
    "\3\3\3\0\1\3\7\0\4\3\1\u012b\25\3\17\0"+
    "\3\3\3\0\1\3\7\0\2\3\1\u012c\27\3\17\0"+
    "\3\3\3\0\1\3\7\0\23\3\1\u012d\6\3\17\0"+
    "\3\3\3\0\1\3\7\0\1\3\1\u012e\30\3\17\0"+
    "\3\3\3\0\1\3\7\0\21\3\1\u012f\10\3\17\0"+
    "\3\3\3\0\1\3\7\0\4\3\1\u0130\25\3\17\0"+
    "\3\3\3\0\1\3\7\0\20\3\1\u0131\11\3\17\0"+
    "\3\3\3\0\1\3\7\0\15\3\1\u0132\14\3\17\0"+
    "\3\3\3\0\1\3\7\0\15\3\1\u0133\14\3\17\0"+
    "\3\3\3\0\1\3\7\0\4\3\1\u0134\10\3\1\u0135"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\15\3\1\u0136"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\2\3\1\u0137"+
    "\27\3\17\0\3\3\3\0\1\3\7\0\1\u0138\31\3"+
    "\17\0\3\3\3\0\1\3\7\0\10\3\1\u0139\21\3"+
    "\17\0\3\3\3\0\1\3\7\0\13\3\1\u013a\16\3"+
    "\17\0\3\3\3\0\1\3\7\0\12\3\1\u013b\17\3"+
    "\17\0\3\3\3\0\1\3\7\0\1\u013c\31\3\17\0"+
    "\3\3\3\0\1\3\7\0\2\3\1\u013d\27\3\17\0"+
    "\3\3\3\0\1\3\7\0\15\3\1\u013e\14\3\17\0"+
    "\3\3\3\0\1\3\7\0\14\3\1\u013f\15\3\17\0"+
    "\3\3\3\0\1\3\7\0\15\3\1\u0140\14\3\17\0"+
    "\3\3\3\0\1\3\7\0\6\3\1\u0141\23\3\17\0"+
    "\3\3\3\0\1\3\7\0\7\3\1\u0142\22\3\17\0"+
    "\3\3\3\0\1\3\7\0\23\3\1\u0143\6\3\17\0"+
    "\3\3\3\0\1\3\7\0\11\3\1\u0144\20\3\17\0"+
    "\3\3\3\0\1\3\7\0\6\3\1\u0145\6\3\1\u0146"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\14\3\1\u0147"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\15\3\1\u0148"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\6\3\1\u0149"+
    "\23\3\17\0\3\3\3\0\1\3\7\0\20\3\1\u014a"+
    "\11\3\17\0\3\3\3\0\1\3\7\0\2\3\1\u014b"+
    "\27\3\17\0\3\3\3\0\1\3\7\0\6\3\1\u014c"+
    "\23\3\17\0\3\3\3\0\1\3\7\0\1\3\1\u014d"+
    "\30\3\17\0\3\3\3\0\1\3\7\0\20\3\1\u014e"+
    "\11\3\17\0\3\3\3\0\1\3\7\0\25\3\1\u014f"+
    "\4\3\17\0\3\3\3\0\1\3\7\0\5\3\1\u0150"+
    "\1\3\1\u0151\22\3\17\0\3\3\3\0\1\3\7\0"+
    "\7\3\1\u0152\22\3\17\0\3\3\3\0\1\3\7\0"+
    "\7\3\1\u0153\22\3\17\0\3\3\3\0\1\3\7\0"+
    "\1\u0154\31\3\17\0\3\3\3\0\1\3\7\0\1\3"+
    "\1\u0155\1\u0156\27\3\17\0\3\3\3\0\1\3\7\0"+
    "\21\3\1\u0157\10\3\17\0\3\3\3\0\1\3\7\0"+
    "\6\3\1\u0158\23\3\17\0\3\3\3\0\1\3\7\0"+
    "\5\3\1\u0159\24\3\17\0\3\3\3\0\1\3\7\0"+
    "\20\3\1\u015a\11\3\17\0\3\3\3\0\1\3\7\0"+
    "\1\3\1\u015b\10\3\1\u015c\17\3\17\0\3\3\3\0"+
    "\1\3\7\0\7\3\1\u015d\22\3\17\0\3\3\3\0"+
    "\1\3\7\0\10\3\1\u015e\21\3\17\0\3\3\3\0"+
    "\1\3\7\0\1\u015f\31\3\17\0\3\3\3\0\1\3"+
    "\7\0\23\3\1\u0160\6\3\17\0\3\3\3\0\1\3"+
    "\7\0\2\3\1\u0161\27\3\17\0\3\3\3\0\1\3"+
    "\7\0\6\3\1\u0162\23\3\17\0\3\3\3\0\1\3"+
    "\7\0\12\3\1\u0163\17\3\17\0\3\3\3\0\1\3"+
    "\7\0\25\3\1\u0164\4\3\17\0\3\3\3\0\1\3"+
    "\7\0\15\3\1\u0165\14\3\17\0\3\3\3\0\1\3"+
    "\7\0\5\3\1\u0166\24\3\17\0\3\3\3\0\1\3"+
    "\7\0\5\3\1\u0167\24\3\17\0\3\3\3\0\1\3"+
    "\7\0\7\3\1\u0168\22\3\16\0\14\226\1\11\1\u0101"+
    "\51\226\1\0\3\3\3\0\1\3\7\0\2\3\1\u0169"+
    "\27\3\17\0\3\3\3\0\1\3\7\0\7\3\1\u016a"+
    "\22\3\17\0\3\3\3\0\1\3\7\0\20\3\1\u016b"+
    "\11\3\17\0\3\3\3\0\1\3\7\0\5\3\1\u016c"+
    "\24\3\17\0\3\3\3\0\1\3\7\0\21\3\1\u016d"+
    "\10\3\17\0\3\3\3\0\1\3\7\0\17\3\1\u016e"+
    "\12\3\17\0\3\3\3\0\1\3\7\0\1\3\1\u016f"+
    "\30\3\17\0\3\3\3\0\1\3\7\0\14\3\1\u0170"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\2\3\1\u0171"+
    "\27\3\17\0\3\3\3\0\1\3\7\0\14\3\1\u0172"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\12\3\1\u0173"+
    "\17\3\17\0\3\3\3\0\1\3\7\0\6\3\1\u0174"+
    "\23\3\17\0\1\3\1\u0175\1\3\3\0\1\3\7\0"+
    "\32\3\17\0\3\3\3\0\1\3\7\0\1\u0176\7\3"+
    "\1\u0177\21\3\17\0\3\3\3\0\1\3\7\0\1\3"+
    "\1\u0178\30\3\17\0\3\3\3\0\1\3\7\0\5\3"+
    "\1\u0179\24\3\17\0\3\3\3\0\1\3\7\0\5\3"+
    "\1\u017a\24\3\17\0\3\3\3\0\1\3\7\0\21\3"+
    "\1\u017b\10\3\17\0\3\3\3\0\1\3\7\0\23\3"+
    "\1\u017c\6\3\17\0\3\3\3\0\1\3\7\0\1\3"+
    "\1\u017d\30\3\17\0\3\3\3\0\1\3\7\0\14\3"+
    "\1\u017e\15\3\17\0\3\3\3\0\1\3\7\0\5\3"+
    "\1\u017f\24\3\17\0\1\3\1\u0180\1\3\3\0\1\3"+
    "\7\0\32\3\17\0\3\3\3\0\1\3\7\0\12\3"+
    "\1\u0181\17\3\17\0\3\3\3\0\1\3\7\0\14\3"+
    "\1\u0182\15\3\17\0\3\3\3\0\1\3\7\0\5\3"+
    "\1\u0183\24\3\17\0\3\3\3\0\1\3\7\0\4\3"+
    "\1\u0184\25\3\17\0\3\3\3\0\1\3\7\0\11\3"+
    "\1\u0185\20\3\17\0\3\3\3\0\1\3\7\0\12\3"+
    "\1\u0186\17\3\17\0\3\3\3\0\1\3\7\0\20\3"+
    "\1\u0187\11\3\17\0\3\3\3\0\1\3\7\0\2\3"+
    "\1\u0188\27\3\17\0\3\3\3\0\1\3\7\0\2\3"+
    "\1\u0189\27\3\17\0\3\3\3\0\1\3\7\0\6\3"+
    "\1\u018a\23\3\17\0\3\3\3\0\1\3\7\0\11\3"+
    "\1\u018b\20\3\17\0\3\3\3\0\1\3\7\0\6\3"+
    "\1\u018c\23\3\17\0\3\3\3\0\1\3\7\0\14\3"+
    "\1\u018d\15\3\17\0\3\3\3\0\1\3\7\0\15\3"+
    "\1\u018e\14\3\17\0\3\3\3\0\1\3\7\0\5\3"+
    "\1\u018f\24\3\17\0\3\3\3\0\1\3\7\0\5\3"+
    "\1\u0190\24\3\17\0\3\3\3\0\1\3\7\0\10\3"+
    "\1\u0191\21\3\17\0\3\3\3\0\1\3\7\0\30\3"+
    "\1\u0192\1\3\17\0\3\3\3\0\1\3\7\0\1\3"+
    "\1\u0193\30\3\17\0\3\3\3\0\1\3\7\0\14\3"+
    "\1\u0194\15\3\17\0\3\3\3\0\1\3\7\0\15\3"+
    "\1\u0195\14\3\17\0\3\3\3\0\1\3\7\0\1\u0196"+
    "\31\3\17\0\3\3\3\0\1\3\7\0\7\3\1\u0197"+
    "\22\3\17\0\3\3\3\0\1\3\7\0\15\3\1\u0198"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\7\3\1\u0199"+
    "\22\3\17\0\1\3\1\u019a\1\3\3\0\1\3\7\0"+
    "\32\3\17\0\3\3\3\0\1\3\7\0\11\3\1\u019b"+
    "\20\3\17\0\3\3\3\0\1\3\7\0\14\3\1\u019c"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\2\3\1\u019d"+
    "\27\3\17\0\3\3\3\0\1\3\7\0\23\3\1\u019e"+
    "\6\3\17\0\3\3\3\0\1\3\7\0\12\3\1\u019f"+
    "\17\3\17\0\3\3\3\0\1\3\7\0\14\3\1\u01a0"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\1\3\1\u01a1"+
    "\30\3\17\0\3\3\3\0\1\3\7\0\6\3\1\u01a2"+
    "\23\3\17\0\3\3\3\0\1\3\7\0\21\3\1\u01a3"+
    "\10\3\17\0\3\3\3\0\1\3\7\0\15\3\1\u01a4"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\13\3\1\u01a5"+
    "\16\3\17\0\3\3\3\0\1\3\7\0\15\3\1\u01a6"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\4\3\1\u01a7"+
    "\25\3\17\0\3\3\3\0\1\3\7\0\14\3\1\u01a8"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\14\3\1\u01a9"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\14\3\1\u01aa"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\21\3\1\u01ab"+
    "\10\3\17\0\3\3\3\0\1\3\7\0\6\3\1\u01ac"+
    "\23\3\17\0\3\3\3\0\1\3\7\0\12\3\1\u01ad"+
    "\17\3\17\0\3\3\3\0\1\3\7\0\14\3\1\u01ae"+
    "\15\3\17\0\3\3\3\0\1\3\7\0\26\3\1\u01af"+
    "\3\3\17\0\3\3\3\0\1\3\7\0\2\3\1\u01b0"+
    "\27\3\17\0\3\3\3\0\1\3\7\0\3\3\1\u01b1"+
    "\26\3\17\0\3\3\3\0\1\3\7\0\12\3\1\u01b2"+
    "\17\3\17\0\3\3\3\0\1\3\7\0\15\3\1\u01b3"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\15\3\1\u01b4"+
    "\14\3\17\0\3\3\3\0\1\3\7\0\5\3\1\u01b5"+
    "\24\3\17\0\3\3\3\0\1\3\7\0\1\u01b6\31\3"+
    "\17\0\3\3\3\0\1\3\7\0\15\3\1\u01b7\14\3"+
    "\17\0\3\3\3\0\1\3\7\0\15\3\1\u01b8\14\3"+
    "\17\0\3\3\3\0\1\3\7\0\15\3\1\u01b9\14\3"+
    "\17\0\3\3\3\0\1\3\7\0\1\3\1\u01ba\30\3"+
    "\17\0\3\3\3\0\1\3\7\0\13\3\1\u01bb\16\3"+
    "\17\0\3\3\3\0\1\3\7\0\12\3\1\u01bc\17\3"+
    "\17\0\3\3\3\0\1\3\7\0\4\3\1\u01bd\25\3"+
    "\17\0\3\3\3\0\1\3\7\0\15\3\1\u01be\14\3"+
    "\17\0\3\3\3\0\1\3\7\0\15\3\1\u01bf\14\3"+
    "\17\0\3\3\3\0\1\3\7\0\10\3\1\u01c0\21\3"+
    "\17\0\3\3\3\0\1\3\7\0\5\3\1\u01c1\24\3"+
    "\17\0\3\3\3\0\1\3\7\0\3\3\1\u01c2\26\3"+
    "\17\0\3\3\3\0\1\3\7\0\6\3\1\u01c3\23\3"+
    "\17\0\3\3\3\0\1\3\7\0\5\3\1\u01c4\24\3"+
    "\17\0\3\3\3\0\1\3\7\0\14\3\1\u01c5\15\3"+
    "\17\0\3\3\3\0\1\3\7\0\12\3\1\u01c6\17\3"+
    "\17\0\3\3\3\0\1\3\7\0\6\3\1\u01c7\23\3"+
    "\17\0\3\3\3\0\1\3\7\0\12\3\1\u01c8\17\3"+
    "\17\0\3\3\3\0\1\3\7\0\15\3\1\u01c9\14\3"+
    "\17\0\3\3\3\0\1\3\7\0\4\3\1\u01ca\25\3"+
    "\17\0\3\3\3\0\1\3\7\0\20\3\1\u01cb\11\3"+
    "\17\0\3\3\3\0\1\3\7\0\15\3\1\u01cc\14\3"+
    "\17\0\3\3\3\0\1\3\7\0\1\u01cd\31\3\17\0"+
    "\3\3\3\0\1\3\7\0\4\3\1\u01ce\25\3\17\0"+
    "\3\3\3\0\1\3\7\0\20\3\1\u01cf\11\3\17\0"+
    "\3\3\3\0\1\3\7\0\14\3\1\u01d0\15\3\17\0"+
    "\3\3\3\0\1\3\7\0\2\3\1\u01d1\27\3\17\0"+
    "\3\3\3\0\1\3\7\0\12\3\1\u01d2\17\3\17\0"+
    "\3\3\3\0\1\3\7\0\2\3\1\u01d3\27\3\17\0"+
    "\3\3\3\0\1\3\7\0\5\3\1\u01d4\24\3\17\0"+
    "\3\3\3\0\1\3\7\0\1\u01d5\31\3\17\0\3\3"+
    "\3\0\1\3\7\0\14\3\1\u01d6\15\3\17\0\3\3"+
    "\3\0\1\3\7\0\15\3\1\u01d7\14\3\17\0\3\3"+
    "\3\0\1\3\7\0\16\3\1\u01d8\13\3\17\0\3\3"+
    "\3\0\1\3\7\0\12\3\1\u01d9\17\3\17\0\3\3"+
    "\3\0\1\3\7\0\10\3\1\u01da\21\3\17\0\3\3"+
    "\3\0\1\3\7\0\6\3\1\u01db\23\3\17\0\3\3"+
    "\3\0\1\3\7\0\14\3\1\u01dc\15\3\17\0\3\3"+
    "\3\0\1\3\7\0\25\3\1\u01dd\4\3\17\0\3\3"+
    "\3\0\1\3\7\0\15\3\1\u01de\14\3\17\0\3\3"+
    "\3\0\1\3\7\0\7\3\1\u01df\22\3\17\0\3\3"+
    "\3\0\1\3\7\0\15\3\1\u01e0\14\3\17\0\3\3"+
    "\3\0\1\3\7\0\6\3\1\u01e1\23\3\17\0\3\3"+
    "\3\0\1\3\7\0\1\u01e2\31\3\17\0\3\3\3\0"+
    "\1\3\7\0\15\3\1\u01e3\14\3\17\0\3\3\3\0"+
    "\1\3\7\0\2\3\1\u01e4\27\3\17\0\3\3\3\0"+
    "\1\3\7\0\5\3\1\u01e5\24\3\17\0\3\3\3\0"+
    "\1\3\7\0\12\3\1\u01e6\17\3\17\0\3\3\3\0"+
    "\1\3\7\0\7\3\1\u01e7\22\3\17\0\3\3\3\0"+
    "\1\3\7\0\6\3\1\u01e8\23\3\17\0\3\3\3\0"+
    "\1\3\7\0\1\u01e9\31\3\17\0\3\3\3\0\1\3"+
    "\7\0\5\3\1\u01ea\24\3\17\0\3\3\3\0\1\3"+
    "\7\0\15\3\1\u01eb\14\3\17\0\3\3\3\0\1\3"+
    "\7\0\5\3\1\u01ec\24\3\17\0\3\3\3\0\1\3"+
    "\7\0\1\u01ed\31\3\17\0\3\3\3\0\1\3\7\0"+
    "\14\3\1\u01ee\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\14\3\1\u01ef\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\15\3\1\u01f0\14\3\17\0\3\3\3\0\1\3\7\0"+
    "\6\3\1\u01f1\23\3\17\0\3\3\3\0\1\3\7\0"+
    "\24\3\1\u01f2\5\3\17\0\3\3\3\0\1\3\7\0"+
    "\31\3\1\u01f3\17\0\3\3\3\0\1\3\7\0\6\3"+
    "\1\u01f4\23\3\17\0\3\3\3\0\1\3\7\0\24\3"+
    "\1\u01f5\5\3\17\0\3\3\3\0\1\3\7\0\15\3"+
    "\1\u01f6\14\3\17\0\3\3\3\0\1\3\7\0\14\3"+
    "\1\u01f7\15\3\17\0\3\3\3\0\1\3\7\0\7\3"+
    "\1\u01f8\22\3\17\0\3\3\3\0\1\3\7\0\6\3"+
    "\1\u01f9\23\3\17\0\3\3\3\0\1\3\7\0\14\3"+
    "\1\u01fa\15\3\17\0\3\3\3\0\1\3\7\0\14\3"+
    "\1\u01fb\15\3\17\0\3\3\3\0\1\3\7\0\1\u01fc"+
    "\31\3\17\0\3\3\3\0\1\3\7\0\16\3\1\u01fd"+
    "\13\3\17\0\3\3\3\0\1\3\7\0\4\3\1\u01fe"+
    "\25\3\17\0\3\3\3\0\1\3\7\0\21\3\1\u01ff"+
    "\10\3\17\0\3\3\3\0\1\3\7\0\4\3\1\u0200"+
    "\25\3\17\0\3\3\3\0\1\3\7\0\7\3\1\u0201"+
    "\22\3\17\0\3\3\3\0\1\3\7\0\20\3\1\u0202"+
    "\11\3\17\0\3\3\3\0\1\3\7\0\16\3\1\u0203"+
    "\13\3\17\0\3\3\3\0\1\3\7\0\1\u0204\31\3"+
    "\17\0\3\3\3\0\1\3\7\0\1\u0205\31\3\17\0"+
    "\3\3\3\0\1\3\7\0\6\3\1\u0206\23\3\17\0"+
    "\3\3\3\0\1\3\7\0\12\3\1\u0207\17\3\17\0"+
    "\1\3\1\u0208\1\3\3\0\1\3\7\0\32\3\17\0"+
    "\3\3\3\0\1\3\7\0\1\u0209\31\3\17\0\3\3"+
    "\3\0\1\3\7\0\24\3\1\u020a\5\3\17\0\3\3"+
    "\3\0\1\3\7\0\14\3\1\u020b\15\3\17\0\3\3"+
    "\3\0\1\3\7\0\5\3\1\u020c\24\3\17\0\3\3"+
    "\3\0\1\3\7\0\15\3\1\u020d\14\3\17\0\3\3"+
    "\3\0\1\3\7\0\14\3\1\u020e\15\3\17\0\3\3"+
    "\3\0\1\3\7\0\20\3\1\u020f\11\3\17\0\3\3"+
    "\3\0\1\3\7\0\6\3\1\u0210\23\3\17\0\3\3"+
    "\3\0\1\3\7\0\6\3\1\u0211\23\3\17\0\3\3"+
    "\3\0\1\3\7\0\7\3\1\u0212\22\3\17\0\3\3"+
    "\3\0\1\3\7\0\20\3\1\u0213\11\3\17\0\3\3"+
    "\3\0\1\3\7\0\14\3\1\u0214\15\3\17\0\3\3"+
    "\3\0\1\3\7\0\15\3\1\u0215\14\3\17\0\3\3"+
    "\3\0\1\3\7\0\20\3\1\u0216\11\3\17\0\3\3"+
    "\3\0\1\3\7\0\5\3\1\u0217\24\3\17\0\3\3"+
    "\3\0\1\3\7\0\14\3\1\u0218\15\3\17\0\3\3"+
    "\3\0\1\3\7\0\5\3\1\u0219\24\3\17\0\3\3"+
    "\3\0\1\3\7\0\6\3\1\u021a\23\3\17\0\3\3"+
    "\3\0\1\3\7\0\15\3\1\u021b\14\3\17\0\3\3"+
    "\3\0\1\3\7\0\5\3\1\u021c\24\3\17\0\3\3"+
    "\3\0\1\3\7\0\15\3\1\u021d\14\3\17\0\3\3"+
    "\3\0\1\3\7\0\1\u021e\31\3\17\0\3\3\3\0"+
    "\1\3\7\0\1\u021f\31\3\17\0\3\3\3\0\1\3"+
    "\7\0\14\3\1\u0220\15\3\17\0\3\3\3\0\1\3"+
    "\7\0\5\3\1\u0221\24\3\17\0\3\3\3\0\1\3"+
    "\7\0\15\3\1\u0222\14\3\17\0\1\3\1\u0223\1\3"+
    "\3\0\1\3\7\0\32\3\17\0\3\3\3\0\1\3"+
    "\7\0\5\3\1\u0224\24\3\17\0\3\3\3\0\1\3"+
    "\7\0\15\3\1\u0225\14\3\17\0\3\3\3\0\1\3"+
    "\7\0\25\3\1\u0226\4\3\17\0\3\3\3\0\1\3"+
    "\7\0\14\3\1\u0227\15\3\17\0\3\3\3\0\1\3"+
    "\7\0\26\3\1\u0228\3\3\17\0\3\3\3\0\1\3"+
    "\7\0\20\3\1\u0229\11\3\17\0\3\3\3\0\1\3"+
    "\7\0\20\3\1\u022a\11\3\17\0\3\3\3\0\1\3"+
    "\7\0\2\3\1\u022b\27\3\17\0\3\3\3\0\1\3"+
    "\7\0\14\3\1\u022c\15\3\17\0\3\3\3\0\1\3"+
    "\7\0\1\u022d\31\3\17\0\3\3\3\0\1\3\7\0"+
    "\2\3\1\u022e\27\3\17\0\3\3\3\0\1\3\7\0"+
    "\14\3\1\u022f\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\24\3\1\u0230\5\3\17\0\3\3\3\0\1\3\7\0"+
    "\14\3\1\u0231\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\21\3\1\u0232\10\3\17\0\3\3\3\0\1\3\7\0"+
    "\5\3\1\u0233\24\3\17\0\3\3\3\0\1\3\7\0"+
    "\15\3\1\u0234\14\3\17\0\3\3\3\0\1\3\7\0"+
    "\14\3\1\u0235\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\15\3\1\u0236\14\3\17\0\3\3\3\0\1\3\7\0"+
    "\12\3\1\u0237\17\3\17\0\3\3\3\0\1\3\7\0"+
    "\15\3\1\u0238\14\3\17\0\3\3\3\0\1\3\7\0"+
    "\16\3\1\u0239\13\3\17\0\3\3\3\0\1\3\7\0"+
    "\4\3\1\u023a\25\3\17\0\3\3\3\0\1\3\7\0"+
    "\25\3\1\u023b\4\3\17\0\3\3\3\0\1\3\7\0"+
    "\14\3\1\u023c\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\12\3\1\u023d\17\3\17\0\3\3\3\0\1\3\7\0"+
    "\4\3\1\u023e\25\3\17\0\3\3\3\0\1\3\7\0"+
    "\15\3\1\u023f\14\3\17\0\3\3\3\0\1\3\7\0"+
    "\24\3\1\u0240\5\3\17\0\3\3\3\0\1\3\7\0"+
    "\12\3\1\u0241\17\3\17\0\3\3\3\0\1\3\7\0"+
    "\14\3\1\u0242\15\3\17\0\3\3\3\0\1\3\7\0"+
    "\4\3\1\u0243\25\3\17\0\3\3\3\0\1\3\7\0"+
    "\12\3\1\u0244\17\3\17\0\3\3\3\0\1\3\7\0"+
    "\11\3\1\u0245\20\3\17\0\3\3\3\0\1\3\7\0"+
    "\1\u0246\31\3\17\0\3\3\3\0\1\3\7\0\16\3"+
    "\1\u0247\13\3\17\0\3\3\3\0\1\3\7\0\1\u0248"+
    "\31\3\17\0\3\3\3\0\1\3\7\0\5\3\1\u0249"+
    "\24\3\17\0\3\3\3\0\1\3\7\0\1\u024a\31\3"+
    "\17\0\3\3\3\0\1\3\7\0\6\3\1\u024b\23\3"+
    "\17\0\3\3\3\0\1\3\7\0\13\3\1\u024c\16\3"+
    "\17\0\3\3\3\0\1\3\7\0\20\3\1\u024d\11\3"+
    "\17\0\3\3\3\0\1\3\7\0\2\3\1\u024e\27\3"+
    "\17\0\3\3\3\0\1\3\7\0\7\3\1\u024f\22\3"+
    "\17\0\3\3\3\0\1\3\7\0\4\3\1\u0250\25\3"+
    "\17\0\3\3\3\0\1\3\7\0\20\3\1\u0251\11\3"+
    "\17\0\3\3\3\0\1\3\7\0\4\3\1\u0252\25\3"+
    "\17\0\3\3\3\0\1\3\7\0\12\3\1\u0253\17\3"+
    "\17\0\3\3\3\0\1\3\7\0\14\3\1\u0254\15\3"+
    "\17\0\3\3\3\0\1\3\7\0\15\3\1\u0255\14\3"+
    "\17\0\3\3\3\0\1\3\7\0\2\3\1\u0256\27\3"+
    "\17\0\3\3\3\0\1\3\7\0\5\3\1\u0257\24\3"+
    "\17\0\3\3\3\0\1\3\7\0\1\u0258\31\3\17\0"+
    "\3\3\3\0\1\3\7\0\26\3\1\u0259\3\3\17\0"+
    "\3\3\3\0\1\3\7\0\1\u025a\31\3\17\0\3\3"+
    "\3\0\1\3\7\0\1\u025b\31\3\17\0\3\3\3\0"+
    "\1\3\7\0\16\3\1\u025c\13\3\17\0\3\3\3\0"+
    "\1\3\7\0\24\3\1\u025d\5\3\17\0\3\3\3\0"+
    "\1\3\7\0\16\3\1\u025e\13\3\17\0\3\3\3\0"+
    "\1\3\7\0\7\3\1\u025f\22\3\17\0\3\3\3\0"+
    "\1\3\7\0\10\3\1\u0260\21\3\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25575];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\30\1\1\11\2\1\4\11\3\1\3\11\3\1\2\0"+
    "\1\11\130\1\5\11\2\1\2\0\151\1\1\0\u015f\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[608];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
    return new Symbol (type,yyline,yycolumn,value);
    }
    private Symbol symbol(int type){
    return new Symbol (type,yyline,yycolumn);
    }
    int line;
    int column;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Cup_Flex(java.io.Reader in) {
  line = 0;
column = 0;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.error ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 165: break;
          case 2: 
            { return new Symbol(sym.Identificador ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 166: break;
          case 3: 
            { return new Symbol(sym.Int ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 167: break;
          case 4: 
            { return new Symbol(sym.Resta ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 168: break;
          case 5: 
            { return new Symbol(sym.Punto ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 169: break;
          case 6: 
            { return new Symbol(sym.Suma ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 170: break;
          case 7: 
            { /*Ignore*/
            } 
            // fall through
          case 171: break;
          case 8: 
            { return new Symbol(sym.Division ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 172: break;
          case 9: 
            { return new Symbol(sym.Multiplicacion ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 173: break;
          case 10: 
            { return new Symbol(sym.Porcentaje ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 174: break;
          case 11: 
            { return new Symbol(sym.Igual ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 175: break;
          case 12: 
            { return new Symbol(sym.Numeral ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 176: break;
          case 13: 
            { return new Symbol(sym.Punto_y_coma ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 177: break;
          case 14: 
            { return new Symbol(sym.Coma ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 178: break;
          case 15: 
            { return new Symbol(sym.Parentesis_de_apertura ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 179: break;
          case 16: 
            { return new Symbol(sym.Parentesis_de_cierre ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 180: break;
          case 17: 
            { return new Symbol(sym.Menor ,yychar, yyline, yytext());
            } 
            // fall through
          case 181: break;
          case 18: 
            { return new Symbol(sym.Mayor ,yychar, yyline, yytext());
            } 
            // fall through
          case 182: break;
          case 19: 
            { return new Symbol(sym.Arroba ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 183: break;
          case 20: 
            { return new Symbol(sym.Corchete_de_apertura ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 184: break;
          case 21: 
            { return new Symbol(sym.Corchete_de_cierre ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 185: break;
          case 22: 
            { return new Symbol(sym.Float ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 186: break;
          case 23: 
            { return new Symbol(sym.String ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 187: break;
          case 24: 
            { return new Symbol(sym.NO ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 188: break;
          case 25: 
            { return new Symbol(sym.ON ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 189: break;
          case 26: 
            { return new Symbol(sym.OF ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 190: break;
          case 27: 
            { return new Symbol(sym.AS ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 191: break;
          case 28: 
            { return new Symbol(sym.GO ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 192: break;
          case 29: 
            { return new Symbol(sym.GB ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 193: break;
          case 30: 
            { return new Symbol(sym.IN ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 194: break;
          case 31: 
            { return new Symbol(sym.IF ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 195: break;
          case 32: 
            { return new Symbol(sym.IS ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 196: break;
          case 33: 
            { return new Symbol(sym.TB ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 197: break;
          case 34: 
            { return new Symbol(sym.MB ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 198: break;
          case 35: 
            { return new Symbol(sym.BY ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 199: break;
          case 36: 
            { return new Symbol(sym.KB ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 200: break;
          case 37: 
            { return new Symbol(sym.Igualdad ,yychar, yyline, yytext());
            } 
            // fall through
          case 201: break;
          case 38: 
            { return new Symbol(sym.Doble_numeral ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 202: break;
          case 39: 
            { return new Symbol(sym.Menor_o_igual ,yychar, yyline, yytext());
            } 
            // fall through
          case 203: break;
          case 40: 
            { return new Symbol(sym.Mayor_o_igual ,yychar, yyline, yytext());
            } 
            // fall through
          case 204: break;
          case 41: 
            { return new Symbol(sym.Diferente ,yychar, yyline, yytext());
            } 
            // fall through
          case 205: break;
          case 42: 
            { return new Symbol(sym.NOT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 206: break;
          case 43: 
            { return new Symbol(sym.FOR ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 207: break;
          case 44: 
            { return new Symbol(sym.AND ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 208: break;
          case 45: 
            { return new Symbol(sym.ALL ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 209: break;
          case 46: 
            { return new Symbol(sym.ASC ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 210: break;
          case 47: 
            { return new Symbol(sym.ADD   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 211: break;
          case 48: 
            { return new Symbol(sym.AVG ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 212: break;
          case 49: 
            { return new Symbol(sym.SUM ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 213: break;
          case 50: 
            { return new Symbol(sym.SET ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 214: break;
          case 51: 
            { return new Symbol(sym.INT   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 215: break;
          case 52: 
            { return new Symbol(sym.TOP ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 216: break;
          case 53: 
            { return new Symbol(sym.MAX             ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 217: break;
          case 54: 
            { return new Symbol(sym.MIN             ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 218: break;
          case 55: 
            { return new Symbol(sym.BIT   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 219: break;
          case 56: 
            { return new Symbol(sym.KEY ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 220: break;
          case 57: 
            { return new Symbol(sym.NULL ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 221: break;
          case 58: 
            { return new Symbol(sym.NAME   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 222: break;
          case 59: 
            { return new Symbol(sym.USER ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 223: break;
          case 60: 
            { return new Symbol(sym.LONG           ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 224: break;
          case 61: 
            { return new Symbol(sym.LOOP ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 225: break;
          case 62: 
            { return new Symbol(sym.LIKE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 226: break;
          case 63: 
            { return new Symbol(sym.LEFT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 227: break;
          case 64: 
            { return new Symbol(sym.FULL ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 228: break;
          case 65: 
            { return new Symbol(sym.FROM ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 229: break;
          case 66: 
            { return new Symbol(sym.FILE   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 230: break;
          case 67: 
            { return new Symbol(sym.REAL     ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 231: break;
          case 68: 
            { return new Symbol(sym.SIZE   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 232: break;
          case 69: 
            { return new Symbol(sym.INTO ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 233: break;
          case 70: 
            { return new Symbol(sym.HASH ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 234: break;
          case 71: 
            { return new Symbol(sym.TRAN ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 235: break;
          case 72: 
            { return new Symbol(sym.TIME      ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 236: break;
          case 73: 
            { return new Symbol(sym.TEXT         ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 237: break;
          case 74: 
            { return new Symbol(sym.DROP   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 238: break;
          case 75: 
            { return new Symbol(sym.DATE   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 239: break;
          case 76: 
            { return new Symbol(sym.DESC ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 240: break;
          case 77: 
            { return new Symbol(sym.VIEW   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 241: break;
          case 78: 
            { return new Symbol(sym.CHAR   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 242: break;
          case 79: 
            { return new Symbol(sym.JOIN ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 243: break;
          case 80: 
            { return new Symbol(sym.BLOB   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 244: break;
          case 81: 
            { return new Symbol(sym.BYTE          ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 245: break;
          case 82: 
            { return new Symbol(sym.YEAR   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 246: break;
          case 83: 
            { return new Symbol(sym.NAMES   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 247: break;
          case 84: 
            { return new Symbol(sym.NCHAR             ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 248: break;
          case 85: 
            { return new Symbol(sym.LOCAL ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 249: break;
          case 86: 
            { return new Symbol(sym.FLOAT   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 250: break;
          case 87: 
            { return new Symbol(sym.OUTER ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 251: break;
          case 88: 
            { return new Symbol(sym.ORDER ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 252: break;
          case 89: 
            { return new Symbol(sym.RIGHT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 253: break;
          case 90: 
            { return new Symbol(sym.ALTER   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 254: break;
          case 91: 
            { return new Symbol(sym.GROUP ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 255: break;
          case 92: 
            { return new Symbol(sym.PIVOT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 256: break;
          case 93: 
            { return new Symbol(sym.INNER ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 257: break;
          case 94: 
            { return new Symbol(sym.INDEX  ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 258: break;
          case 95: 
            { return new Symbol(sym.IMAGE    ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 259: break;
          case 96: 
            { return new Symbol(sym.TABLE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 260: break;
          case 97: 
            { return new Symbol(sym.COUNT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 261: break;
          case 98: 
            { return new Symbol(sym.CHECK ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 262: break;
          case 99: 
            { return new Symbol(sym.MERGE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 263: break;
          case 100: 
            { return new Symbol(sym.BEGIN ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 264: break;
          case 101: 
            { return new Symbol(sym.WHERE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 265: break;
          case 102: 
            { return new Symbol(sym.UNIQUE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 266: break;
          case 103: 
            { return new Symbol(sym.UPDATE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 267: break;
          case 104: 
            { return new Symbol(sym.OUTPUT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 268: break;
          case 105: 
            { return new Symbol(sym.REMOTE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 269: break;
          case 106: 
            { return new Symbol(sym.ACTION   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 270: break;
          case 107: 
            { return new Symbol(sym.STATIC ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 271: break;
          case 108: 
            { return new Symbol(sym.SELECT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 272: break;
          case 109: 
            { return new Symbol(sym.SCROLL ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 273: break;
          case 110: 
            { return new Symbol(sym.GLOBAL ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 274: break;
          case 111: 
            { return new Symbol(sym.INSERT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 275: break;
          case 112: 
            { return new Symbol(sym.HAVING ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 276: break;
          case 113: 
            { return new Symbol(sym.ESCAPE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 277: break;
          case 114: 
            { return new Symbol(sym.EXISTS ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 278: break;
          case 115: 
            { return new Symbol(sym.DOUBLE            ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 279: break;
          case 116: 
            { return new Symbol(sym.DELETE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 280: break;
          case 117: 
            { return new Symbol(sym.VALUES,yycolumn, yyline, yytext());
            } 
            // fall through
          case 281: break;
          case 118: 
            { return new Symbol(sym.CURSOR ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 282: break;
          case 119: 
            { return new Symbol(sym.COLUMN   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 283: break;
          case 120: 
            { return new Symbol(sym.COMMIT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 284: break;
          case 121: 
            { return new Symbol(sym.CREATE   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 285: break;
          case 122: 
            { return new Symbol(sym.MODIFY   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 286: break;
          case 123: 
            { return new Symbol(sym.BINARY   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 287: break;
          case 124: 
            { return new Symbol(sym.KEYSET ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 288: break;
          case 125: 
            { return new Symbol(sym.UNPIVOT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 289: break;
          case 126: 
            { return new Symbol(sym.FOREIGN ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 290: break;
          case 127: 
            { return new Symbol(sym.PRIMARY ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 291: break;
          case 128: 
            { return new Symbol(sym.PERCENT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 292: break;
          case 129: 
            { return new Symbol(sym.INTEGER   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 293: break;
          case 130: 
            { return new Symbol(sym.INCLUDE   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 294: break;
          case 131: 
            { return new Symbol(sym.DEFAULT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 295: break;
          case 132: 
            { return new Symbol(sym.DECLARE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 296: break;
          case 133: 
            { return new Symbol(sym.DYNAMIC ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 297: break;
          case 134: 
            { return new Symbol(sym.VARCHAR   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 298: break;
          case 135: 
            { return new Symbol(sym.CURRENT   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 299: break;
          case 136: 
            { return new Symbol(sym.COLLATE   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 300: break;
          case 137: 
            { return new Symbol(sym.MODULAR ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 301: break;
          case 138: 
            { return new Symbol(sym.MAXSIZE ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 302: break;
          case 139: 
            { return new Symbol(sym.BOOLEAN   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 303: break;
          case 140: 
            { return new Symbol(sym.BETWEEN ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 304: break;
          case 141: 
            { return new Symbol(sym.NVARCHAR ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 305: break;
          case 142: 
            { return new Symbol(sym.FILENAME ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 306: break;
          case 143: 
            { return new Symbol(sym.ROLLBACK ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 307: break;
          case 144: 
            { return new Symbol(sym.SMALLINT   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 308: break;
          case 145: 
            { return new Symbol(sym.IDENTITY ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 309: break;
          case 146: 
            { return new Symbol(sym.DATABASE   ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 310: break;
          case 147: 
            { return new Symbol(sym.DISTINCT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 311: break;
          case 148: 
            { return new Symbol(sym.UNLIMITED ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 312: break;
          case 149: 
            { return new Symbol(sym.READ_ONLY ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 313: break;
          case 150: 
            { return new Symbol(sym.SAVEPOINT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 314: break;
          case 151: 
            { return new Symbol(sym.TIMESTAMP       ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 315: break;
          case 152: 
            { return new Symbol(sym.CLUSTERED ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 316: break;
          case 153: 
            { return new Symbol(sym.FILEGROWTH ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 317: break;
          case 154: 
            { return new Symbol(sym.OPTIMISTIC ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 318: break;
          case 155: 
            { return new Symbol(sym.ROWGUIDCOL ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 319: break;
          case 156: 
            { return new Symbol(sym.REFERENCES ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 320: break;
          case 157: 
            { return new Symbol(sym.CONSTRAINT ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 321: break;
          case 158: 
            { return new Symbol(sym.REPLICATION ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 322: break;
          case 159: 
            { return new Symbol(sym.TRANSACTION ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 323: break;
          case 160: 
            { return new Symbol(sym.NONCLUSTERED ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 324: break;
          case 161: 
            { return new Symbol(sym.FORWARD_ONLY ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 325: break;
          case 162: 
            { return new Symbol(sym.FAST_FORWARD ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 326: break;
          case 163: 
            { return new Symbol(sym.SCROLL_LOCKS ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 327: break;
          case 164: 
            { return new Symbol(sym.TYPE_WARNING ,yycolumn, yyline, yytext());
            } 
            // fall through
          case 328: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
