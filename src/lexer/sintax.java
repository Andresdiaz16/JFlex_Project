
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lexer;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0224\000\002\002\004\000\002\002\003\000\002\026" +
    "\003\000\002\026\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\004\017\000\002\004\020\000\002\004\016\000\002\004" +
    "\017\000\002\004\016\000\002\004\017\000\002\004\015" +
    "\000\002\004\016\000\002\004\013\000\002\004\014\000" +
    "\002\004\015\000\002\004\013\000\002\004\014\000\002" +
    "\004\013\000\002\004\014\000\002\004\012\000\002\004" +
    "\011\000\002\004\020\000\002\004\021\000\002\004\017" +
    "\000\002\004\020\000\002\004\017\000\002\004\020\000" +
    "\002\004\016\000\002\004\017\000\002\004\014\000\002" +
    "\004\015\000\002\004\016\000\002\004\014\000\002\004" +
    "\015\000\002\004\015\000\002\004\016\000\002\004\013" +
    "\000\002\004\012\000\002\004\004\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\012\012\000\002\012" +
    "\011\000\002\012\011\000\002\012\010\000\002\012\011" +
    "\000\002\012\010\000\002\012\010\000\002\012\007\000" +
    "\002\012\010\000\002\012\007\000\002\012\007\000\002" +
    "\012\006\000\002\012\005\000\002\021\012\000\002\021" +
    "\011\000\002\021\011\000\002\021\010\000\002\021\011" +
    "\000\002\021\010\000\002\021\010\000\002\021\007\000" +
    "\002\021\011\000\002\021\010\000\002\021\010\000\002" +
    "\021\007\000\002\021\010\000\002\021\007\000\002\021" +
    "\007\000\002\021\006\000\002\021\005\000\002\022\004" +
    "\000\002\024\007\000\002\024\007\000\002\024\007\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\023\003\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\030\014\000\002\030\014\000" +
    "\002\030\013\000\002\030\013\000\002\030\013\000\002" +
    "\030\012\000\002\030\013\000\002\030\013\000\002\030" +
    "\012\000\002\030\012\000\002\030\012\000\002\030\011" +
    "\000\002\030\005\000\002\044\003\000\002\044\003\000" +
    "\002\044\004\000\002\044\003\000\002\044\005\000\002" +
    "\044\006\000\002\044\005\000\002\044\004\000\002\047" +
    "\007\000\002\047\006\000\002\047\010\000\002\047\007" +
    "\000\002\047\007\000\002\047\006\000\002\047\007\000" +
    "\002\047\006\000\002\047\007\000\002\047\006\000\002" +
    "\047\007\000\002\047\006\000\002\047\007\000\002\047" +
    "\006\000\002\047\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\045\006\000\002\045\003\000" +
    "\002\031\004\000\002\031\003\000\002\033\005\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\032" +
    "\005\000\002\032\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\005\000\002\034\007\000\002\034\004\000" +
    "\002\034\003\000\002\213\003\000\002\213\003\000\002" +
    "\051\004\000\002\051\005\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\053\004\000" +
    "\002\054\005\000\002\055\004\000\002\056\005\000\002" +
    "\056\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\005\000\002\060\003\000\002\061\014\000\002\062\004" +
    "\000\002\062\003\000\002\063\005\000\002\063\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\065\003\000\002\065\003\000\002\066\006\000\002\067" +
    "\005\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\071\005\000\002\072\004\000" +
    "\002\072\003\000\002\073\006\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\075\006\000\002\076" +
    "\014\000\002\077\003\000\002\077\003\000\002\100\005" +
    "\000\002\101\005\000\002\102\006\000\002\102\003\000" +
    "\002\103\006\000\002\103\003\000\002\104\007\000\002" +
    "\104\003\000\002\105\011\000\002\106\004\000\002\106" +
    "\003\000\002\107\004\000\002\107\003\000\002\110\005" +
    "\000\002\110\003\000\002\111\004\000\002\111\003\000" +
    "\002\112\003\000\002\112\003\000\002\112\003\000\002" +
    "\113\005\000\002\113\003\000\002\172\004\000\002\173" +
    "\006\000\002\173\005\000\002\173\012\000\002\173\007" +
    "\000\002\174\007\000\002\175\006\000\002\175\003\000" +
    "\002\176\006\000\002\177\005\000\002\177\003\000\002" +
    "\162\006\000\002\114\006\000\002\115\005\000\002\115" +
    "\003\000\002\115\003\000\002\116\010\000\002\116\007" +
    "\000\002\116\006\000\002\116\004\000\002\116\004\000" +
    "\002\117\003\000\002\117\003\000\002\215\007\000\002" +
    "\215\003\000\002\120\003\000\002\120\005\000\002\121" +
    "\004\000\002\121\003\000\002\121\003\000\002\163\003" +
    "\000\002\163\003\000\002\214\003\000\002\214\003\000" +
    "\002\122\004\000\002\122\003\000\002\123\003\000\002" +
    "\123\003\000\002\123\003\000\002\123\003\000\002\123" +
    "\003\000\002\124\004\000\002\124\003\000\002\200\005" +
    "\000\002\200\003\000\002\201\004\000\002\201\003\000" +
    "\002\202\005\000\002\202\010\000\002\202\004\000\002" +
    "\202\010\000\002\202\007\000\002\144\003\000\002\144" +
    "\003\000\002\144\003\000\002\203\004\000\002\203\003" +
    "\000\002\204\005\000\002\204\003\000\002\205\005\000" +
    "\002\205\003\000\002\206\004\000\002\206\004\000\002" +
    "\207\003\000\002\207\003\000\002\210\003\000\002\210" +
    "\004\000\002\211\005\000\002\211\004\000\002\211\006" +
    "\000\002\212\004\000\002\212\004\000\002\212\003\000" +
    "\002\125\007\000\002\125\006\000\002\126\003\000\002" +
    "\126\003\000\002\127\006\000\002\127\004\000\002\137" +
    "\010\000\002\137\007\000\002\137\006\000\002\137\012" +
    "\000\002\137\015\000\002\137\011\000\002\137\012\000" +
    "\002\137\011\000\002\137\010\000\002\137\011\000\002" +
    "\137\006\000\002\130\005\000\002\131\007\000\002\131" +
    "\010\000\002\131\006\000\002\131\005\000\002\131\006" +
    "\000\002\131\004\000\002\131\004\000\002\131\003\000" +
    "\002\131\004\000\002\132\004\000\002\132\003\000\002" +
    "\132\005\000\002\132\005\000\002\132\004\000\002\132" +
    "\004\000\002\132\003\000\002\133\003\000\002\133\004" +
    "\000\002\134\007\000\002\140\006\000\002\140\006\000" +
    "\002\154\010\000\002\154\006\000\002\141\003\000\002" +
    "\141\003\000\002\142\010\000\002\142\011\000\002\142" +
    "\006\000\002\143\005\000\002\145\006\000\002\145\012" +
    "\000\002\145\006\000\002\146\006\000\002\146\012\000" +
    "\002\146\006\000\002\147\006\000\002\147\012\000\002" +
    "\147\006\000\002\150\006\000\002\150\012\000\002\150" +
    "\006\000\002\150\012\000\002\150\006\000\002\151\011" +
    "\000\002\151\005\000\002\152\006\000\002\152\012\000" +
    "\002\152\006\000\002\153\006\000\002\153\006\000\002" +
    "\013\006\000\002\013\005\000\002\013\005\000\002\013" +
    "\004\000\002\013\005\000\002\013\004\000\002\020\022" +
    "\000\002\020\021\000\002\020\021\000\002\020\020\000" +
    "\002\020\021\000\002\020\020\000\002\025\004\000\002" +
    "\025\003\000\002\015\011\000\002\015\012\000\002\015" +
    "\010\000\002\015\011\000\002\016\005\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\004\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\014\004\000\002\014\003\000\002\041\003" +
    "\000\002\041\005\000\002\041\005\000\002\041\003\000" +
    "\002\042\005\000\002\042\005\000\002\042\003\000\002" +
    "\043\004\000\002\043\005\000\002\043\003\000\002\036" +
    "\005\000\002\036\004\000\002\036\004\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\037\005\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\004\000\002\037\003\000\002\037\003" +
    "\000\002\037\004\000\002\037\003\000\002\037\004\000" +
    "\002\037\003\000\002\037\004\000\002\037\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\004\000\002\035\004\000\002\155\006\000\002\155\006" +
    "\000\002\155\005\000\002\155\005\000\002\155\005\000" +
    "\002\217\006\000\002\217\006\000\002\217\005\000\002" +
    "\217\005\000\002\217\005\000\002\220\005\000\002\220" +
    "\005\000\002\221\006\000\002\221\006\000\002\221\005" +
    "\000\002\156\015\000\002\156\005\000\002\157\003\000" +
    "\002\157\003\000\002\157\003\000\002\160\003\000\002" +
    "\160\003\000\002\160\003\000\002\161\003\000\002\161" +
    "\003\000\002\161\003\000\002\161\003\000\002\161\003" +
    "\000\002\222\003\000\002\222\003\000\002\222\003\000" +
    "\002\222\003\000\002\223\003\000\002\223\003\000\002" +
    "\164\005\000\002\164\003\000\002\165\004\000\002\165" +
    "\003\000\002\166\004\000\002\167\005\000\002\167\003" +
    "\000\002\007\006\000\002\007\007\000\002\007\004\000" +
    "\002\007\005\000\002\136\003\000\002\136\006\000\002" +
    "\136\003\000\002\136\006\000\002\136\003\000\002\136" +
    "\006\000\002\136\003\000\002\136\006\000\002\136\003" +
    "\000\002\136\006\000\002\136\003\000\002\136\006\000" +
    "\002\136\003\000\002\136\006\000\002\136\003\000\002" +
    "\136\006\000\002\136\006\000\002\136\003\000\002\136" +
    "\006\000\002\136\003\000\002\136\003\000\002\136\003" +
    "\000\002\136\003\000\002\136\003\000\002\136\003\000" +
    "\002\136\003\000\002\136\003\000\002\136\003\000\002" +
    "\136\003\000\002\136\003\000\002\136\004\000\002\136" +
    "\004\000\002\136\004\000\002\136\004\000\002\136\003" +
    "\000\002\136\006\000\002\136\006\000\002\135\007\000" +
    "\002\135\005\000\002\135\003\000\002\011\003\000\002" +
    "\011\005\000\002\011\007\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\005\000\002\011\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\027\002\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u050e\000\040\002\ufde2\003\030\004\040\024\015\050" +
    "\012\061\024\140\041\145\042\203\016\204\010\207\022" +
    "\212\047\213\004\214\052\215\034\001\002\000\016\003" +
    "\u050d\011\056\013\063\036\062\205\061\206\057\001\002" +
    "\000\040\002\ufde2\003\030\004\040\024\015\050\012\061" +
    "\024\140\041\145\042\203\016\204\010\207\022\212\047" +
    "\213\004\214\052\215\034\001\002\000\040\002\ufde2\003" +
    "\030\004\040\024\015\050\012\061\024\140\041\145\042" +
    "\203\016\204\010\207\022\212\047\213\004\214\052\215" +
    "\034\001\002\000\040\002\ufde2\003\030\004\040\024\015" +
    "\050\012\061\024\140\041\145\042\203\016\204\010\207" +
    "\022\212\047\213\004\214\052\215\034\001\002\000\004" +
    "\163\u0505\001\002\000\004\002\u0504\001\002\000\020\003" +
    "\u04c3\006\u024c\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\040\002\ufde2\003\030\004\040\024\015\050" +
    "\012\061\024\140\041\145\042\203\016\204\010\207\022" +
    "\212\047\213\004\214\052\215\034\001\002\000\040\002" +
    "\ufde2\003\030\004\040\024\015\050\012\061\024\140\041" +
    "\145\042\203\016\204\010\207\022\212\047\213\004\214" +
    "\052\215\034\001\002\000\010\003\u04a4\006\u024c\025\u04a5" +
    "\001\002\000\014\124\u0437\127\u0438\137\u0439\163\u043a\172" +
    "\u043b\001\002\000\040\002\ufde2\003\030\004\040\024\015" +
    "\050\012\061\024\140\041\145\042\203\016\204\010\207" +
    "\022\212\047\213\004\214\052\215\034\001\002\000\040" +
    "\002\ufde2\003\030\004\040\024\015\050\012\061\024\140" +
    "\041\145\042\203\016\204\010\207\022\212\047\213\004" +
    "\214\052\215\034\001\002\000\040\002\ufde2\003\030\004" +
    "\040\024\015\050\012\061\024\140\041\145\042\203\016" +
    "\204\010\207\022\212\047\213\004\214\052\215\034\001" +
    "\002\000\022\003\u0429\011\056\013\063\036\062\205\061" +
    "\206\057\210\u042a\211\u042b\001\002\000\040\002\ufde2\003" +
    "\030\004\040\024\015\050\012\061\024\140\041\145\042" +
    "\203\016\204\010\207\022\212\047\213\004\214\052\215" +
    "\034\001\002\000\050\003\u034d\005\ufde2\006\u024c\011\056" +
    "\013\063\020\ufde2\025\ufde2\036\062\054\u0352\061\u0347\062" +
    "\u0349\063\u034b\107\u034e\110\u0353\171\u0351\205\061\206\057" +
    "\244\u034f\245\u034a\001\002\000\040\002\ufde2\003\030\004" +
    "\040\024\015\050\012\061\024\140\041\145\042\203\016" +
    "\204\010\207\022\212\047\213\004\214\052\215\034\001" +
    "\002\000\004\002\ufffe\001\002\000\040\002\ufde2\003\030" +
    "\004\040\024\015\050\012\061\024\140\041\145\042\203" +
    "\016\204\010\207\022\212\047\213\004\214\052\215\034" +
    "\001\002\000\006\021\074\022\076\001\002\000\040\002" +
    "\ufde2\003\030\004\040\024\015\050\012\061\024\140\041" +
    "\145\042\203\016\204\010\207\022\212\047\213\004\214" +
    "\052\215\034\001\002\000\004\002\000\001\002\000\040" +
    "\002\ufde2\003\030\004\040\024\015\050\012\061\024\140" +
    "\041\145\042\203\016\204\010\207\022\212\047\213\004" +
    "\214\052\215\034\001\002\000\016\003\u0319\011\056\013" +
    "\063\036\062\205\061\206\057\001\002\000\040\002\ufde2" +
    "\003\030\004\040\024\015\050\012\061\024\140\041\145" +
    "\042\203\016\204\010\207\022\212\047\213\004\214\052" +
    "\215\034\001\002\000\040\002\ufde2\003\030\004\040\024" +
    "\015\050\012\061\024\140\041\145\042\203\016\204\010" +
    "\207\022\212\047\213\004\214\052\215\034\001\002\000" +
    "\040\002\ufde2\003\030\004\040\024\015\050\012\061\024" +
    "\140\041\145\042\203\016\204\010\207\022\212\047\213" +
    "\004\214\052\215\034\001\002\000\020\005\u024b\006\u024c" +
    "\011\056\013\063\036\062\205\061\206\057\001\002\000" +
    "\024\003\252\115\ufde2\116\ufde2\117\244\124\ufde2\127\242" +
    "\137\251\163\250\172\243\001\002\000\014\124\127\127" +
    "\130\137\131\163\132\172\133\001\002\000\040\002\ufde2" +
    "\003\030\004\040\024\015\050\012\061\024\140\041\145" +
    "\042\203\016\204\010\207\022\212\047\213\004\214\052" +
    "\215\034\001\002\000\040\002\ufde2\003\030\004\040\024" +
    "\015\050\012\061\024\140\041\145\042\203\016\204\010" +
    "\207\022\212\047\213\004\214\052\215\034\001\002\000" +
    "\040\002\ufde2\003\030\004\040\024\015\050\012\061\024" +
    "\140\041\145\042\203\016\204\010\207\022\212\047\213" +
    "\004\214\052\215\034\001\002\000\040\002\ufde2\003\030" +
    "\004\040\024\015\050\012\061\024\140\041\145\042\203" +
    "\016\204\010\207\022\212\047\213\004\214\052\215\034" +
    "\001\002\000\022\003\110\011\056\013\063\036\062\205" +
    "\061\206\057\210\111\211\112\001\002\000\040\002\ufde2" +
    "\003\030\004\040\024\015\050\012\061\024\140\041\145" +
    "\042\203\016\204\010\207\022\212\047\213\004\214\052" +
    "\215\034\001\002\000\004\002\uffff\001\002\000\010\003" +
    "\053\210\054\211\055\001\002\000\006\021\074\022\076" +
    "\001\002\000\014\011\056\013\063\036\062\205\061\206" +
    "\057\001\002\000\014\011\056\013\063\036\062\205\061" +
    "\206\057\001\002\000\014\011\056\013\063\036\062\205" +
    "\061\206\057\001\002\000\004\013\101\001\002\000\006" +
    "\021\074\022\076\001\002\000\004\013\073\001\002\000" +
    "\004\013\072\001\002\000\302\002\ufdee\003\ufdee\004\ufdee" +
    "\005\ufdee\007\ufdee\011\ufdee\012\ufdee\013\ufdee\014\ufdee\015" +
    "\ufdee\016\ufdee\017\065\020\064\021\ufdee\022\ufdee\023\ufdee" +
    "\024\ufdee\025\ufdee\027\ufdee\031\ufdee\032\ufdee\033\ufdee\034" +
    "\ufdee\035\ufdee\037\ufdee\044\ufdee\045\ufdee\046\ufdee\050\ufdee" +
    "\051\ufdee\052\ufdee\053\ufdee\054\ufdee\055\ufdee\056\ufdee\061" +
    "\ufdee\064\ufdee\066\ufdee\067\ufdee\070\ufdee\072\ufdee\073\ufdee" +
    "\074\ufdee\075\ufdee\076\ufdee\077\ufdee\100\ufdee\101\ufdee\102" +
    "\ufdee\103\ufdee\104\ufdee\105\ufdee\106\ufdee\111\ufdee\112\ufdee" +
    "\113\ufdee\115\ufdee\116\ufdee\117\ufdee\120\ufdee\121\ufdee\123" +
    "\ufdee\134\ufdee\140\ufdee\143\ufdee\145\ufdee\146\ufdee\147\ufdee" +
    "\150\ufdee\151\ufdee\152\ufdee\153\ufdee\154\ufdee\155\ufdee\156" +
    "\ufdee\157\ufdee\160\ufdee\161\ufdee\162\ufdee\163\ufdee\164\ufdee" +
    "\165\ufdee\166\ufdee\167\ufdee\170\ufdee\177\ufdee\201\ufdee\202" +
    "\ufdee\203\ufdee\204\ufdee\207\ufdee\212\ufdee\213\ufdee\214\ufdee" +
    "\215\ufdee\246\ufdee\001\002\000\014\011\056\013\063\036" +
    "\062\205\061\206\057\001\002\000\004\013\066\001\002" +
    "\000\302\002\ufded\003\ufded\004\ufded\005\ufded\007\ufded\011" +
    "\ufded\012\ufded\013\ufded\014\ufded\015\ufded\016\ufded\017\067" +
    "\020\ufded\021\ufded\022\ufded\023\ufded\024\ufded\025\ufded\027" +
    "\ufded\031\ufded\032\ufded\033\ufded\034\ufded\035\ufded\037\ufded" +
    "\044\ufded\045\ufded\046\ufded\050\ufded\051\ufded\052\ufded\053" +
    "\ufded\054\ufded\055\ufded\056\ufded\061\ufded\064\ufded\066\ufded" +
    "\067\ufded\070\ufded\072\ufded\073\ufded\074\ufded\075\ufded\076" +
    "\ufded\077\ufded\100\ufded\101\ufded\102\ufded\103\ufded\104\ufded" +
    "\105\ufded\106\ufded\111\ufded\112\ufded\113\ufded\115\ufded\116" +
    "\ufded\117\ufded\120\ufded\121\ufded\123\ufded\134\ufded\140\ufded" +
    "\143\ufded\145\ufded\146\ufded\147\ufded\150\ufded\151\ufded\152" +
    "\ufded\153\ufded\154\ufded\155\ufded\156\ufded\157\ufded\160\ufded" +
    "\161\ufded\162\ufded\163\ufded\164\ufded\165\ufded\166\ufded\167" +
    "\ufded\170\ufded\177\ufded\201\ufded\202\ufded\203\ufded\204\ufded" +
    "\207\ufded\212\ufded\213\ufded\214\ufded\215\ufded\246\ufded\001" +
    "\002\000\004\013\070\001\002\000\300\002\ufdec\003\ufdec" +
    "\004\ufdec\005\ufdec\007\ufdec\011\ufdec\012\ufdec\013\ufdec\014" +
    "\ufdec\015\ufdec\016\ufdec\020\ufdec\021\ufdec\022\ufdec\023\ufdec" +
    "\024\ufdec\025\ufdec\027\ufdec\031\ufdec\032\ufdec\033\ufdec\034" +
    "\ufdec\035\ufdec\037\ufdec\044\ufdec\045\ufdec\046\ufdec\050\ufdec" +
    "\051\ufdec\052\ufdec\053\ufdec\054\ufdec\055\ufdec\056\ufdec\061" +
    "\ufdec\064\ufdec\066\ufdec\067\ufdec\070\ufdec\072\ufdec\073\ufdec" +
    "\074\ufdec\075\ufdec\076\ufdec\077\ufdec\100\ufdec\101\ufdec\102" +
    "\ufdec\103\ufdec\104\ufdec\105\ufdec\106\ufdec\111\ufdec\112\ufdec" +
    "\113\ufdec\115\ufdec\116\ufdec\117\ufdec\120\ufdec\121\ufdec\123" +
    "\ufdec\134\ufdec\140\ufdec\143\ufdec\145\ufdec\146\ufdec\147\ufdec" +
    "\150\ufdec\151\ufdec\152\ufdec\153\ufdec\154\ufdec\155\ufdec\156" +
    "\ufdec\157\ufdec\160\ufdec\161\ufdec\162\ufdec\163\ufdec\164\ufdec" +
    "\165\ufdec\166\ufdec\167\ufdec\170\ufdec\177\ufdec\201\ufdec\202" +
    "\ufdec\203\ufdec\204\ufdec\207\ufdec\212\ufdec\213\ufdec\214\ufdec" +
    "\215\ufdec\246\ufdec\001\002\000\300\002\ufde8\003\ufde8\004" +
    "\ufde8\005\ufde8\007\ufde8\011\ufde8\012\ufde8\013\ufde8\014\ufde8" +
    "\015\ufde8\016\ufde8\020\ufde8\021\ufde8\022\ufde8\023\ufde8\024" +
    "\ufde8\025\ufde8\027\ufde8\031\ufde8\032\ufde8\033\ufde8\034\ufde8" +
    "\035\ufde8\037\ufde8\044\ufde8\045\ufde8\046\ufde8\050\ufde8\051" +
    "\ufde8\052\ufde8\053\ufde8\054\ufde8\055\ufde8\056\ufde8\061\ufde8" +
    "\064\ufde8\066\ufde8\067\ufde8\070\ufde8\072\ufde8\073\ufde8\074" +
    "\ufde8\075\ufde8\076\ufde8\077\ufde8\100\ufde8\101\ufde8\102\ufde8" +
    "\103\ufde8\104\ufde8\105\ufde8\106\ufde8\111\ufde8\112\ufde8\113" +
    "\ufde8\115\ufde8\116\ufde8\117\ufde8\120\ufde8\121\ufde8\123\ufde8" +
    "\134\ufde8\140\ufde8\143\ufde8\145\ufde8\146\ufde8\147\ufde8\150" +
    "\ufde8\151\ufde8\152\ufde8\153\ufde8\154\ufde8\155\ufde8\156\ufde8" +
    "\157\ufde8\160\ufde8\161\ufde8\162\ufde8\163\ufde8\164\ufde8\165" +
    "\ufde8\166\ufde8\167\ufde8\170\ufde8\177\ufde8\201\ufde8\202\ufde8" +
    "\203\ufde8\204\ufde8\207\ufde8\212\ufde8\213\ufde8\214\ufde8\215" +
    "\ufde8\246\ufde8\001\002\000\300\002\ufdeb\003\ufdeb\004\ufdeb" +
    "\005\ufdeb\007\ufdeb\011\ufdeb\012\ufdeb\013\ufdeb\014\ufdeb\015" +
    "\ufdeb\016\ufdeb\020\ufdeb\021\ufdeb\022\ufdeb\023\ufdeb\024\ufdeb" +
    "\025\ufdeb\027\ufdeb\031\ufdeb\032\ufdeb\033\ufdeb\034\ufdeb\035" +
    "\ufdeb\037\ufdeb\044\ufdeb\045\ufdeb\046\ufdeb\050\ufdeb\051\ufdeb" +
    "\052\ufdeb\053\ufdeb\054\ufdeb\055\ufdeb\056\ufdeb\061\ufdeb\064" +
    "\ufdeb\066\ufdeb\067\ufdeb\070\ufdeb\072\ufdeb\073\ufdeb\074\ufdeb" +
    "\075\ufdeb\076\ufdeb\077\ufdeb\100\ufdeb\101\ufdeb\102\ufdeb\103" +
    "\ufdeb\104\ufdeb\105\ufdeb\106\ufdeb\111\ufdeb\112\ufdeb\113\ufdeb" +
    "\115\ufdeb\116\ufdeb\117\ufdeb\120\ufdeb\121\ufdeb\123\ufdeb\134" +
    "\ufdeb\140\ufdeb\143\ufdeb\145\ufdeb\146\ufdeb\147\ufdeb\150\ufdeb" +
    "\151\ufdeb\152\ufdeb\153\ufdeb\154\ufdeb\155\ufdeb\156\ufdeb\157" +
    "\ufdeb\160\ufdeb\161\ufdeb\162\ufdeb\163\ufdeb\164\ufdeb\165\ufdeb" +
    "\166\ufdeb\167\ufdeb\170\ufdeb\177\ufdeb\201\ufdeb\202\ufdeb\203" +
    "\ufdeb\204\ufdeb\207\ufdeb\212\ufdeb\213\ufdeb\214\ufdeb\215\ufdeb" +
    "\246\ufdeb\001\002\000\300\002\ufdea\003\ufdea\004\ufdea\005" +
    "\ufdea\007\ufdea\011\ufdea\012\ufdea\013\ufdea\014\ufdea\015\ufdea" +
    "\016\ufdea\020\ufdea\021\ufdea\022\ufdea\023\ufdea\024\ufdea\025" +
    "\ufdea\027\ufdea\031\ufdea\032\ufdea\033\ufdea\034\ufdea\035\ufdea" +
    "\037\ufdea\044\ufdea\045\ufdea\046\ufdea\050\ufdea\051\ufdea\052" +
    "\ufdea\053\ufdea\054\ufdea\055\ufdea\056\ufdea\061\ufdea\064\ufdea" +
    "\066\ufdea\067\ufdea\070\ufdea\072\ufdea\073\ufdea\074\ufdea\075" +
    "\ufdea\076\ufdea\077\ufdea\100\ufdea\101\ufdea\102\ufdea\103\ufdea" +
    "\104\ufdea\105\ufdea\106\ufdea\111\ufdea\112\ufdea\113\ufdea\115" +
    "\ufdea\116\ufdea\117\ufdea\120\ufdea\121\ufdea\123\ufdea\134\ufdea" +
    "\140\ufdea\143\ufdea\145\ufdea\146\ufdea\147\ufdea\150\ufdea\151" +
    "\ufdea\152\ufdea\153\ufdea\154\ufdea\155\ufdea\156\ufdea\157\ufdea" +
    "\160\ufdea\161\ufdea\162\ufdea\163\ufdea\164\ufdea\165\ufdea\166" +
    "\ufdea\167\ufdea\170\ufdea\177\ufdea\201\ufdea\202\ufdea\203\ufdea" +
    "\204\ufdea\207\ufdea\212\ufdea\213\ufdea\214\ufdea\215\ufdea\246" +
    "\ufdea\001\002\000\046\002\ufde1\003\ufde1\004\ufde1\021\ufde1" +
    "\022\ufde1\024\ufde1\046\ufde1\050\ufde1\061\ufde1\140\ufde1\145" +
    "\ufde1\203\ufde1\204\ufde1\207\ufde1\212\ufde1\213\ufde1\214\ufde1" +
    "\215\ufde1\001\002\000\040\002\ufe36\003\ufe36\004\ufe36\024" +
    "\ufe36\050\ufe36\061\ufe36\140\ufe36\145\ufe36\203\ufe36\204\ufe36" +
    "\207\ufe36\212\ufe36\213\ufe36\214\ufe36\215\ufe36\001\002\000" +
    "\046\002\ufde0\003\ufde0\004\ufde0\021\ufde0\022\ufde0\024\ufde0" +
    "\046\ufde0\050\ufde0\061\ufde0\140\ufde0\145\ufde0\203\ufde0\204" +
    "\ufde0\207\ufde0\212\ufde0\213\ufde0\214\ufde0\215\ufde0\001\002" +
    "\000\046\002\ufddf\003\ufddf\004\ufddf\021\ufddf\022\ufddf\024" +
    "\ufddf\046\ufddf\050\ufddf\061\ufddf\140\ufddf\145\ufddf\203\ufddf" +
    "\204\ufddf\207\ufddf\212\ufddf\213\ufddf\214\ufddf\215\ufddf\001" +
    "\002\000\046\002\ufdde\003\ufdde\004\ufdde\021\ufdde\022\ufdde" +
    "\024\ufdde\046\ufdde\050\ufdde\061\ufdde\140\ufdde\145\ufdde\203" +
    "\ufdde\204\ufdde\207\ufdde\212\ufdde\213\ufdde\214\ufdde\215\ufdde" +
    "\001\002\000\300\002\ufde9\003\ufde9\004\ufde9\005\ufde9\007" +
    "\ufde9\011\ufde9\012\ufde9\013\ufde9\014\ufde9\015\ufde9\016\ufde9" +
    "\020\ufde9\021\ufde9\022\ufde9\023\ufde9\024\ufde9\025\ufde9\027" +
    "\ufde9\031\ufde9\032\ufde9\033\ufde9\034\ufde9\035\ufde9\037\ufde9" +
    "\044\ufde9\045\ufde9\046\ufde9\050\ufde9\051\ufde9\052\ufde9\053" +
    "\ufde9\054\ufde9\055\ufde9\056\ufde9\061\ufde9\064\ufde9\066\ufde9" +
    "\067\ufde9\070\ufde9\072\ufde9\073\ufde9\074\ufde9\075\ufde9\076" +
    "\ufde9\077\ufde9\100\ufde9\101\ufde9\102\ufde9\103\ufde9\104\ufde9" +
    "\105\ufde9\106\ufde9\111\ufde9\112\ufde9\113\ufde9\115\ufde9\116" +
    "\ufde9\117\ufde9\120\ufde9\121\ufde9\123\ufde9\134\ufde9\140\ufde9" +
    "\143\ufde9\145\ufde9\146\ufde9\147\ufde9\150\ufde9\151\ufde9\152" +
    "\ufde9\153\ufde9\154\ufde9\155\ufde9\156\ufde9\157\ufde9\160\ufde9" +
    "\161\ufde9\162\ufde9\163\ufde9\164\ufde9\165\ufde9\166\ufde9\167" +
    "\ufde9\170\ufde9\177\ufde9\201\ufde9\202\ufde9\203\ufde9\204\ufde9" +
    "\207\ufde9\212\ufde9\213\ufde9\214\ufde9\215\ufde9\246\ufde9\001" +
    "\002\000\004\012\103\001\002\000\300\002\ufde7\003\ufde7" +
    "\004\ufde7\005\ufde7\007\ufde7\011\ufde7\012\ufde7\013\ufde7\014" +
    "\ufde7\015\ufde7\016\ufde7\020\ufde7\021\ufde7\022\ufde7\023\ufde7" +
    "\024\ufde7\025\ufde7\027\ufde7\031\ufde7\032\ufde7\033\ufde7\034" +
    "\ufde7\035\ufde7\037\ufde7\044\ufde7\045\ufde7\046\ufde7\050\ufde7" +
    "\051\ufde7\052\ufde7\053\ufde7\054\ufde7\055\ufde7\056\ufde7\061" +
    "\ufde7\064\ufde7\066\ufde7\067\ufde7\070\ufde7\072\ufde7\073\ufde7" +
    "\074\ufde7\075\ufde7\076\ufde7\077\ufde7\100\ufde7\101\ufde7\102" +
    "\ufde7\103\ufde7\104\ufde7\105\ufde7\106\ufde7\111\ufde7\112\ufde7" +
    "\113\ufde7\115\ufde7\116\ufde7\117\ufde7\120\ufde7\121\ufde7\123" +
    "\ufde7\134\ufde7\140\ufde7\143\ufde7\145\ufde7\146\ufde7\147\ufde7" +
    "\150\ufde7\151\ufde7\152\ufde7\153\ufde7\154\ufde7\155\ufde7\156" +
    "\ufde7\157\ufde7\160\ufde7\161\ufde7\162\ufde7\163\ufde7\164\ufde7" +
    "\165\ufde7\166\ufde7\167\ufde7\170\ufde7\177\ufde7\201\ufde7\202" +
    "\ufde7\203\ufde7\204\ufde7\207\ufde7\212\ufde7\213\ufde7\214\ufde7" +
    "\215\ufde7\246\ufde7\001\002\000\006\021\074\022\076\001" +
    "\002\000\040\002\ufe37\003\ufe37\004\ufe37\024\ufe37\050\ufe37" +
    "\061\ufe37\140\ufe37\145\ufe37\203\ufe37\204\ufe37\207\ufe37\212" +
    "\ufe37\213\ufe37\214\ufe37\215\ufe37\001\002\000\040\002\ufe35" +
    "\003\ufe35\004\ufe35\024\ufe35\050\ufe35\061\ufe35\140\ufe35\145" +
    "\ufe35\203\ufe35\204\ufe35\207\ufe35\212\ufe35\213\ufe35\214\ufe35" +
    "\215\ufe35\001\002\000\004\002\uffed\001\002\000\006\021" +
    "\074\022\076\001\002\000\014\011\056\013\063\036\062" +
    "\205\061\206\057\001\002\000\020\011\056\013\063\021" +
    "\074\022\076\036\062\205\061\206\057\001\002\000\006" +
    "\021\074\022\076\001\002\000\040\002\ufe3c\003\ufe3c\004" +
    "\ufe3c\024\ufe3c\050\ufe3c\061\ufe3c\140\ufe3c\145\ufe3c\203\ufe3c" +
    "\204\ufe3c\207\ufe3c\212\ufe3c\213\ufe3c\214\ufe3c\215\ufe3c\001" +
    "\002\000\040\002\ufe3b\003\ufe3b\004\ufe3b\024\ufe3b\050\ufe3b" +
    "\061\ufe3b\140\ufe3b\145\ufe3b\203\ufe3b\204\ufe3b\207\ufe3b\212" +
    "\ufe3b\213\ufe3b\214\ufe3b\215\ufe3b\001\002\000\006\021\074" +
    "\022\076\001\002\000\040\002\ufe3d\003\ufe3d\004\ufe3d\024" +
    "\ufe3d\050\ufe3d\061\ufe3d\140\ufe3d\145\ufe3d\203\ufe3d\204\ufe3d" +
    "\207\ufe3d\212\ufe3d\213\ufe3d\214\ufe3d\215\ufe3d\001\002\000" +
    "\006\021\074\022\076\001\002\000\040\002\ufe3e\003\ufe3e" +
    "\004\ufe3e\024\ufe3e\050\ufe3e\061\ufe3e\140\ufe3e\145\ufe3e\203" +
    "\ufe3e\204\ufe3e\207\ufe3e\212\ufe3e\213\ufe3e\214\ufe3e\215\ufe3e" +
    "\001\002\000\040\002\ufe3a\003\ufe3a\004\ufe3a\024\ufe3a\050" +
    "\ufe3a\061\ufe3a\140\ufe3a\145\ufe3a\203\ufe3a\204\ufe3a\207\ufe3a" +
    "\212\ufe3a\213\ufe3a\214\ufe3a\215\ufe3a\001\002\000\004\002" +
    "\uffec\001\002\000\004\002\ufff6\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\uffef\001\002\000\020\003\213\011" +
    "\056\013\214\036\062\173\212\205\061\206\057\001\002" +
    "\000\020\003\200\011\056\013\063\036\062\173\177\205" +
    "\061\206\057\001\002\000\020\003\166\011\056\013\063" +
    "\036\062\173\165\205\061\206\057\001\002\000\020\003" +
    "\147\011\056\013\063\036\062\173\146\205\061\206\057" +
    "\001\002\000\010\003\134\013\136\173\135\001\002\000" +
    "\006\021\074\022\076\001\002\000\004\175\140\001\002" +
    "\000\006\021\074\022\076\001\002\000\040\002\ufe98\003" +
    "\ufe98\004\ufe98\024\ufe98\050\ufe98\061\ufe98\140\ufe98\145\ufe98" +
    "\203\ufe98\204\ufe98\207\ufe98\212\ufe98\213\ufe98\214\ufe98\215" +
    "\ufe98\001\002\000\004\176\141\001\002\000\004\174\142" +
    "\001\002\000\004\013\143\001\002\000\006\021\074\022" +
    "\076\001\002\000\040\002\ufe97\003\ufe97\004\ufe97\024\ufe97" +
    "\050\ufe97\061\ufe97\140\ufe97\145\ufe97\203\ufe97\204\ufe97\207" +
    "\ufe97\212\ufe97\213\ufe97\214\ufe97\215\ufe97\001\002\000\040" +
    "\002\ufe96\003\ufe96\004\ufe96\024\ufe96\050\ufe96\061\ufe96\140" +
    "\ufe96\145\ufe96\203\ufe96\204\ufe96\207\ufe96\212\ufe96\213\ufe96" +
    "\214\ufe96\215\ufe96\001\002\000\004\175\160\001\002\000" +
    "\006\021\074\022\076\001\002\000\006\021\074\022\076" +
    "\001\002\000\012\005\ufdef\020\152\021\ufdef\022\ufdef\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\012\005\ufdf0\020\154\021\ufdf0\022\ufdf0\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\010\005\ufdf1\021\ufdf1\022\ufdf1\001\002\000" +
    "\040\002\ufe9b\003\ufe9b\004\ufe9b\024\ufe9b\050\ufe9b\061\ufe9b" +
    "\140\ufe9b\145\ufe9b\203\ufe9b\204\ufe9b\207\ufe9b\212\ufe9b\213" +
    "\ufe9b\214\ufe9b\215\ufe9b\001\002\000\040\002\ufe99\003\ufe99" +
    "\004\ufe99\024\ufe99\050\ufe99\061\ufe99\140\ufe99\145\ufe99\203" +
    "\ufe99\204\ufe99\207\ufe99\212\ufe99\213\ufe99\214\ufe99\215\ufe99" +
    "\001\002\000\004\176\161\001\002\000\004\174\162\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\006\021\074\022\076\001\002\000\040\002" +
    "\ufe9a\003\ufe9a\004\ufe9a\024\ufe9a\050\ufe9a\061\ufe9a\140\ufe9a" +
    "\145\ufe9a\203\ufe9a\204\ufe9a\207\ufe9a\212\ufe9a\213\ufe9a\214" +
    "\ufe9a\215\ufe9a\001\002\000\004\175\172\001\002\000\006" +
    "\021\074\022\076\001\002\000\006\021\074\022\076\001" +
    "\002\000\040\002\ufe8e\003\ufe8e\004\ufe8e\024\ufe8e\050\ufe8e" +
    "\061\ufe8e\140\ufe8e\145\ufe8e\203\ufe8e\204\ufe8e\207\ufe8e\212" +
    "\ufe8e\213\ufe8e\214\ufe8e\215\ufe8e\001\002\000\040\002\ufe8c" +
    "\003\ufe8c\004\ufe8c\024\ufe8c\050\ufe8c\061\ufe8c\140\ufe8c\145" +
    "\ufe8c\203\ufe8c\204\ufe8c\207\ufe8c\212\ufe8c\213\ufe8c\214\ufe8c" +
    "\215\ufe8c\001\002\000\004\176\173\001\002\000\004\174" +
    "\174\001\002\000\014\011\056\013\063\036\062\205\061" +
    "\206\057\001\002\000\006\021\074\022\076\001\002\000" +
    "\040\002\ufe8d\003\ufe8d\004\ufe8d\024\ufe8d\050\ufe8d\061\ufe8d" +
    "\140\ufe8d\145\ufe8d\203\ufe8d\204\ufe8d\207\ufe8d\212\ufe8d\213" +
    "\ufe8d\214\ufe8d\215\ufe8d\001\002\000\004\175\204\001\002" +
    "\000\006\021\074\022\076\001\002\000\006\021\074\022" +
    "\076\001\002\000\040\002\ufe9e\003\ufe9e\004\ufe9e\024\ufe9e" +
    "\050\ufe9e\061\ufe9e\140\ufe9e\145\ufe9e\203\ufe9e\204\ufe9e\207" +
    "\ufe9e\212\ufe9e\213\ufe9e\214\ufe9e\215\ufe9e\001\002\000\040" +
    "\002\ufe9c\003\ufe9c\004\ufe9c\024\ufe9c\050\ufe9c\061\ufe9c\140" +
    "\ufe9c\145\ufe9c\203\ufe9c\204\ufe9c\207\ufe9c\212\ufe9c\213\ufe9c" +
    "\214\ufe9c\215\ufe9c\001\002\000\004\176\205\001\002\000" +
    "\004\174\206\001\002\000\014\011\056\013\063\036\062" +
    "\205\061\206\057\001\002\000\006\021\074\022\076\001" +
    "\002\000\040\002\ufe9d\003\ufe9d\004\ufe9d\024\ufe9d\050\ufe9d" +
    "\061\ufe9d\140\ufe9d\145\ufe9d\203\ufe9d\204\ufe9d\207\ufe9d\212" +
    "\ufe9d\213\ufe9d\214\ufe9d\215\ufe9d\001\002\000\006\021\074" +
    "\022\076\001\002\000\004\175\226\001\002\000\006\021" +
    "\074\022\076\001\002\000\014\017\065\020\064\021\ufdee" +
    "\022\ufdee\035\217\001\002\000\006\021\074\022\076\001" +
    "\002\000\040\002\ufe93\003\ufe93\004\ufe93\024\ufe93\050\ufe93" +
    "\061\ufe93\140\ufe93\145\ufe93\203\ufe93\204\ufe93\207\ufe93\212" +
    "\ufe93\213\ufe93\214\ufe93\215\ufe93\001\002\000\014\011\056" +
    "\013\063\036\062\205\061\206\057\001\002\000\010\020" +
    "\221\021\ufe8f\022\ufe8f\001\002\000\004\013\222\001\002" +
    "\000\004\035\223\001\002\000\014\011\056\013\063\036" +
    "\062\205\061\206\057\001\002\000\006\021\ufe90\022\ufe90" +
    "\001\002\000\040\002\ufe91\003\ufe91\004\ufe91\024\ufe91\050" +
    "\ufe91\061\ufe91\140\ufe91\145\ufe91\203\ufe91\204\ufe91\207\ufe91" +
    "\212\ufe91\213\ufe91\214\ufe91\215\ufe91\001\002\000\004\176" +
    "\227\001\002\000\004\174\230\001\002\000\014\011\056" +
    "\013\214\036\062\205\061\206\057\001\002\000\006\021" +
    "\074\022\076\001\002\000\006\021\074\022\076\001\002" +
    "\000\040\002\ufe94\003\ufe94\004\ufe94\024\ufe94\050\ufe94\061" +
    "\ufe94\140\ufe94\145\ufe94\203\ufe94\204\ufe94\207\ufe94\212\ufe94" +
    "\213\ufe94\214\ufe94\215\ufe94\001\002\000\040\002\ufe92\003" +
    "\ufe92\004\ufe92\024\ufe92\050\ufe92\061\ufe92\140\ufe92\145\ufe92" +
    "\203\ufe92\204\ufe92\207\ufe92\212\ufe92\213\ufe92\214\ufe92\215" +
    "\ufe92\001\002\000\040\002\ufe95\003\ufe95\004\ufe95\024\ufe95" +
    "\050\ufe95\061\ufe95\140\ufe95\145\ufe95\203\ufe95\204\ufe95\207" +
    "\ufe95\212\ufe95\213\ufe95\214\ufe95\215\ufe95\001\002\000\040" +
    "\002\uff51\003\uff51\004\uff51\024\uff51\050\uff51\061\uff51\140" +
    "\uff51\145\uff51\203\uff51\204\uff51\207\uff51\212\uff51\213\uff51" +
    "\214\uff51\215\uff51\001\002\000\040\002\uff57\003\uff57\004" +
    "\uff57\024\uff57\050\uff57\061\uff57\140\uff57\145\uff57\203\uff57" +
    "\204\uff57\207\uff57\212\uff57\213\uff57\214\uff57\215\uff57\001" +
    "\002\000\040\002\uff53\003\uff53\004\uff53\024\uff53\050\uff53" +
    "\061\uff53\140\uff53\145\uff53\203\uff53\204\uff53\207\uff53\212" +
    "\uff53\213\uff53\214\uff53\215\uff53\001\002\000\040\002\uff52" +
    "\003\uff52\004\uff52\024\uff52\050\uff52\061\uff52\140\uff52\145" +
    "\uff52\203\uff52\204\uff52\207\uff52\212\uff52\213\uff52\214\uff52" +
    "\215\uff52\001\002\000\004\013\u0213\001\002\000\004\013" +
    "\u0212\001\002\000\010\115\uff2e\116\uff2e\124\uff2e\001\002" +
    "\000\010\115\uff2d\116\uff2d\124\uff2d\001\002\000\040\002" +
    "\uff56\003\uff56\004\uff56\024\uff56\050\uff56\061\uff56\140\uff56" +
    "\145\uff56\203\uff56\204\uff56\207\uff56\212\uff56\213\uff56\214" +
    "\uff56\215\uff56\001\002\000\040\002\uff59\003\uff59\004\uff59" +
    "\024\uff59\050\uff59\061\uff59\140\uff59\145\uff59\203\uff59\204" +
    "\uff59\207\uff59\212\uff59\213\uff59\214\uff59\215\uff59\001\002" +
    "\000\014\011\056\013\063\036\062\205\061\206\057\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\006\021\074\022\076\001\002\000\040\002" +
    "\uff55\003\uff55\004\uff55\024\uff55\050\uff55\061\uff55\140\uff55" +
    "\145\uff55\203\uff55\204\uff55\207\uff55\212\uff55\213\uff55\214" +
    "\uff55\215\uff55\001\002\000\040\002\uff54\003\uff54\004\uff54" +
    "\024\uff54\050\uff54\061\uff54\140\uff54\145\uff54\203\uff54\204" +
    "\uff54\207\uff54\212\uff54\213\uff54\214\uff54\215\uff54\001\002" +
    "\000\010\115\257\116\260\124\ufde2\001\002\000\026\011" +
    "\ufee0\012\ufee0\020\ufee0\111\ufee0\113\ufee0\117\ufee0\120\ufee0" +
    "\121\ufee0\123\ufee0\124\ufee0\001\002\000\026\011\ufee2\012" +
    "\ufee2\020\ufee2\111\ufee2\113\ufee2\117\ufee2\120\ufee2\121\ufee2" +
    "\123\ufee2\124\ufee2\001\002\000\026\011\ufee1\012\ufee1\020" +
    "\ufee1\111\ufee1\113\ufee1\117\ufee1\120\ufee1\121\ufee1\123\ufee1" +
    "\124\ufee1\001\002\000\004\124\262\001\002\000\004\013" +
    "\263\001\002\000\004\035\264\001\002\000\014\011\056" +
    "\013\063\036\062\205\061\206\057\001\002\000\004\011" +
    "\266\001\002\000\004\013\372\001\002\000\046\002\ufde2" +
    "\003\ufde2\004\ufde2\024\ufde2\035\ufde2\050\ufde2\061\ufde2\106" +
    "\ufde2\136\271\140\ufde2\145\ufde2\203\ufde2\204\ufde2\207\ufde2" +
    "\212\ufde2\213\ufde2\214\ufde2\215\ufde2\001\002\000\044\002" +
    "\uff27\003\uff27\004\uff27\024\uff27\035\uff27\050\uff27\061\uff27" +
    "\106\uff27\140\uff27\145\uff27\203\uff27\204\uff27\207\uff27\212" +
    "\uff27\213\uff27\214\uff27\215\uff27\001\002\000\004\011\366" +
    "\001\002\000\044\002\ufde2\003\ufde2\004\ufde2\024\ufde2\035" +
    "\ufde2\050\ufde2\061\ufde2\106\274\140\ufde2\145\ufde2\203\ufde2" +
    "\204\ufde2\207\ufde2\212\ufde2\213\ufde2\214\ufde2\215\ufde2\001" +
    "\002\000\052\002\ufe6a\003\ufe6a\004\ufe6a\021\ufe6a\022\ufe6a" +
    "\024\ufe6a\035\ufe6a\050\ufe6a\061\ufe6a\064\ufe6a\066\ufe6a\140" +
    "\ufe6a\145\ufe6a\203\ufe6a\204\ufe6a\207\ufe6a\212\ufe6a\213\ufe6a" +
    "\214\ufe6a\215\ufe6a\001\002\000\102\002\ufde2\003\ufde2\004" +
    "\ufde2\011\321\013\063\021\ufde2\022\ufde2\024\ufde2\035\ufde2" +
    "\036\062\050\ufde2\057\323\060\312\061\ufde2\064\ufde2\066" +
    "\ufde2\070\306\071\317\101\313\105\310\140\ufde2\145\ufde2" +
    "\203\ufde2\204\ufde2\205\061\206\057\207\ufde2\212\ufde2\213" +
    "\ufde2\214\ufde2\215\ufde2\247\314\001\002\000\042\002\ufde2" +
    "\003\ufde2\004\ufde2\024\ufde2\035\277\050\ufde2\061\ufde2\140" +
    "\ufde2\145\ufde2\203\ufde2\204\ufde2\207\ufde2\212\ufde2\213\ufde2" +
    "\214\ufde2\215\ufde2\001\002\000\040\002\uff25\003\uff25\004" +
    "\uff25\024\uff25\050\uff25\061\uff25\140\uff25\145\uff25\203\uff25" +
    "\204\uff25\207\uff25\212\uff25\213\uff25\214\uff25\215\uff25\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\040\002\uff2f\003\uff2f\004\uff2f\024\uff2f\050" +
    "\uff2f\061\uff2f\140\uff2f\145\uff2f\203\uff2f\204\uff2f\207\uff2f" +
    "\212\uff2f\213\uff2f\214\uff2f\215\uff2f\001\002\000\004\011" +
    "\302\001\002\000\014\011\056\013\063\036\062\205\061" +
    "\206\057\001\002\000\004\012\304\001\002\000\040\002" +
    "\uff26\003\uff26\004\uff26\024\uff26\050\uff26\061\uff26\140\uff26" +
    "\145\uff26\203\uff26\204\uff26\207\uff26\212\uff26\213\uff26\214" +
    "\uff26\215\uff26\001\002\000\064\002\ufe60\003\ufe60\004\ufe60" +
    "\012\ufe60\020\ufe60\021\ufe60\022\ufe60\024\ufe60\035\ufe60\050" +
    "\ufe60\061\ufe60\064\ufe60\066\ufe60\070\306\101\313\105\310" +
    "\140\ufe60\145\ufe60\203\ufe60\204\ufe60\207\ufe60\212\ufe60\213" +
    "\ufe60\214\ufe60\215\ufe60\001\002\000\026\011\ufe48\013\ufe48" +
    "\036\ufe48\057\ufe48\060\ufe48\071\ufe48\101\363\205\ufe48\206" +
    "\ufe48\247\ufe48\001\002\000\060\002\ufe63\003\ufe63\004\ufe63" +
    "\020\361\021\ufe63\022\ufe63\024\ufe63\035\ufe63\050\ufe63\061" +
    "\ufe63\064\ufe63\066\ufe63\070\ufe63\105\ufe63\140\ufe63\145\ufe63" +
    "\203\ufe63\204\ufe63\207\ufe63\212\ufe63\213\ufe63\214\ufe63\215" +
    "\ufe63\001\002\000\026\011\ufe47\013\ufe47\036\ufe47\057\ufe47" +
    "\060\ufe47\071\ufe47\101\360\205\ufe47\206\ufe47\247\ufe47\001" +
    "\002\000\024\011\056\013\063\036\062\057\323\060\312" +
    "\071\317\205\061\206\057\247\314\001\002\000\110\002" +
    "\ufe5a\003\ufe5a\004\ufe5a\012\ufe5a\016\ufe5a\020\ufe5a\021\ufe5a" +
    "\022\ufe5a\024\ufe5a\035\ufe5a\037\ufe5a\050\ufe5a\061\ufe5a\064" +
    "\ufe5a\066\ufe5a\070\ufe5a\072\ufe5a\073\ufe5a\074\ufe5a\075\ufe5a" +
    "\076\ufe5a\101\ufe5a\102\ufe5a\103\ufe5a\104\ufe5a\105\ufe5a\140" +
    "\ufe5a\145\ufe5a\203\ufe5a\204\ufe5a\207\ufe5a\212\ufe5a\213\ufe5a" +
    "\214\ufe5a\215\ufe5a\001\002\000\024\011\ufe46\013\ufe46\036" +
    "\ufe46\057\ufe46\060\ufe46\071\ufe46\205\ufe46\206\ufe46\247\ufe46" +
    "\001\002\000\110\002\ufe5b\003\ufe5b\004\ufe5b\012\ufe5b\016" +
    "\ufe5b\020\ufe5b\021\ufe5b\022\ufe5b\024\ufe5b\035\ufe5b\037\ufe5b" +
    "\050\ufe5b\061\ufe5b\064\ufe5b\066\ufe5b\070\ufe5b\072\ufe5b\073" +
    "\ufe5b\074\ufe5b\075\ufe5b\076\ufe5b\101\ufe5b\102\ufe5b\103\ufe5b" +
    "\104\ufe5b\105\ufe5b\140\ufe5b\145\ufe5b\203\ufe5b\204\ufe5b\207" +
    "\ufe5b\212\ufe5b\213\ufe5b\214\ufe5b\215\ufe5b\001\002\000\056" +
    "\002\ufe69\003\ufe69\004\ufe69\021\ufe69\022\ufe69\024\ufe69\035" +
    "\ufe69\050\ufe69\061\ufe69\064\ufe69\066\ufe69\070\353\105\354" +
    "\140\ufe69\145\ufe69\203\ufe69\204\ufe69\207\ufe69\212\ufe69\213" +
    "\ufe69\214\ufe69\215\ufe69\001\002\000\052\002\ufe6b\003\ufe6b" +
    "\004\ufe6b\021\ufe6b\022\ufe6b\024\ufe6b\035\ufe6b\050\ufe6b\061" +
    "\ufe6b\064\ufe6b\066\ufe6b\140\ufe6b\145\ufe6b\203\ufe6b\204\ufe6b" +
    "\207\ufe6b\212\ufe6b\213\ufe6b\214\ufe6b\215\ufe6b\001\002\000" +
    "\004\057\352\001\002\000\052\002\ufe66\003\ufe66\004\ufe66" +
    "\021\ufe66\022\ufe66\024\ufe66\035\ufe66\050\ufe66\061\ufe66\064" +
    "\ufe66\066\ufe66\140\ufe66\145\ufe66\203\ufe66\204\ufe66\207\ufe66" +
    "\212\ufe66\213\ufe66\214\ufe66\215\ufe66\001\002\000\032\011" +
    "\056\013\063\036\062\057\323\060\312\070\306\071\317" +
    "\101\313\105\310\205\061\206\057\247\314\001\002\000" +
    "\030\016\326\037\333\072\334\073\336\074\330\075\332" +
    "\076\325\101\335\102\337\103\331\104\340\001\002\000" +
    "\110\002\ufe59\003\ufe59\004\ufe59\012\ufe59\016\ufe59\020\ufe59" +
    "\021\ufe59\022\ufe59\024\ufe59\035\ufe59\037\ufe59\050\ufe59\061" +
    "\ufe59\064\ufe59\066\ufe59\070\ufe59\072\ufe59\073\ufe59\074\ufe59" +
    "\075\ufe59\076\ufe59\101\ufe59\102\ufe59\103\ufe59\104\ufe59\105" +
    "\ufe59\140\ufe59\145\ufe59\203\ufe59\204\ufe59\207\ufe59\212\ufe59" +
    "\213\ufe59\214\ufe59\215\ufe59\001\002\000\110\002\ufe5c\003" +
    "\ufe5c\004\ufe5c\012\ufe5c\016\ufe5c\020\ufe5c\021\ufe5c\022\ufe5c" +
    "\024\ufe5c\035\ufe5c\037\ufe5c\050\ufe5c\061\ufe5c\064\ufe5c\066" +
    "\ufe5c\070\ufe5c\072\ufe5c\073\ufe5c\074\ufe5c\075\ufe5c\076\ufe5c" +
    "\101\ufe5c\102\ufe5c\103\ufe5c\104\ufe5c\105\ufe5c\140\ufe5c\145" +
    "\ufe5c\203\ufe5c\204\ufe5c\207\ufe5c\212\ufe5c\213\ufe5c\214\ufe5c" +
    "\215\ufe5c\001\002\000\104\002\ufe55\003\ufe55\004\ufe55\011" +
    "\ufe55\012\ufe55\013\ufe55\020\ufe55\021\ufe55\022\ufe55\024\ufe55" +
    "\035\ufe55\036\ufe55\050\ufe55\057\ufe55\060\ufe55\061\ufe55\064" +
    "\ufe55\066\ufe55\070\ufe55\101\ufe55\105\ufe55\140\ufe55\145\ufe55" +
    "\203\ufe55\204\ufe55\205\ufe55\206\ufe55\207\ufe55\212\ufe55\213" +
    "\ufe55\214\ufe55\215\ufe55\247\ufe55\001\002\000\104\002\ufe4d" +
    "\003\ufe4d\004\ufe4d\011\ufe4d\012\ufe4d\013\ufe4d\020\ufe4d\021" +
    "\ufe4d\022\ufe4d\024\ufe4d\035\ufe4d\036\ufe4d\050\ufe4d\057\ufe4d" +
    "\060\ufe4d\061\ufe4d\064\ufe4d\066\ufe4d\070\ufe4d\101\ufe4d\105" +
    "\ufe4d\140\ufe4d\145\ufe4d\203\ufe4d\204\ufe4d\205\ufe4d\206\ufe4d" +
    "\207\ufe4d\212\ufe4d\213\ufe4d\214\ufe4d\215\ufe4d\247\ufe4d\001" +
    "\002\000\104\002\ufe5d\003\ufe5d\004\ufe5d\011\056\012\ufe5d" +
    "\013\063\020\ufe5d\021\ufe5d\022\ufe5d\024\ufe5d\035\ufe5d\036" +
    "\062\050\ufe5d\057\323\060\312\061\ufe5d\064\ufe5d\066\ufe5d" +
    "\070\ufe5d\101\ufe5d\105\ufe5d\140\ufe5d\145\ufe5d\203\ufe5d\204" +
    "\ufe5d\205\061\206\057\207\ufe5d\212\ufe5d\213\ufe5d\214\ufe5d" +
    "\215\ufe5d\247\314\001\002\000\104\002\ufe52\003\ufe52\004" +
    "\ufe52\011\ufe52\012\ufe52\013\ufe52\020\ufe52\021\ufe52\022\ufe52" +
    "\024\ufe52\035\ufe52\036\ufe52\050\ufe52\057\ufe52\060\ufe52\061" +
    "\ufe52\064\ufe52\066\ufe52\070\ufe52\101\ufe52\105\ufe52\140\ufe52" +
    "\145\ufe52\203\ufe52\204\ufe52\205\ufe52\206\ufe52\207\ufe52\212" +
    "\ufe52\213\ufe52\214\ufe52\215\ufe52\247\ufe52\001\002\000\104" +
    "\002\ufe4f\003\ufe4f\004\ufe4f\011\ufe4f\012\ufe4f\013\ufe4f\020" +
    "\ufe4f\021\ufe4f\022\ufe4f\024\ufe4f\035\ufe4f\036\ufe4f\050\ufe4f" +
    "\057\ufe4f\060\ufe4f\061\ufe4f\064\ufe4f\066\ufe4f\070\ufe4f\101" +
    "\ufe4f\105\ufe4f\140\ufe4f\145\ufe4f\203\ufe4f\204\ufe4f\205\ufe4f" +
    "\206\ufe4f\207\ufe4f\212\ufe4f\213\ufe4f\214\ufe4f\215\ufe4f\247" +
    "\ufe4f\001\002\000\104\002\ufe56\003\ufe56\004\ufe56\011\ufe56" +
    "\012\ufe56\013\ufe56\020\ufe56\021\ufe56\022\ufe56\024\ufe56\035" +
    "\ufe56\036\ufe56\050\ufe56\057\ufe56\060\ufe56\061\ufe56\064\ufe56" +
    "\066\ufe56\070\ufe56\101\ufe56\105\ufe56\140\ufe56\145\ufe56\203" +
    "\ufe56\204\ufe56\205\ufe56\206\ufe56\207\ufe56\212\ufe56\213\ufe56" +
    "\214\ufe56\215\ufe56\247\ufe56\001\002\000\104\002\ufe57\003" +
    "\ufe57\004\ufe57\011\ufe57\012\ufe57\013\ufe57\020\ufe57\021\ufe57" +
    "\022\ufe57\024\ufe57\035\ufe57\036\ufe57\050\ufe57\057\ufe57\060" +
    "\ufe57\061\ufe57\064\ufe57\066\ufe57\070\ufe57\101\ufe57\105\ufe57" +
    "\140\ufe57\145\ufe57\203\ufe57\204\ufe57\205\ufe57\206\ufe57\207" +
    "\ufe57\212\ufe57\213\ufe57\214\ufe57\215\ufe57\247\ufe57\001\002" +
    "\000\104\002\ufe54\003\ufe54\004\ufe54\011\ufe54\012\ufe54\013" +
    "\ufe54\020\ufe54\021\ufe54\022\ufe54\024\ufe54\035\ufe54\036\ufe54" +
    "\050\ufe54\057\ufe54\060\ufe54\061\ufe54\064\ufe54\066\ufe54\070" +
    "\ufe54\101\ufe54\105\ufe54\140\ufe54\145\ufe54\203\ufe54\204\ufe54" +
    "\205\ufe54\206\ufe54\207\ufe54\212\ufe54\213\ufe54\214\ufe54\215" +
    "\ufe54\247\ufe54\001\002\000\110\002\ufe49\003\ufe49\004\ufe49" +
    "\011\ufe49\012\ufe49\013\ufe49\020\ufe49\021\ufe49\022\ufe49\024" +
    "\ufe49\035\ufe49\036\ufe49\050\ufe49\057\ufe49\060\ufe49\061\ufe49" +
    "\064\ufe49\066\ufe49\070\ufe49\101\ufe49\102\344\103\345\105" +
    "\ufe49\140\ufe49\145\ufe49\203\ufe49\204\ufe49\205\ufe49\206\ufe49" +
    "\207\ufe49\212\ufe49\213\ufe49\214\ufe49\215\ufe49\247\ufe49\001" +
    "\002\000\104\002\ufe53\003\ufe53\004\ufe53\011\ufe53\012\ufe53" +
    "\013\ufe53\020\ufe53\021\ufe53\022\ufe53\024\ufe53\035\ufe53\036" +
    "\ufe53\050\ufe53\057\ufe53\060\ufe53\061\ufe53\064\ufe53\066\ufe53" +
    "\070\ufe53\101\ufe53\105\ufe53\140\ufe53\145\ufe53\203\ufe53\204" +
    "\ufe53\205\ufe53\206\ufe53\207\ufe53\212\ufe53\213\ufe53\214\ufe53" +
    "\215\ufe53\247\ufe53\001\002\000\104\002\ufe50\003\ufe50\004" +
    "\ufe50\011\ufe50\012\ufe50\013\ufe50\020\ufe50\021\ufe50\022\ufe50" +
    "\024\ufe50\035\ufe50\036\ufe50\050\ufe50\057\ufe50\060\ufe50\061" +
    "\ufe50\064\ufe50\066\ufe50\070\ufe50\101\ufe50\105\ufe50\140\ufe50" +
    "\145\ufe50\203\ufe50\204\ufe50\205\ufe50\206\ufe50\207\ufe50\212" +
    "\ufe50\213\ufe50\214\ufe50\215\ufe50\247\ufe50\001\002\000\106" +
    "\002\ufe4b\003\ufe4b\004\ufe4b\011\ufe4b\012\ufe4b\013\ufe4b\016" +
    "\342\020\ufe4b\021\ufe4b\022\ufe4b\024\ufe4b\035\ufe4b\036\ufe4b" +
    "\050\ufe4b\057\ufe4b\060\ufe4b\061\ufe4b\064\ufe4b\066\ufe4b\070" +
    "\ufe4b\101\ufe4b\105\ufe4b\140\ufe4b\145\ufe4b\203\ufe4b\204\ufe4b" +
    "\205\ufe4b\206\ufe4b\207\ufe4b\212\ufe4b\213\ufe4b\214\ufe4b\215" +
    "\ufe4b\247\ufe4b\001\002\000\106\002\ufe4a\003\ufe4a\004\ufe4a" +
    "\011\ufe4a\012\ufe4a\013\ufe4a\016\343\020\ufe4a\021\ufe4a\022" +
    "\ufe4a\024\ufe4a\035\ufe4a\036\ufe4a\050\ufe4a\057\ufe4a\060\ufe4a" +
    "\061\ufe4a\064\ufe4a\066\ufe4a\070\ufe4a\101\ufe4a\105\ufe4a\140" +
    "\ufe4a\145\ufe4a\203\ufe4a\204\ufe4a\205\ufe4a\206\ufe4a\207\ufe4a" +
    "\212\ufe4a\213\ufe4a\214\ufe4a\215\ufe4a\247\ufe4a\001\002\000" +
    "\104\002\ufe4c\003\ufe4c\004\ufe4c\011\ufe4c\012\ufe4c\013\ufe4c" +
    "\020\ufe4c\021\ufe4c\022\ufe4c\024\ufe4c\035\ufe4c\036\ufe4c\050" +
    "\ufe4c\057\ufe4c\060\ufe4c\061\ufe4c\064\ufe4c\066\ufe4c\070\ufe4c" +
    "\101\ufe4c\105\ufe4c\140\ufe4c\145\ufe4c\203\ufe4c\204\ufe4c\205" +
    "\ufe4c\206\ufe4c\207\ufe4c\212\ufe4c\213\ufe4c\214\ufe4c\215\ufe4c" +
    "\247\ufe4c\001\002\000\104\002\ufe58\003\ufe58\004\ufe58\011" +
    "\ufe58\012\ufe58\013\ufe58\020\ufe58\021\ufe58\022\ufe58\024\ufe58" +
    "\035\ufe58\036\ufe58\050\ufe58\057\ufe58\060\ufe58\061\ufe58\064" +
    "\ufe58\066\ufe58\070\ufe58\101\ufe58\105\ufe58\140\ufe58\145\ufe58" +
    "\203\ufe58\204\ufe58\205\ufe58\206\ufe58\207\ufe58\212\ufe58\213" +
    "\ufe58\214\ufe58\215\ufe58\247\ufe58\001\002\000\104\002\ufe51" +
    "\003\ufe51\004\ufe51\011\ufe51\012\ufe51\013\ufe51\020\ufe51\021" +
    "\ufe51\022\ufe51\024\ufe51\035\ufe51\036\ufe51\050\ufe51\057\ufe51" +
    "\060\ufe51\061\ufe51\064\ufe51\066\ufe51\070\ufe51\101\ufe51\105" +
    "\ufe51\140\ufe51\145\ufe51\203\ufe51\204\ufe51\205\ufe51\206\ufe51" +
    "\207\ufe51\212\ufe51\213\ufe51\214\ufe51\215\ufe51\247\ufe51\001" +
    "\002\000\104\002\ufe4e\003\ufe4e\004\ufe4e\011\ufe4e\012\ufe4e" +
    "\013\ufe4e\020\ufe4e\021\ufe4e\022\ufe4e\024\ufe4e\035\ufe4e\036" +
    "\ufe4e\050\ufe4e\057\ufe4e\060\ufe4e\061\ufe4e\064\ufe4e\066\ufe4e" +
    "\070\ufe4e\101\ufe4e\105\ufe4e\140\ufe4e\145\ufe4e\203\ufe4e\204" +
    "\ufe4e\205\ufe4e\206\ufe4e\207\ufe4e\212\ufe4e\213\ufe4e\214\ufe4e" +
    "\215\ufe4e\247\ufe4e\001\002\000\064\002\ufe5f\003\ufe5f\004" +
    "\ufe5f\012\ufe5f\020\ufe5f\021\ufe5f\022\ufe5f\024\ufe5f\035\ufe5f" +
    "\050\ufe5f\061\ufe5f\064\ufe5f\066\ufe5f\070\ufe5f\101\ufe5f\105" +
    "\ufe5f\140\ufe5f\145\ufe5f\203\ufe5f\204\ufe5f\207\ufe5f\212\ufe5f" +
    "\213\ufe5f\214\ufe5f\215\ufe5f\001\002\000\004\012\351\001" +
    "\002\000\032\012\103\016\ufe5c\037\ufe5c\072\ufe5c\073\ufe5c" +
    "\074\ufe5c\075\ufe5c\076\ufe5c\101\ufe5c\102\ufe5c\103\ufe5c\104" +
    "\ufe5c\001\002\000\056\002\ufe65\003\ufe65\004\ufe65\021\ufe65" +
    "\022\ufe65\024\ufe65\035\ufe65\050\ufe65\061\ufe65\064\ufe65\066" +
    "\ufe65\070\ufe65\105\ufe65\140\ufe65\145\ufe65\203\ufe65\204\ufe65" +
    "\207\ufe65\212\ufe65\213\ufe65\214\ufe65\215\ufe65\001\002\000" +
    "\064\002\ufe5e\003\ufe5e\004\ufe5e\012\ufe5e\020\ufe5e\021\ufe5e" +
    "\022\ufe5e\024\ufe5e\035\ufe5e\050\ufe5e\061\ufe5e\064\ufe5e\066" +
    "\ufe5e\070\ufe5e\101\ufe5e\105\ufe5e\140\ufe5e\145\ufe5e\203\ufe5e" +
    "\204\ufe5e\207\ufe5e\212\ufe5e\213\ufe5e\214\ufe5e\215\ufe5e\001" +
    "\002\000\032\011\321\013\063\036\062\057\323\060\312" +
    "\070\306\071\317\101\313\105\310\205\061\206\057\247" +
    "\314\001\002\000\032\011\321\013\063\036\062\057\323" +
    "\060\312\070\306\071\317\101\313\105\310\205\061\206" +
    "\057\247\314\001\002\000\052\002\ufe67\003\ufe67\004\ufe67" +
    "\021\ufe67\022\ufe67\024\ufe67\035\ufe67\050\ufe67\061\ufe67\064" +
    "\ufe67\066\ufe67\140\ufe67\145\ufe67\203\ufe67\204\ufe67\207\ufe67" +
    "\212\ufe67\213\ufe67\214\ufe67\215\ufe67\001\002\000\052\002" +
    "\ufe68\003\ufe68\004\ufe68\021\ufe68\022\ufe68\024\ufe68\035\ufe68" +
    "\050\ufe68\061\ufe68\064\ufe68\066\ufe68\140\ufe68\145\ufe68\203" +
    "\ufe68\204\ufe68\207\ufe68\212\ufe68\213\ufe68\214\ufe68\215\ufe68" +
    "\001\002\000\062\002\ufe62\003\ufe62\004\ufe62\012\ufe62\020" +
    "\ufe62\021\ufe62\022\ufe62\024\ufe62\035\ufe62\050\ufe62\061\ufe62" +
    "\064\ufe62\066\ufe62\070\ufe62\105\ufe62\140\ufe62\145\ufe62\203" +
    "\ufe62\204\ufe62\207\ufe62\212\ufe62\213\ufe62\214\ufe62\215\ufe62" +
    "\001\002\000\024\011\ufe44\013\ufe44\036\ufe44\057\ufe44\060" +
    "\ufe44\071\ufe44\205\ufe44\206\ufe44\247\ufe44\001\002\000\032" +
    "\011\056\013\063\036\062\057\323\060\312\070\306\071" +
    "\317\101\313\105\310\205\061\206\057\247\314\001\002" +
    "\000\056\002\ufe64\003\ufe64\004\ufe64\021\ufe64\022\ufe64\024" +
    "\ufe64\035\ufe64\050\ufe64\061\ufe64\064\ufe64\066\ufe64\070\ufe64" +
    "\105\ufe64\140\ufe64\145\ufe64\203\ufe64\204\ufe64\207\ufe64\212" +
    "\ufe64\213\ufe64\214\ufe64\215\ufe64\001\002\000\024\011\ufe45" +
    "\013\ufe45\036\ufe45\057\ufe45\060\ufe45\071\ufe45\205\ufe45\206" +
    "\ufe45\247\ufe45\001\002\000\024\011\056\013\063\036\062" +
    "\057\323\060\312\071\317\205\061\206\057\247\314\001" +
    "\002\000\062\002\ufe61\003\ufe61\004\ufe61\012\ufe61\020\ufe61" +
    "\021\ufe61\022\ufe61\024\ufe61\035\ufe61\050\ufe61\061\ufe61\064" +
    "\ufe61\066\ufe61\070\ufe61\105\ufe61\140\ufe61\145\ufe61\203\ufe61" +
    "\204\ufe61\207\ufe61\212\ufe61\213\ufe61\214\ufe61\215\ufe61\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\004\012\370\001\002\000\044\002\uff28\003" +
    "\uff28\004\uff28\024\uff28\035\uff28\050\uff28\061\uff28\106\uff28" +
    "\140\uff28\145\uff28\203\uff28\204\uff28\207\uff28\212\uff28\213" +
    "\uff28\214\uff28\215\uff28\001\002\000\004\012\u0111\001\002" +
    "\000\010\012\ufde2\020\ufde2\066\373\001\002\000\004\065" +
    "\u0104\001\002\000\012\012\uff62\020\uff62\021\uff62\022\uff62" +
    "\001\002\000\006\012\ufde2\020\u0100\001\002\000\004\012" +
    "\uff29\001\002\000\004\012\uff2b\001\002\000\004\013\u0101" +
    "\001\002\000\010\012\ufde2\020\ufde2\066\373\001\002\000" +
    "\006\012\ufde2\020\u0100\001\002\000\004\012\uff2a\001\002" +
    "\000\010\013\u0108\077\u0106\100\u0105\001\002\000\020\012" +
    "\uff5a\013\uff5a\020\uff5a\021\uff5a\022\uff5a\077\uff5a\100\uff5a" +
    "\001\002\000\020\012\uff5b\013\uff5b\020\uff5b\021\uff5b\022" +
    "\uff5b\077\uff5b\100\uff5b\001\002\000\016\012\uff63\020\u010b" +
    "\021\uff63\022\uff63\077\u0106\100\u0105\001\002\000\020\012" +
    "\uff5c\017\u010d\020\uff5c\021\uff5c\022\uff5c\077\uff5c\100\uff5c" +
    "\001\002\000\010\013\u0108\077\u0106\100\u0105\001\002\000" +
    "\016\012\uff61\020\u010b\021\uff61\022\uff61\077\u0106\100\u0105" +
    "\001\002\000\016\012\uff5d\020\uff5d\021\uff5d\022\uff5d\077" +
    "\uff5d\100\uff5d\001\002\000\016\012\uff60\020\uff60\021\uff60" +
    "\022\uff60\077\uff60\100\uff60\001\002\000\004\013\u010e\001" +
    "\002\000\020\012\uff5f\017\u010f\020\uff5f\021\uff5f\022\uff5f" +
    "\077\uff5f\100\uff5f\001\002\000\004\013\u0110\001\002\000" +
    "\016\012\uff5e\020\uff5e\021\uff5e\022\uff5e\077\uff5e\100\uff5e" +
    "\001\002\000\046\002\uff2c\003\uff2c\004\uff2c\024\uff2c\035" +
    "\uff2c\050\uff2c\061\uff2c\106\uff2c\136\uff2c\140\uff2c\145\uff2c" +
    "\203\uff2c\204\uff2c\207\uff2c\212\uff2c\213\uff2c\214\uff2c\215" +
    "\uff2c\001\002\000\040\002\uff58\003\uff58\004\uff58\024\uff58" +
    "\050\uff58\061\uff58\140\uff58\145\uff58\203\uff58\204\uff58\207" +
    "\uff58\212\uff58\213\uff58\214\uff58\215\uff58\001\002\000\004" +
    "\034\u0114\001\002\000\004\061\024\001\002\000\040\002" +
    "\uff30\003\uff30\004\uff30\024\uff30\050\uff30\061\uff30\140\uff30" +
    "\145\uff30\203\uff30\204\uff30\207\uff30\212\uff30\213\uff30\214" +
    "\uff30\215\uff30\001\002\000\004\011\u0117\001\002\000\030" +
    "\011\056\013\063\036\062\111\u011d\113\ufde2\117\ufde2\120" +
    "\ufde2\123\ufde2\124\u0118\205\061\206\057\001\002\000\014" +
    "\011\056\013\063\036\062\205\061\206\057\001\002\000" +
    "\012\113\ufee8\117\ufee8\120\ufee8\123\ufee8\001\002\000\006" +
    "\012\uff1b\020\uff1b\001\002\000\006\012\uff1a\020\uff1a\001" +
    "\002\000\006\012\ufde2\020\u0206\001\002\000\014\011\056" +
    "\013\063\036\062\205\061\206\057\001\002\000\012\113" +
    "\u01df\117\u01e1\120\u01dd\123\u01de\001\002\000\006\012\uff19" +
    "\020\uff19\001\002\000\064\112\u0121\134\u012f\146\u0127\147" +
    "\u0123\150\u012b\151\u0130\152\u012e\153\u012d\154\u0128\155\u0134" +
    "\156\u0125\157\u0138\160\u0132\161\u0137\162\u0129\163\u012c\164" +
    "\u0136\165\u0126\166\u0122\167\u013a\170\u012a\177\u0124\201\u0135" +
    "\202\u0131\246\u0139\001\002\000\064\112\u0121\134\u012f\146" +
    "\u0127\147\u0123\150\u012b\151\u0130\152\u012e\153\u012d\154\u0128" +
    "\155\u0134\156\u0125\157\u0138\160\u0132\161\u0137\162\u0129\163" +
    "\u012c\164\u0136\165\u0126\166\u0122\167\u013a\170\u012a\177\u0124" +
    "\201\u0135\202\u0131\246\u0139\001\002\000\064\112\u0121\134" +
    "\u012f\146\u0127\147\u0123\150\u012b\151\u0130\152\u012e\153\u012d" +
    "\154\u0128\155\u0134\156\u0125\157\u0138\160\u0132\161\u0137\162" +
    "\u0129\163\u012c\164\u0136\165\u0126\166\u0122\167\u013a\170\u012a" +
    "\177\u0124\201\u0135\202\u0131\246\u0139\001\002\000\044\011" +
    "\u01d8\012\ufe14\013\ufe14\015\ufe14\016\ufe14\020\ufe14\023\ufe14" +
    "\046\ufe14\101\ufe14\111\ufe14\112\ufe14\113\ufe14\117\ufe14\120" +
    "\ufe14\121\ufe14\123\ufe14\131\ufe14\001\002\000\044\011\u01d5" +
    "\012\ufe0c\013\ufe0c\015\ufe0c\016\ufe0c\020\ufe0c\023\ufe0c\046" +
    "\ufe0c\101\ufe0c\111\ufe0c\112\ufe0c\113\ufe0c\117\ufe0c\120\ufe0c" +
    "\121\ufe0c\123\ufe0c\131\ufe0c\001\002\000\042\012\ufe00\013" +
    "\ufe00\015\ufe00\016\ufe00\020\ufe00\023\ufe00\046\ufe00\101\ufe00" +
    "\111\ufe00\112\ufe00\113\ufe00\117\ufe00\120\ufe00\121\ufe00\123" +
    "\ufe00\131\ufe00\001\002\000\042\012\ufdf9\013\ufdf9\015\ufdf9" +
    "\016\ufdf9\020\ufdf9\023\ufdf9\046\ufdf9\101\ufdf9\111\ufdf9\112" +
    "\ufdf9\113\ufdf9\117\ufdf9\120\ufdf9\121\ufdf9\123\ufdf9\131\ufdf9" +
    "\001\002\000\044\011\u01d2\012\ufe16\013\ufe16\015\ufe16\016" +
    "\ufe16\020\ufe16\023\ufe16\046\ufe16\101\ufe16\111\ufe16\112\ufe16" +
    "\113\ufe16\117\ufe16\120\ufe16\121\ufe16\123\ufe16\131\ufe16\001" +
    "\002\000\042\012\ufe02\013\ufe02\015\ufe02\016\ufe02\020\ufe02" +
    "\023\ufe02\046\ufe02\101\ufe02\111\ufe02\112\ufe02\113\ufe02\117" +
    "\ufe02\120\ufe02\121\ufe02\123\ufe02\131\ufe02\001\002\000\042" +
    "\012\ufdfc\013\ufdfc\015\ufdfc\016\ufdfc\020\ufdfc\023\ufdfc\046" +
    "\ufdfc\101\ufdfc\111\ufdfc\112\ufdfc\113\ufdfc\117\ufdfc\120\ufdfc" +
    "\121\ufdfc\123\ufdfc\131\ufdfc\001\002\000\064\112\u0121\134" +
    "\u012f\146\u0127\147\u0123\150\u012b\151\u0130\152\u012e\153\u012d" +
    "\154\u0128\155\u0134\156\u0125\157\u0138\160\u0132\161\u0137\162" +
    "\u0129\163\u012c\164\u0136\165\u0126\166\u0122\167\u013a\170\u012a" +
    "\177\u0124\201\u0135\202\u0131\246\u0139\001\002\000\044\011" +
    "\u01ce\012\ufe12\013\ufe12\015\ufe12\016\ufe12\020\ufe12\023\ufe12" +
    "\046\ufe12\101\ufe12\111\ufe12\112\ufe12\113\ufe12\117\ufe12\120" +
    "\ufe12\121\ufe12\123\ufe12\131\ufe12\001\002\000\042\012\ufdfb" +
    "\013\ufdfb\015\ufdfb\016\ufdfb\020\ufdfb\023\ufdfb\046\ufdfb\101" +
    "\ufdfb\111\ufdfb\112\ufdfb\113\ufdfb\117\ufdfb\120\ufdfb\121\ufdfb" +
    "\123\ufdfb\131\ufdfb\001\002\000\042\012\ufe03\013\ufe03\015" +
    "\ufe03\016\ufe03\020\ufe03\023\ufe03\046\ufe03\101\ufe03\111\ufe03" +
    "\112\ufe03\113\ufe03\117\ufe03\120\ufe03\121\ufe03\123\ufe03\131" +
    "\ufe03\001\002\000\044\011\u01c9\012\ufe08\013\ufe08\015\ufe08" +
    "\016\ufe08\020\ufe08\023\ufe08\046\ufe08\101\ufe08\111\ufe08\112" +
    "\ufe08\113\ufe08\117\ufe08\120\ufe08\121\ufe08\123\ufe08\131\ufe08" +
    "\001\002\000\044\011\u01c6\012\ufe05\013\ufe05\015\ufe05\016" +
    "\ufe05\020\ufe05\023\ufe05\046\ufe05\101\ufe05\111\ufe05\112\ufe05" +
    "\113\ufe05\117\ufe05\120\ufe05\121\ufe05\123\ufe05\131\ufe05\001" +
    "\002\000\044\011\u01c3\012\ufe10\013\ufe10\015\ufe10\016\ufe10" +
    "\020\ufe10\023\ufe10\046\ufe10\101\ufe10\111\ufe10\112\ufe10\113" +
    "\ufe10\117\ufe10\120\ufe10\121\ufe10\123\ufe10\131\ufe10\001\002" +
    "\000\044\011\u01c0\012\ufe0e\013\ufe0e\015\ufe0e\016\ufe0e\020" +
    "\ufe0e\023\ufe0e\046\ufe0e\101\ufe0e\111\ufe0e\112\ufe0e\113\ufe0e" +
    "\117\ufe0e\120\ufe0e\121\ufe0e\123\ufe0e\131\ufe0e\001\002\000" +
    "\042\012\ufdfe\013\ufdfe\015\ufdfe\016\ufdfe\020\ufdfe\023\ufdfe" +
    "\046\ufdfe\101\ufdfe\111\ufdfe\112\ufdfe\113\ufdfe\117\ufdfe\120" +
    "\ufdfe\121\ufdfe\123\ufdfe\131\ufdfe\001\002\000\040\012\ufde2" +
    "\015\ufde2\016\ufde2\020\ufde2\023\ufde2\046\ufde2\101\ufde2\111" +
    "\ufde2\112\ufde2\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2" +
    "\131\u0145\001\002\000\042\012\ufe01\013\ufe01\015\ufe01\016" +
    "\ufe01\020\ufe01\023\ufe01\046\ufe01\101\ufe01\111\ufe01\112\ufe01" +
    "\113\ufe01\117\ufe01\120\ufe01\121\ufe01\123\ufe01\131\ufe01\001" +
    "\002\000\044\011\u0141\012\ufe0a\013\ufe0a\015\ufe0a\016\ufe0a" +
    "\020\ufe0a\023\ufe0a\046\ufe0a\101\ufe0a\111\ufe0a\112\ufe0a\113" +
    "\ufe0a\117\ufe0a\120\ufe0a\121\ufe0a\123\ufe0a\131\ufe0a\001\002" +
    "\000\042\012\ufdfa\013\ufdfa\015\ufdfa\016\ufdfa\020\ufdfa\023" +
    "\ufdfa\046\ufdfa\101\ufdfa\111\ufdfa\112\ufdfa\113\ufdfa\117\ufdfa" +
    "\120\ufdfa\121\ufdfa\123\ufdfa\131\ufdfa\001\002\000\042\012" +
    "\ufdfd\013\ufdfd\015\ufdfd\016\ufdfd\020\ufdfd\023\ufdfd\046\ufdfd" +
    "\101\ufdfd\111\ufdfd\112\ufdfd\113\ufdfd\117\ufdfd\120\ufdfd\121" +
    "\ufdfd\123\ufdfd\131\ufdfd\001\002\000\042\012\ufdff\013\ufdff" +
    "\015\ufdff\016\ufdff\020\ufdff\023\ufdff\046\ufdff\101\ufdff\111" +
    "\ufdff\112\ufdff\113\ufdff\117\ufdff\120\ufdff\121\ufdff\123\ufdff" +
    "\131\ufdff\001\002\000\044\011\u013c\012\ufdf4\013\ufdf4\015" +
    "\ufdf4\016\ufdf4\020\ufdf4\023\ufdf4\046\ufdf4\101\ufdf4\111\ufdf4" +
    "\112\ufdf4\113\ufdf4\117\ufdf4\120\ufdf4\121\ufdf4\123\ufdf4\131" +
    "\ufdf4\001\002\000\064\112\u0121\134\u012f\146\u0127\147\u0123" +
    "\150\u012b\151\u0130\152\u012e\153\u012d\154\u0128\155\u0134\156" +
    "\u0125\157\u0138\160\u0132\161\u0137\162\u0129\163\u012c\164\u0136" +
    "\165\u0126\166\u0122\167\u013a\170\u012a\177\u0124\201\u0135\202" +
    "\u0131\246\u0139\001\002\000\042\012\ufdf7\013\ufdf7\015\ufdf7" +
    "\016\ufdf7\020\ufdf7\023\ufdf7\046\ufdf7\101\ufdf7\111\ufdf7\112" +
    "\ufdf7\113\ufdf7\117\ufdf7\120\ufdf7\121\ufdf7\123\ufdf7\131\ufdf7" +
    "\001\002\000\006\171\u013d\247\u013e\001\002\000\004\012" +
    "\u0140\001\002\000\004\012\u013f\001\002\000\042\012\ufdf3" +
    "\013\ufdf3\015\ufdf3\016\ufdf3\020\ufdf3\023\ufdf3\046\ufdf3\101" +
    "\ufdf3\111\ufdf3\112\ufdf3\113\ufdf3\117\ufdf3\120\ufdf3\121\ufdf3" +
    "\123\ufdf3\131\ufdf3\001\002\000\042\012\ufdf2\013\ufdf2\015" +
    "\ufdf2\016\ufdf2\020\ufdf2\023\ufdf2\046\ufdf2\101\ufdf2\111\ufdf2" +
    "\112\ufdf2\113\ufdf2\117\ufdf2\120\ufdf2\121\ufdf2\123\ufdf2\131" +
    "\ufdf2\001\002\000\004\247\u0142\001\002\000\004\012\u0143" +
    "\001\002\000\042\012\ufe09\013\ufe09\015\ufe09\016\ufe09\020" +
    "\ufe09\023\ufe09\046\ufe09\101\ufe09\111\ufe09\112\ufe09\113\ufe09" +
    "\117\ufe09\120\ufe09\121\ufe09\123\ufe09\131\ufe09\001\002\000" +
    "\036\012\ufef3\015\ufef3\016\ufef3\020\ufef3\023\ufef3\046\ufef3" +
    "\101\ufef3\111\ufef3\112\ufef3\113\ufef3\117\ufef3\120\ufef3\121" +
    "\ufef3\123\ufef3\001\002\000\014\011\056\013\063\036\062" +
    "\205\061\206\057\001\002\000\036\012\ufde2\015\u014d\016" +
    "\ufde2\020\ufde2\023\u014f\046\ufde2\101\u0153\111\u014e\112\u0147" +
    "\113\u0154\117\u014b\120\u0155\121\ufde2\123\u0152\001\002\000" +
    "\030\011\u01a9\012\ufde2\020\ufde2\023\ufde2\101\ufde2\111\ufde2" +
    "\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2\001\002\000" +
    "\006\012\uff0a\020\uff0a\001\002\000\006\012\uff08\020\uff08" +
    "\001\002\000\006\016\u01b1\046\u01b0\001\002\000\026\012" +
    "\ufde2\020\ufde2\111\ufde2\113\ufde2\115\257\116\260\117\ufde2" +
    "\120\ufde2\121\ufde2\123\ufde2\001\002\000\014\012\uff07\016" +
    "\uff00\020\uff07\046\uff00\121\ufede\001\002\000\014\016\u019d" +
    "\057\u019a\060\u019b\247\u019f\250\u019c\001\002\000\014\011" +
    "\056\013\063\036\062\205\061\206\057\001\002\000\022" +
    "\012\ufde2\020\ufde2\111\u011d\113\ufde2\117\ufde2\120\ufde2\121" +
    "\ufde2\123\ufde2\001\002\000\004\121\u0180\001\002\000\022" +
    "\012\ufde2\020\ufde2\111\u011d\113\ufde2\117\ufde2\120\ufde2\121" +
    "\ufde2\123\ufde2\001\002\000\006\011\ufde2\101\u015d\001\002" +
    "\000\006\016\uff01\046\uff01\001\002\000\004\114\u0157\001" +
    "\002\000\004\114\u0156\001\002\000\004\121\ufedf\001\002" +
    "\000\030\011\ufde2\012\ufde2\020\ufde2\111\ufde2\113\ufde2\115" +
    "\257\116\260\117\ufde2\120\ufde2\121\ufde2\123\ufde2\001\002" +
    "\000\024\011\u0159\012\ufee7\020\ufee7\111\ufee7\113\ufee7\117" +
    "\ufee7\120\ufee7\121\ufee7\123\ufee7\001\002\000\014\011\056" +
    "\013\063\036\062\205\061\206\057\001\002\000\004\012" +
    "\u015b\001\002\000\022\012\ufee6\020\ufee6\111\ufee6\113\ufee6" +
    "\117\ufee6\120\ufee6\121\ufee6\123\ufee6\001\002\000\026\011" +
    "\uff20\012\uff20\020\uff20\023\uff20\111\uff20\113\uff20\117\uff20" +
    "\120\uff20\121\uff20\123\uff20\001\002\000\006\016\u0172\046" +
    "\u0170\001\002\000\004\011\u015f\001\002\000\006\011\u0162" +
    "\101\u0163\001\002\000\010\012\ufde2\070\u0166\105\u0167\001" +
    "\002\000\004\012\u016e\001\002\000\006\011\u0162\101\u0163" +
    "\001\002\000\002\001\002\000\010\012\ufde2\070\u0166\105" +
    "\u0167\001\002\000\004\012\ufece\001\002\000\006\011\u0162" +
    "\101\u0163\001\002\000\006\011\u0162\101\u0163\001\002\000" +
    "\004\012\ufed3\001\002\000\004\012\ufecf\001\002\000\004" +
    "\012\ufed0\001\002\000\004\012\u016c\001\002\000\010\012" +
    "\ufde2\070\u0166\105\u0167\001\002\000\004\012\ufed1\001\002" +
    "\000\022\012\ufee3\020\ufee3\111\ufee3\113\ufee3\117\ufee3\120" +
    "\ufee3\121\ufee3\123\ufee3\001\002\000\004\012\ufed2\001\002" +
    "\000\004\122\u0173\001\002\000\026\011\uff21\012\uff21\020" +
    "\uff21\023\uff21\111\uff21\113\uff21\117\uff21\120\uff21\121\uff21" +
    "\123\uff21\001\002\000\026\011\uff1e\012\uff1e\020\uff1e\023" +
    "\uff1e\111\uff1e\113\uff1e\117\uff1e\120\uff1e\121\uff1e\123\uff1e" +
    "\001\002\000\030\011\ufde2\012\ufde2\020\ufde2\023\ufde2\101" +
    "\u0175\111\ufde2\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2" +
    "\001\002\000\026\011\uff1c\012\uff1c\020\uff1c\023\uff1c\111" +
    "\uff1c\113\uff1c\117\uff1c\120\uff1c\121\uff1c\123\uff1c\001\002" +
    "\000\030\011\ufde2\012\ufde2\016\u0179\020\ufde2\023\ufde2\111" +
    "\ufde2\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2\001\002" +
    "\000\026\011\uff1f\012\uff1f\020\uff1f\023\uff1f\111\uff1f\113" +
    "\uff1f\117\uff1f\120\uff1f\121\uff1f\123\uff1f\001\002\000\026" +
    "\011\ufef7\012\ufef7\020\ufef7\023\ufef7\111\ufef7\113\ufef7\117" +
    "\ufef7\120\ufef7\121\ufef7\123\ufef7\001\002\000\026\011\uff1d" +
    "\012\uff1d\020\uff1d\023\uff1d\111\uff1d\113\uff1d\117\uff1d\120" +
    "\uff1d\121\uff1d\123\uff1d\001\002\000\026\011\ufef8\012\ufef8" +
    "\020\ufef8\023\ufef8\111\ufef8\113\ufef8\117\ufef8\120\ufef8\121" +
    "\ufef8\123\ufef8\001\002\000\020\012\ufeea\020\ufeea\113\ufee8" +
    "\117\ufee8\120\ufee8\121\ufee8\123\ufee8\001\002\000\006\012" +
    "\uff02\020\uff02\001\002\000\014\113\u0154\117\u014b\120\u0155" +
    "\121\ufde2\123\u0152\001\002\000\004\121\ufede\001\002\000" +
    "\022\012\ufde2\020\ufde2\111\u011d\113\ufde2\117\ufde2\120\ufde2" +
    "\121\ufde2\123\ufde2\001\002\000\006\012\ufeeb\020\ufeeb\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\030\011\u0183\012\ufde2\020\ufde2\035\ufde2\101" +
    "\ufde2\111\ufde2\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2" +
    "\001\002\000\026\012\ufedc\020\ufedc\035\ufedc\101\ufedc\111" +
    "\ufedc\113\ufedc\117\ufedc\120\ufedc\121\ufedc\123\ufedc\001\002" +
    "\000\014\011\056\013\063\036\062\205\061\206\057\001" +
    "\002\000\026\012\ufde2\020\ufde2\035\u0186\101\ufde2\111\ufde2" +
    "\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2\001\002\000" +
    "\024\012\ufeda\020\ufeda\101\ufeda\111\ufeda\113\ufeda\117\ufeda" +
    "\120\ufeda\121\ufeda\123\ufeda\001\002\000\006\024\u018a\050" +
    "\u018b\001\002\000\024\012\ufde2\020\ufde2\101\u015d\111\ufde2" +
    "\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2\001\002\000" +
    "\022\012\ufee4\020\ufee4\111\ufee4\113\ufee4\117\ufee4\120\ufee4" +
    "\121\ufee4\123\ufee4\001\002\000\026\012\ufde2\020\ufde2\035" +
    "\u0186\101\ufde2\111\ufde2\113\ufde2\117\ufde2\120\ufde2\121\ufde2" +
    "\123\ufde2\001\002\000\006\051\u018d\126\u018e\001\002\000" +
    "\006\051\u018d\126\u018e\001\002\000\026\012\ufed8\020\ufed8" +
    "\035\ufed8\101\ufed8\111\ufed8\113\ufed8\117\ufed8\120\ufed8\121" +
    "\ufed8\123\ufed8\001\002\000\006\015\u018f\016\u0191\001\002" +
    "\000\026\012\ufed5\020\ufed5\035\ufed5\101\ufed5\111\ufed5\113" +
    "\ufed5\117\ufed5\120\ufed5\121\ufed5\123\ufed5\001\002\000\026" +
    "\012\ufed6\020\ufed6\035\ufed6\101\ufed6\111\ufed6\113\ufed6\117" +
    "\ufed6\120\ufed6\121\ufed6\123\ufed6\001\002\000\026\012\ufed4" +
    "\020\ufed4\035\ufed4\101\ufed4\111\ufed4\113\ufed4\117\ufed4\120" +
    "\ufed4\121\ufed4\123\ufed4\001\002\000\026\012\ufed7\020\ufed7" +
    "\035\ufed7\101\ufed7\111\ufed7\113\ufed7\117\ufed7\120\ufed7\121" +
    "\ufed7\123\ufed7\001\002\000\026\012\ufed9\020\ufed9\035\ufed9" +
    "\101\ufed9\111\ufed9\113\ufed9\117\ufed9\120\ufed9\121\ufed9\123" +
    "\ufed9\001\002\000\024\012\ufedb\020\ufedb\101\ufedb\111\ufedb" +
    "\113\ufedb\117\ufedb\120\ufedb\121\ufedb\123\ufedb\001\002\000" +
    "\004\012\u0195\001\002\000\026\012\ufedd\020\ufedd\035\ufedd" +
    "\101\ufedd\111\ufedd\113\ufedd\117\ufedd\120\ufedd\121\ufedd\123" +
    "\ufedd\001\002\000\006\012\uff03\020\uff03\001\002\000\030" +
    "\015\u014d\016\ufde2\023\u014f\046\ufde2\101\u0153\112\u0147\113" +
    "\u0154\117\u014b\120\u0155\121\ufde2\123\u0152\001\002\000\006" +
    "\012\uff09\020\uff09\001\002\000\010\016\uff00\046\uff00\121" +
    "\ufede\001\002\000\030\012\ufef0\020\ufef0\023\ufef0\101\ufef0" +
    "\111\ufef0\112\ufef0\113\ufef0\117\ufef0\120\ufef0\121\ufef0\123" +
    "\ufef0\001\002\000\030\012\ufef1\020\ufef1\023\ufef1\101\ufef1" +
    "\111\ufef1\112\ufef1\113\ufef1\117\ufef1\120\ufef1\121\ufef1\123" +
    "\ufef1\001\002\000\030\012\ufeef\020\ufeef\023\ufeef\101\ufeef" +
    "\111\ufeef\112\ufeef\113\ufeef\117\ufeef\120\ufeef\121\ufeef\123" +
    "\ufeef\001\002\000\030\012\ufeee\020\ufeee\023\ufeee\101\ufeee" +
    "\111\ufeee\112\ufeee\113\ufeee\117\ufeee\120\ufeee\121\ufeee\123" +
    "\ufeee\001\002\000\030\012\ufde2\020\ufde2\023\ufde2\101\ufde2" +
    "\111\ufde2\112\u01a0\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123" +
    "\ufde2\001\002\000\030\012\ufef2\020\ufef2\023\ufef2\101\ufef2" +
    "\111\ufef2\112\ufef2\113\ufef2\117\ufef2\120\ufef2\121\ufef2\123" +
    "\ufef2\001\002\000\030\011\u01a9\012\ufde2\020\ufde2\023\ufde2" +
    "\101\ufde2\111\ufde2\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123" +
    "\ufde2\001\002\000\026\012\ufeec\020\ufeec\023\ufeec\101\ufeec" +
    "\111\ufeec\113\ufeec\117\ufeec\120\ufeec\121\ufeec\123\ufeec\001" +
    "\002\000\026\012\ufde2\020\ufde2\023\ufde2\101\u015d\111\ufde2" +
    "\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2\001\002\000" +
    "\024\012\ufde2\020\ufde2\023\u01a5\111\ufde2\113\ufde2\117\ufde2" +
    "\120\ufde2\121\ufde2\123\ufde2\001\002\000\022\012\ufef5\020" +
    "\ufef5\111\ufef5\113\ufef5\117\ufef5\120\ufef5\121\ufef5\123\ufef5" +
    "\001\002\000\022\012\ufef6\020\ufef6\111\ufef6\113\ufef6\117" +
    "\ufef6\120\ufef6\121\ufef6\123\ufef6\001\002\000\022\012\ufde2" +
    "\020\ufde2\111\u011d\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123" +
    "\ufde2\001\002\000\006\012\uff06\020\uff06\001\002\000\026" +
    "\012\ufefe\020\ufefe\023\ufefe\101\ufefe\111\ufefe\113\ufefe\117" +
    "\ufefe\120\ufefe\121\ufefe\123\ufefe\001\002\000\004\247\u01ab" +
    "\001\002\000\026\012\ufeed\020\ufeed\023\ufeed\101\ufeed\111" +
    "\ufeed\113\ufeed\117\ufeed\120\ufeed\121\ufeed\123\ufeed\001\002" +
    "\000\004\020\u01ac\001\002\000\004\247\u01ad\001\002\000" +
    "\004\012\u01ae\001\002\000\026\012\ufeff\020\ufeff\023\ufeff" +
    "\101\ufeff\111\ufeff\113\ufeff\117\ufeff\120\ufeff\121\ufeff\123" +
    "\ufeff\001\002\000\022\012\ufee5\020\ufee5\111\ufee5\113\ufee5" +
    "\117\ufee5\120\ufee5\121\ufee5\123\ufee5\001\002\000\004\122" +
    "\u01b5\001\002\000\024\012\ufefd\020\ufefd\023\ufefd\111\ufefd" +
    "\113\ufefd\117\ufefd\120\ufefd\121\ufefd\123\ufefd\001\002\000" +
    "\024\012\ufde2\020\ufde2\023\u01a5\111\ufde2\113\ufde2\117\ufde2" +
    "\120\ufde2\121\ufde2\123\ufde2\001\002\000\022\012\ufde2\020" +
    "\ufde2\111\u011d\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2" +
    "\001\002\000\006\012\uff04\020\uff04\001\002\000\030\012" +
    "\ufde2\016\u01b9\020\ufde2\023\ufde2\101\u01b8\111\ufde2\113\ufde2" +
    "\117\ufde2\120\ufde2\121\ufde2\123\ufde2\001\002\000\024\012" +
    "\ufef9\020\ufef9\023\ufef9\111\ufef9\113\ufef9\117\ufef9\120\ufef9" +
    "\121\ufef9\123\ufef9\001\002\000\024\012\ufefc\020\ufefc\023" +
    "\ufefc\111\ufefc\113\ufefc\117\ufefc\120\ufefc\121\ufefc\123\ufefc" +
    "\001\002\000\004\016\u01ba\001\002\000\024\012\ufefa\020" +
    "\ufefa\023\ufefa\111\ufefa\113\ufefa\117\ufefa\120\ufefa\121\ufefa" +
    "\123\ufefa\001\002\000\024\012\ufefb\020\ufefb\023\ufefb\111" +
    "\ufefb\113\ufefb\117\ufefb\120\ufefb\121\ufefb\123\ufefb\001\002" +
    "\000\026\012\ufde2\020\ufde2\023\ufde2\101\u015d\111\ufde2\113" +
    "\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2\001\002\000\024" +
    "\012\ufde2\020\ufde2\023\u01a5\111\ufde2\113\ufde2\117\ufde2\120" +
    "\ufde2\121\ufde2\123\ufde2\001\002\000\022\012\ufde2\020\ufde2" +
    "\111\u011d\113\ufde2\117\ufde2\120\ufde2\121\ufde2\123\ufde2\001" +
    "\002\000\006\012\uff05\020\uff05\001\002\000\036\012\ufef4" +
    "\015\ufef4\016\ufef4\020\ufef4\023\ufef4\046\ufef4\101\ufef4\111" +
    "\ufef4\112\ufef4\113\ufef4\117\ufef4\120\ufef4\121\ufef4\123\ufef4" +
    "\001\002\000\004\247\u01c1\001\002\000\004\012\u01c2\001" +
    "\002\000\042\012\ufe0d\013\ufe0d\015\ufe0d\016\ufe0d\020\ufe0d" +
    "\023\ufe0d\046\ufe0d\101\ufe0d\111\ufe0d\112\ufe0d\113\ufe0d\117" +
    "\ufe0d\120\ufe0d\121\ufe0d\123\ufe0d\131\ufe0d\001\002\000\004" +
    "\247\u01c4\001\002\000\004\012\u01c5\001\002\000\042\012" +
    "\ufe0f\013\ufe0f\015\ufe0f\016\ufe0f\020\ufe0f\023\ufe0f\046\ufe0f" +
    "\101\ufe0f\111\ufe0f\112\ufe0f\113\ufe0f\117\ufe0f\120\ufe0f\121" +
    "\ufe0f\123\ufe0f\131\ufe0f\001\002\000\004\247\u01c7\001\002" +
    "\000\004\012\u01c8\001\002\000\042\012\ufe04\013\ufe04\015" +
    "\ufe04\016\ufe04\020\ufe04\023\ufe04\046\ufe04\101\ufe04\111\ufe04" +
    "\112\ufe04\113\ufe04\117\ufe04\120\ufe04\121\ufe04\123\ufe04\131" +
    "\ufe04\001\002\000\006\171\u01ca\247\u01cb\001\002\000\004" +
    "\012\u01cd\001\002\000\004\012\u01cc\001\002\000\042\012" +
    "\ufe07\013\ufe07\015\ufe07\016\ufe07\020\ufe07\023\ufe07\046\ufe07" +
    "\101\ufe07\111\ufe07\112\ufe07\113\ufe07\117\ufe07\120\ufe07\121" +
    "\ufe07\123\ufe07\131\ufe07\001\002\000\042\012\ufe06\013\ufe06" +
    "\015\ufe06\016\ufe06\020\ufe06\023\ufe06\046\ufe06\101\ufe06\111" +
    "\ufe06\112\ufe06\113\ufe06\117\ufe06\120\ufe06\121\ufe06\123\ufe06" +
    "\131\ufe06\001\002\000\004\247\u01cf\001\002\000\004\012" +
    "\u01d0\001\002\000\042\012\ufe11\013\ufe11\015\ufe11\016\ufe11" +
    "\020\ufe11\023\ufe11\046\ufe11\101\ufe11\111\ufe11\112\ufe11\113" +
    "\ufe11\117\ufe11\120\ufe11\121\ufe11\123\ufe11\131\ufe11\001\002" +
    "\000\042\012\ufdf6\013\ufdf6\015\ufdf6\016\ufdf6\020\ufdf6\023" +
    "\ufdf6\046\ufdf6\101\ufdf6\111\ufdf6\112\ufdf6\113\ufdf6\117\ufdf6" +
    "\120\ufdf6\121\ufdf6\123\ufdf6\131\ufdf6\001\002\000\004\247" +
    "\u01d3\001\002\000\004\012\u01d4\001\002\000\042\012\ufe15" +
    "\013\ufe15\015\ufe15\016\ufe15\020\ufe15\023\ufe15\046\ufe15\101" +
    "\ufe15\111\ufe15\112\ufe15\113\ufe15\117\ufe15\120\ufe15\121\ufe15" +
    "\123\ufe15\131\ufe15\001\002\000\004\247\u01d6\001\002\000" +
    "\004\012\u01d7\001\002\000\042\012\ufe0b\013\ufe0b\015\ufe0b" +
    "\016\ufe0b\020\ufe0b\023\ufe0b\046\ufe0b\101\ufe0b\111\ufe0b\112" +
    "\ufe0b\113\ufe0b\117\ufe0b\120\ufe0b\121\ufe0b\123\ufe0b\131\ufe0b" +
    "\001\002\000\004\247\u01d9\001\002\000\004\012\u01da\001" +
    "\002\000\042\012\ufe13\013\ufe13\015\ufe13\016\ufe13\020\ufe13" +
    "\023\ufe13\046\ufe13\101\ufe13\111\ufe13\112\ufe13\113\ufe13\117" +
    "\ufe13\120\ufe13\121\ufe13\123\ufe13\131\ufe13\001\002\000\042" +
    "\012\ufdf8\013\ufdf8\015\ufdf8\016\ufdf8\020\ufdf8\023\ufdf8\046" +
    "\ufdf8\101\ufdf8\111\ufdf8\112\ufdf8\113\ufdf8\117\ufdf8\120\ufdf8" +
    "\121\ufdf8\123\ufdf8\131\ufdf8\001\002\000\042\012\ufdf5\013" +
    "\ufdf5\015\ufdf5\016\ufdf5\020\ufdf5\023\ufdf5\046\ufdf5\101\ufdf5" +
    "\111\ufdf5\112\ufdf5\113\ufdf5\117\ufdf5\120\ufdf5\121\ufdf5\123" +
    "\ufdf5\131\ufdf5\001\002\000\004\114\u01f5\001\002\000\006" +
    "\011\ufde2\101\u015d\001\002\000\004\114\u01ee\001\002\000" +
    "\006\012\uff16\020\uff16\001\002\000\010\011\ufde2\115\257" +
    "\116\260\001\002\000\004\011\u01e3\001\002\000\014\011" +
    "\056\013\063\036\062\205\061\206\057\001\002\000\006" +
    "\012\uff14\020\uff14\001\002\000\006\077\u0106\100\u0105\001" +
    "\002\000\006\012\ufde2\020\u01e9\001\002\000\004\012\uff0f" +
    "\001\002\000\004\012\u01ed\001\002\000\014\011\056\013" +
    "\063\036\062\205\061\206\057\001\002\000\006\077\u0106" +
    "\100\u0105\001\002\000\006\012\ufde2\020\u01e9\001\002\000" +
    "\004\012\uff10\001\002\000\006\012\uff11\020\uff11\001\002" +
    "\000\010\011\ufde2\115\257\116\260\001\002\000\004\011" +
    "\u01e3\001\002\000\006\012\uff15\020\uff15\001\002\000\004" +
    "\011\u01f2\001\002\000\006\011\u0162\101\u0163\001\002\000" +
    "\004\012\u01f4\001\002\000\006\012\uff12\020\uff12\001\002" +
    "\000\004\011\u01f7\001\002\000\004\121\u01ff\001\002\000" +
    "\014\011\056\013\063\036\062\205\061\206\057\001\002" +
    "\000\006\012\ufde2\020\u01fb\001\002\000\004\012\uff0c\001" +
    "\002\000\004\012\u01fe\001\002\000\014\011\056\013\063" +
    "\036\062\205\061\206\057\001\002\000\006\012\ufde2\020" +
    "\u01fb\001\002\000\004\012\uff0d\001\002\000\004\121\uff0e" +
    "\001\002\000\014\011\056\013\063\036\062\205\061\206" +
    "\057\001\002\000\014\011\u0183\012\ufde2\020\ufde2\035\ufde2" +
    "\101\ufde2\001\002\000\012\012\ufde2\020\ufde2\035\u0186\101" +
    "\ufde2\001\002\000\010\012\ufde2\020\ufde2\101\u015d\001\002" +
    "\000\006\012\uff13\020\uff13\001\002\000\014\113\ufee9\117" +
    "\ufee9\120\ufee9\121\ufee9\123\ufee9\001\002\000\004\012\uff17" +
    "\001\002\000\030\011\056\013\063\036\062\111\u011d\113" +
    "\ufde2\117\ufde2\120\ufde2\123\ufde2\124\u0118\205\061\206\057" +
    "\001\002\000\004\012\u0208\001\002\000\042\002\ufde2\003" +
    "\ufde2\004\ufde2\024\ufde2\035\u020b\050\ufde2\061\ufde2\140\ufde2" +
    "\145\ufde2\203\ufde2\204\ufde2\207\ufde2\212\ufde2\213\ufde2\214" +
    "\ufde2\215\ufde2\001\002\000\040\002\uff22\003\uff22\004\uff22" +
    "\024\uff22\050\uff22\061\uff22\140\uff22\145\uff22\203\uff22\204" +
    "\uff22\207\uff22\212\uff22\213\uff22\214\uff22\215\uff22\001\002" +
    "\000\040\002\uff24\003\uff24\004\uff24\024\uff24\050\uff24\061" +
    "\uff24\140\uff24\145\uff24\203\uff24\204\uff24\207\uff24\212\uff24" +
    "\213\uff24\214\uff24\215\uff24\001\002\000\004\113\u020c\001" +
    "\002\000\040\002\uff23\003\uff23\004\uff23\024\uff23\050\uff23" +
    "\061\uff23\140\uff23\145\uff23\203\uff23\204\uff23\207\uff23\212" +
    "\uff23\213\uff23\214\uff23\215\uff23\001\002\000\006\012\ufde2" +
    "\020\u0206\001\002\000\004\012\uff18\001\002\000\010\011" +
    "\ufde2\115\257\116\260\001\002\000\004\011\u01e3\001\002" +
    "\000\006\012\uff0b\020\uff0b\001\002\000\040\002\uff50\003" +
    "\uff50\004\uff50\024\uff50\050\uff50\061\uff50\140\uff50\145\uff50" +
    "\203\uff50\204\uff50\207\uff50\212\uff50\213\uff50\214\uff50\215" +
    "\uff50\001\002\000\044\002\ufde2\003\ufde2\004\ufde2\024\ufde2" +
    "\035\u0216\050\ufde2\061\ufde2\131\ufde2\140\ufde2\145\ufde2\203" +
    "\ufde2\204\ufde2\207\ufde2\212\ufde2\213\ufde2\214\ufde2\215\ufde2" +
    "\001\002\000\042\002\uff4c\003\uff4c\004\uff4c\024\uff4c\050" +
    "\uff4c\061\uff4c\131\uff4c\140\uff4c\145\uff4c\203\uff4c\204\uff4c" +
    "\207\uff4c\212\uff4c\213\uff4c\214\uff4c\215\uff4c\001\002\000" +
    "\042\002\ufde2\003\ufde2\004\ufde2\024\ufde2\050\ufde2\061\ufde2" +
    "\131\u0248\140\ufde2\145\ufde2\203\ufde2\204\ufde2\207\ufde2\212" +
    "\ufde2\213\ufde2\214\ufde2\215\ufde2\001\002\000\006\011\ufde2" +
    "\113\u0219\001\002\000\040\002\uff4f\003\uff4f\004\uff4f\024" +
    "\uff4f\050\uff4f\061\uff4f\140\uff4f\145\uff4f\203\uff4f\204\uff4f" +
    "\207\uff4f\212\uff4f\213\uff4f\214\uff4f\215\uff4f\001\002\000" +
    "\004\011\uff4a\001\002\000\004\011\uff4b\001\002\000\004" +
    "\011\u021c\001\002\000\042\002\uff4d\003\uff4d\004\uff4d\024" +
    "\uff4d\050\uff4d\061\uff4d\131\uff4d\140\uff4d\145\uff4d\203\uff4d" +
    "\204\uff4d\207\uff4d\212\uff4d\213\uff4d\214\uff4d\215\uff4d\001" +
    "\002\000\004\130\u0220\001\002\000\044\002\uff48\003\uff48" +
    "\004\uff48\020\u021e\024\uff48\050\uff48\061\uff48\131\uff48\140" +
    "\uff48\145\uff48\203\uff48\204\uff48\207\uff48\212\uff48\213\uff48" +
    "\214\uff48\215\uff48\001\002\000\004\011\u021c\001\002\000" +
    "\042\002\uff49\003\uff49\004\uff49\024\uff49\050\uff49\061\uff49" +
    "\131\uff49\140\uff49\145\uff49\203\uff49\204\uff49\207\uff49\212" +
    "\uff49\213\uff49\214\uff49\215\uff49\001\002\000\004\037\u0221" +
    "\001\002\000\004\057\u0222\001\002\000\004\020\u0223\001" +
    "\002\000\004\242\u0224\001\002\000\004\037\u0225\001\002" +
    "\000\004\057\u0226\001\002\000\006\012\ufde2\020\u0229\001" +
    "\002\000\004\012\uff43\001\002\000\004\012\u0246\001\002" +
    "\000\010\135\u0232\233\u0230\235\u0231\001\002\000\006\012" +
    "\uff3e\020\uff3e\001\002\000\006\012\uff41\020\uff41\001\002" +
    "\000\006\012\uff42\020\uff42\001\002\000\006\012\uff40\020" +
    "\uff40\001\002\000\006\012\ufde2\020\u0229\001\002\000\006" +
    "\012\uff3f\020\uff3f\001\002\000\004\037\u023f\001\002\000" +
    "\004\037\u023a\001\002\000\004\037\u0233\001\002\000\004" +
    "\247\u0234\001\002\000\016\012\uff3c\020\uff3c\236\u0237\237" +
    "\u0239\240\u0238\241\u0235\001\002\000\006\012\uff38\020\uff38" +
    "\001\002\000\006\012\uff3d\020\uff3d\001\002\000\006\012" +
    "\uff3b\020\uff3b\001\002\000\006\012\uff39\020\uff39\001\002" +
    "\000\006\012\uff3a\020\uff3a\001\002\000\006\234\u023d\247" +
    "\u023c\001\002\000\006\012\uff37\020\uff37\001\002\000\012" +
    "\236\u0237\237\u0239\240\u0238\241\u0235\001\002\000\006\012" +
    "\uff35\020\uff35\001\002\000\006\012\uff36\020\uff36\001\002" +
    "\000\004\247\u0240\001\002\000\020\012\ufde2\020\ufde2\232" +
    "\u0242\236\u0237\237\u0239\240\u0238\241\u0235\001\002\000\006" +
    "\012\uff31\020\uff31\001\002\000\006\012\uff32\020\uff32\001" +
    "\002\000\006\012\uff33\020\uff33\001\002\000\006\012\uff34" +
    "\020\uff34\001\002\000\004\012\uff44\001\002\000\044\002" +
    "\uff47\003\uff47\004\uff47\020\uff47\024\uff47\050\uff47\061\uff47" +
    "\131\uff47\140\uff47\145\uff47\203\uff47\204\uff47\207\uff47\212" +
    "\uff47\213\uff47\214\uff47\215\uff47\001\002\000\040\002\uff45" +
    "\003\uff45\004\uff45\024\uff45\050\uff45\061\uff45\140\uff45\145" +
    "\uff45\203\uff45\204\uff45\207\uff45\212\uff45\213\uff45\214\uff45" +
    "\215\uff45\001\002\000\004\013\u024a\001\002\000\040\002" +
    "\uff4e\003\uff4e\004\uff4e\024\uff4e\050\uff4e\061\uff4e\140\uff4e" +
    "\145\uff4e\203\uff4e\204\uff4e\207\uff4e\212\uff4e\213\uff4e\214" +
    "\uff4e\215\uff4e\001\002\000\040\002\uff46\003\uff46\004\uff46" +
    "\024\uff46\050\uff46\061\uff46\140\uff46\145\uff46\203\uff46\204" +
    "\uff46\207\uff46\212\uff46\213\uff46\214\uff46\215\uff46\001\002" +
    "\000\014\011\056\013\063\036\062\205\061\206\057\001" +
    "\002\000\006\011\u02e3\247\u02e4\001\002\000\016\005\u028d" +
    "\011\056\013\063\036\062\205\061\206\057\001\002\000" +
    "\006\005\u0250\014\u024f\001\002\000\014\011\056\013\063" +
    "\036\062\205\061\206\057\001\002\000\014\011\056\013" +
    "\063\036\062\205\061\206\057\001\002\000\006\007\u0252" +
    "\011\u0253\001\002\000\006\011\u027a\015\u0279\001\002\000" +
    "\014\011\056\013\063\036\062\205\061\206\057\001\002" +
    "\000\004\012\u0255\001\002\000\010\007\u0257\014\u0258\015" +
    "\u0256\001\002\000\004\007\u0277\001\002\000\004\011\u026f" +
    "\001\002\000\004\007\u0259\001\002\000\004\011\u025a\001" +
    "\002\000\016\015\u025c\016\u0261\057\u025d\060\u025f\247\u0262" +
    "\250\u0260\001\002\000\006\012\uffc0\020\u026d\001\002\000" +
    "\010\007\u026a\012\uffc2\020\u0266\001\002\000\034\012\ufde5" +
    "\014\ufde5\020\ufde5\021\ufde5\022\ufde5\025\ufde5\052\ufde5\053" +
    "\ufde5\054\ufde5\055\ufde5\056\ufde5\066\ufde5\106\ufde5\001\002" +
    "\000\004\012\u0268\001\002\000\034\012\ufde3\014\ufde3\020" +
    "\ufde3\021\ufde3\022\ufde3\025\ufde3\052\ufde3\053\ufde3\054\ufde3" +
    "\055\ufde3\056\ufde3\066\ufde3\106\ufde3\001\002\000\034\012" +
    "\ufde4\014\ufde4\020\ufde4\021\ufde4\022\ufde4\025\ufde4\052\ufde4" +
    "\053\ufde4\054\ufde4\055\ufde4\056\ufde4\066\ufde4\106\ufde4\001" +
    "\002\000\006\012\uffc1\020\u0263\001\002\000\034\012\ufde6" +
    "\014\ufde6\020\ufde6\021\ufde6\022\ufde6\025\ufde6\052\ufde6\053" +
    "\ufde6\054\ufde6\055\ufde6\056\ufde6\066\ufde6\106\ufde6\001\002" +
    "\000\016\015\u0264\016\u0261\057\u025d\060\u025f\247\u0262\250" +
    "\u0260\001\002\000\006\012\uffc2\020\u0266\001\002\000\004" +
    "\012\uffc4\001\002\000\016\015\u0264\016\u0261\057\u025d\060" +
    "\u025f\247\u0262\250\u0260\001\002\000\004\012\uffc5\001\002" +
    "\000\006\021\074\022\076\001\002\000\040\002\uffd3\003" +
    "\uffd3\004\uffd3\024\uffd3\050\uffd3\061\uffd3\140\uffd3\145\uffd3" +
    "\203\uffd3\204\uffd3\207\uffd3\212\uffd3\213\uffd3\214\uffd3\215" +
    "\uffd3\001\002\000\004\012\u026b\001\002\000\006\021\074" +
    "\022\076\001\002\000\040\002\uffd2\003\uffd2\004\uffd2\024" +
    "\uffd2\050\uffd2\061\uffd2\140\uffd2\145\uffd2\203\uffd2\204\uffd2" +
    "\207\uffd2\212\uffd2\213\uffd2\214\uffd2\215\uffd2\001\002\000" +
    "\016\015\u0264\016\u0261\057\u025d\060\u025f\247\u0262\250\u0260" +
    "\001\002\000\004\012\uffc3\001\002\000\016\015\u0270\016" +
    "\u0261\057\u025d\060\u025f\247\u0262\250\u0260\001\002\000\010" +
    "\007\u0274\012\uffc2\020\u0266\001\002\000\004\012\u0272\001" +
    "\002\000\006\021\074\022\076\001\002\000\040\002\uffd1" +
    "\003\uffd1\004\uffd1\024\uffd1\050\uffd1\061\uffd1\140\uffd1\145" +
    "\uffd1\203\uffd1\204\uffd1\207\uffd1\212\uffd1\213\uffd1\214\uffd1" +
    "\215\uffd1\001\002\000\004\012\u0275\001\002\000\006\021" +
    "\074\022\076\001\002\000\040\002\uffd0\003\uffd0\004\uffd0" +
    "\024\uffd0\050\uffd0\061\uffd0\140\uffd0\145\uffd0\203\uffd0\204" +
    "\uffd0\207\uffd0\212\uffd0\213\uffd0\214\uffd0\215\uffd0\001\002" +
    "\000\006\021\074\022\076\001\002\000\040\002\uffcf\003" +
    "\uffcf\004\uffcf\024\uffcf\050\uffcf\061\uffcf\140\uffcf\145\uffcf" +
    "\203\uffcf\204\uffcf\207\uffcf\212\uffcf\213\uffcf\214\uffcf\215" +
    "\uffcf\001\002\000\004\007\u027e\001\002\000\016\015\u0264" +
    "\016\u0261\057\u025d\060\u025f\247\u0262\250\u0260\001\002\000" +
    "\004\012\u027c\001\002\000\006\021\074\022\076\001\002" +
    "\000\040\002\uffc8\003\uffc8\004\uffc8\024\uffc8\050\uffc8\061" +
    "\uffc8\140\uffc8\145\uffc8\203\uffc8\204\uffc8\207\uffc8\212\uffc8" +
    "\213\uffc8\214\uffc8\215\uffc8\001\002\000\006\021\074\022" +
    "\076\001\002\000\040\002\uffc7\003\uffc7\004\uffc7\024\uffc7" +
    "\050\uffc7\061\uffc7\140\uffc7\145\uffc7\203\uffc7\204\uffc7\207" +
    "\uffc7\212\uffc7\213\uffc7\214\uffc7\215\uffc7\001\002\000\004" +
    "\005\u0281\001\002\000\014\011\056\013\063\036\062\205" +
    "\061\206\057\001\002\000\004\007\u0283\001\002\000\004" +
    "\011\u0284\001\002\000\016\015\u0285\016\u0261\057\u025d\060" +
    "\u025f\247\u0262\250\u0260\001\002\000\010\007\u0289\012\uffc2" +
    "\020\u0266\001\002\000\004\012\u0287\001\002\000\006\021" +
    "\074\022\076\001\002\000\040\002\uffca\003\uffca\004\uffca" +
    "\024\uffca\050\uffca\061\uffca\140\uffca\145\uffca\203\uffca\204" +
    "\uffca\207\uffca\212\uffca\213\uffca\214\uffca\215\uffca\001\002" +
    "\000\004\012\u028a\001\002\000\006\021\074\022\076\001" +
    "\002\000\040\002\uffc9\003\uffc9\004\uffc9\024\uffc9\050\uffc9" +
    "\061\uffc9\140\uffc9\145\uffc9\203\uffc9\204\uffc9\207\uffc9\212" +
    "\uffc9\213\uffc9\214\uffc9\215\uffc9\001\002\000\004\005\u02b8" +
    "\001\002\000\014\011\056\013\063\036\062\205\061\206" +
    "\057\001\002\000\010\007\u0290\011\u0291\014\u028f\001\002" +
    "\000\004\007\u02af\001\002\000\004\011\u02a7\001\002\000" +
    "\014\011\056\013\063\036\062\205\061\206\057\001\002" +
    "\000\004\012\u0293\001\002\000\006\007\u0295\014\u0294\001" +
    "\002\000\004\007\u029e\001\002\000\004\011\u0296\001\002" +
    "\000\016\015\u0297\016\u0261\057\u025d\060\u025f\247\u0262\250" +
    "\u0260\001\002\000\010\007\u029b\012\uffc2\020\u0266\001\002" +
    "\000\004\012\u0299\001\002\000\006\021\074\022\076\001" +
    "\002\000\040\002\uffe6\003\uffe6\004\uffe6\024\uffe6\050\uffe6" +
    "\061\uffe6\140\uffe6\145\uffe6\203\uffe6\204\uffe6\207\uffe6\212" +
    "\uffe6\213\uffe6\214\uffe6\215\uffe6\001\002\000\004\012\u029c" +
    "\001\002\000\006\021\074\022\076\001\002\000\040\002" +
    "\uffe5\003\uffe5\004\uffe5\024\uffe5\050\uffe5\061\uffe5\140\uffe5" +
    "\145\uffe5\203\uffe5\204\uffe5\207\uffe5\212\uffe5\213\uffe5\214" +
    "\uffe5\215\uffe5\001\002\000\004\011\u029f\001\002\000\016" +
    "\015\u02a0\016\u0261\057\u025d\060\u025f\247\u0262\250\u0260\001" +
    "\002\000\010\007\u02a4\012\uffc2\020\u0266\001\002\000\004" +
    "\012\u02a2\001\002\000\006\021\074\022\076\001\002\000" +
    "\040\002\uffe8\003\uffe8\004\uffe8\024\uffe8\050\uffe8\061\uffe8" +
    "\140\uffe8\145\uffe8\203\uffe8\204\uffe8\207\uffe8\212\uffe8\213" +
    "\uffe8\214\uffe8\215\uffe8\001\002\000\004\012\u02a5\001\002" +
    "\000\006\021\074\022\076\001\002\000\040\002\uffe7\003" +
    "\uffe7\004\uffe7\024\uffe7\050\uffe7\061\uffe7\140\uffe7\145\uffe7" +
    "\203\uffe7\204\uffe7\207\uffe7\212\uffe7\213\uffe7\214\uffe7\215" +
    "\uffe7\001\002\000\016\015\u02a8\016\u0261\057\u025d\060\u025f" +
    "\247\u0262\250\u0260\001\002\000\010\007\u02ac\012\uffc2\020" +
    "\u0266\001\002\000\004\012\u02aa\001\002\000\006\021\074" +
    "\022\076\001\002\000\040\002\uffdd\003\uffdd\004\uffdd\024" +
    "\uffdd\050\uffdd\061\uffdd\140\uffdd\145\uffdd\203\uffdd\204\uffdd" +
    "\207\uffdd\212\uffdd\213\uffdd\214\uffdd\215\uffdd\001\002\000" +
    "\004\012\u02ad\001\002\000\006\021\074\022\076\001\002" +
    "\000\040\002\uffdc\003\uffdc\004\uffdc\024\uffdc\050\uffdc\061" +
    "\uffdc\140\uffdc\145\uffdc\203\uffdc\204\uffdc\207\uffdc\212\uffdc" +
    "\213\uffdc\214\uffdc\215\uffdc\001\002\000\004\011\u02b0\001" +
    "\002\000\016\015\u02b1\016\u0261\057\u025d\060\u025f\247\u0262" +
    "\250\u0260\001\002\000\010\007\u02b5\012\uffc2\020\u0266\001" +
    "\002\000\004\012\u02b3\001\002\000\006\021\074\022\076" +
    "\001\002\000\040\002\uffdf\003\uffdf\004\uffdf\024\uffdf\050" +
    "\uffdf\061\uffdf\140\uffdf\145\uffdf\203\uffdf\204\uffdf\207\uffdf" +
    "\212\uffdf\213\uffdf\214\uffdf\215\uffdf\001\002\000\004\012" +
    "\u02b6\001\002\000\006\021\074\022\076\001\002\000\040" +
    "\002\uffde\003\uffde\004\uffde\024\uffde\050\uffde\061\uffde\140" +
    "\uffde\145\uffde\203\uffde\204\uffde\207\uffde\212\uffde\213\uffde" +
    "\214\uffde\215\uffde\001\002\000\014\011\056\013\063\036" +
    "\062\205\061\206\057\001\002\000\010\007\u02bb\011\u02bc" +
    "\014\u02ba\001\002\000\004\007\u02da\001\002\000\004\011" +
    "\u02d2\001\002\000\014\011\056\013\063\036\062\205\061" +
    "\206\057\001\002\000\004\012\u02be\001\002\000\006\007" +
    "\u02c0\014\u02bf\001\002\000\004\007\u02c9\001\002\000\004" +
    "\011\u02c1\001\002\000\016\015\u02c2\016\u0261\057\u025d\060" +
    "\u025f\247\u0262\250\u0260\001\002\000\010\007\u02c6\012\uffc2" +
    "\020\u0266\001\002\000\004\012\u02c4\001\002\000\006\021" +
    "\074\022\076\001\002\000\040\002\uffd5\003\uffd5\004\uffd5" +
    "\024\uffd5\050\uffd5\061\uffd5\140\uffd5\145\uffd5\203\uffd5\204" +
    "\uffd5\207\uffd5\212\uffd5\213\uffd5\214\uffd5\215\uffd5\001\002" +
    "\000\004\012\u02c7\001\002\000\006\021\074\022\076\001" +
    "\002\000\040\002\uffd4\003\uffd4\004\uffd4\024\uffd4\050\uffd4" +
    "\061\uffd4\140\uffd4\145\uffd4\203\uffd4\204\uffd4\207\uffd4\212" +
    "\uffd4\213\uffd4\214\uffd4\215\uffd4\001\002\000\004\011\u02ca" +
    "\001\002\000\016\015\u02cb\016\u0261\057\u025d\060\u025f\247" +
    "\u0262\250\u0260\001\002\000\010\007\u02cf\012\uffc2\020\u0266" +
    "\001\002\000\004\012\u02cd\001\002\000\006\021\074\022" +
    "\076\001\002\000\040\002\uffd7\003\uffd7\004\uffd7\024\uffd7" +
    "\050\uffd7\061\uffd7\140\uffd7\145\uffd7\203\uffd7\204\uffd7\207" +
    "\uffd7\212\uffd7\213\uffd7\214\uffd7\215\uffd7\001\002\000\004" +
    "\012\u02d0\001\002\000\006\021\074\022\076\001\002\000" +
    "\040\002\uffd6\003\uffd6\004\uffd6\024\uffd6\050\uffd6\061\uffd6" +
    "\140\uffd6\145\uffd6\203\uffd6\204\uffd6\207\uffd6\212\uffd6\213" +
    "\uffd6\214\uffd6\215\uffd6\001\002\000\016\015\u02d3\016\u0261" +
    "\057\u025d\060\u025f\247\u0262\250\u0260\001\002\000\010\007" +
    "\u02d7\012\uffc2\020\u0266\001\002\000\004\012\u02d5\001\002" +
    "\000\006\021\074\022\076\001\002\000\040\002\uffcc\003" +
    "\uffcc\004\uffcc\024\uffcc\050\uffcc\061\uffcc\140\uffcc\145\uffcc" +
    "\203\uffcc\204\uffcc\207\uffcc\212\uffcc\213\uffcc\214\uffcc\215" +
    "\uffcc\001\002\000\004\012\u02d8\001\002\000\006\021\074" +
    "\022\076\001\002\000\040\002\uffcb\003\uffcb\004\uffcb\024" +
    "\uffcb\050\uffcb\061\uffcb\140\uffcb\145\uffcb\203\uffcb\204\uffcb" +
    "\207\uffcb\212\uffcb\213\uffcb\214\uffcb\215\uffcb\001\002\000" +
    "\004\011\u02db\001\002\000\016\015\u02dc\016\u0261\057\u025d" +
    "\060\u025f\247\u0262\250\u0260\001\002\000\010\007\u02e0\012" +
    "\uffc2\020\u0266\001\002\000\004\012\u02de\001\002\000\006" +
    "\021\074\022\076\001\002\000\040\002\uffce\003\uffce\004" +
    "\uffce\024\uffce\050\uffce\061\uffce\140\uffce\145\uffce\203\uffce" +
    "\204\uffce\207\uffce\212\uffce\213\uffce\214\uffce\215\uffce\001" +
    "\002\000\004\012\u02e1\001\002\000\006\021\074\022\076" +
    "\001\002\000\040\002\uffcd\003\uffcd\004\uffcd\024\uffcd\050" +
    "\uffcd\061\uffcd\140\uffcd\145\uffcd\203\uffcd\204\uffcd\207\uffcd" +
    "\212\uffcd\213\uffcd\214\uffcd\215\uffcd\001\002\000\004\247" +
    "\u02e6\001\002\000\042\005\ufe18\010\u02e5\011\ufe18\013\ufe18" +
    "\020\ufe18\025\ufe18\036\ufe18\054\ufe18\061\ufe18\107\ufe18\110" +
    "\ufe18\171\ufe18\205\ufe18\206\ufe18\244\ufe18\245\ufe18\001\002" +
    "\000\040\005\ufe17\011\ufe17\013\ufe17\020\ufe17\025\ufe17\036" +
    "\ufe17\054\ufe17\061\ufe17\107\ufe17\110\ufe17\171\ufe17\205\ufe17" +
    "\206\ufe17\244\ufe17\245\ufe17\001\002\000\004\012\u02e7\001" +
    "\002\000\042\005\ufe1a\010\u02e8\011\ufe1a\013\ufe1a\020\ufe1a" +
    "\025\ufe1a\036\ufe1a\054\ufe1a\061\ufe1a\107\ufe1a\110\ufe1a\171" +
    "\ufe1a\205\ufe1a\206\ufe1a\244\ufe1a\245\ufe1a\001\002\000\040" +
    "\005\ufe19\011\ufe19\013\ufe19\020\ufe19\025\ufe19\036\ufe19\054" +
    "\ufe19\061\ufe19\107\ufe19\110\ufe19\171\ufe19\205\ufe19\206\ufe19" +
    "\244\ufe19\245\ufe19\001\002\000\010\007\u02ea\011\u02ec\014" +
    "\u02eb\001\002\000\006\011\u030f\015\u030e\001\002\000\004" +
    "\007\u0305\001\002\000\014\011\056\013\063\036\062\205" +
    "\061\206\057\001\002\000\004\012\u02ee\001\002\000\010" +
    "\007\u02f1\014\u02f0\015\u02ef\001\002\000\004\007\u0303\001" +
    "\002\000\004\007\u02fa\001\002\000\004\011\u02f2\001\002" +
    "\000\016\015\u02f3\016\u0261\057\u025d\060\u025f\247\u0262\250" +
    "\u0260\001\002\000\010\007\u02f7\012\uffc2\020\u0266\001\002" +
    "\000\004\012\u02f5\001\002\000\006\021\074\022\076\001" +
    "\002\000\040\002\uffe2\003\uffe2\004\uffe2\024\uffe2\050\uffe2" +
    "\061\uffe2\140\uffe2\145\uffe2\203\uffe2\204\uffe2\207\uffe2\212" +
    "\uffe2\213\uffe2\214\uffe2\215\uffe2\001\002\000\004\012\u02f8" +
    "\001\002\000\006\021\074\022\076\001\002\000\040\002" +
    "\uffe1\003\uffe1\004\uffe1\024\uffe1\050\uffe1\061\uffe1\140\uffe1" +
    "\145\uffe1\203\uffe1\204\uffe1\207\uffe1\212\uffe1\213\uffe1\214" +
    "\uffe1\215\uffe1\001\002\000\004\011\u02fb\001\002\000\016" +
    "\015\u02fc\016\u0261\057\u025d\060\u025f\247\u0262\250\u0260\001" +
    "\002\000\010\007\u0300\012\uffc2\020\u0266\001\002\000\004" +
    "\012\u02fe\001\002\000\006\021\074\022\076\001\002\000" +
    "\040\002\uffe4\003\uffe4\004\uffe4\024\uffe4\050\uffe4\061\uffe4" +
    "\140\uffe4\145\uffe4\203\uffe4\204\uffe4\207\uffe4\212\uffe4\213" +
    "\uffe4\214\uffe4\215\uffe4\001\002\000\004\012\u0301\001\002" +
    "\000\006\021\074\022\076\001\002\000\040\002\uffe3\003" +
    "\uffe3\004\uffe3\024\uffe3\050\uffe3\061\uffe3\140\uffe3\145\uffe3" +
    "\203\uffe3\204\uffe3\207\uffe3\212\uffe3\213\uffe3\214\uffe3\215" +
    "\uffe3\001\002\000\006\021\074\022\076\001\002\000\040" +
    "\002\uffe0\003\uffe0\004\uffe0\024\uffe0\050\uffe0\061\uffe0\140" +
    "\uffe0\145\uffe0\203\uffe0\204\uffe0\207\uffe0\212\uffe0\213\uffe0" +
    "\214\uffe0\215\uffe0\001\002\000\004\011\u0306\001\002\000" +
    "\016\015\u0307\016\u0261\057\u025d\060\u025f\247\u0262\250\u0260" +
    "\001\002\000\010\007\u030b\012\uffc2\020\u0266\001\002\000" +
    "\004\012\u0309\001\002\000\006\021\074\022\076\001\002" +
    "\000\040\002\uffdb\003\uffdb\004\uffdb\024\uffdb\050\uffdb\061" +
    "\uffdb\140\uffdb\145\uffdb\203\uffdb\204\uffdb\207\uffdb\212\uffdb" +
    "\213\uffdb\214\uffdb\215\uffdb\001\002\000\004\012\u030c\001" +
    "\002\000\006\021\074\022\076\001\002\000\040\002\uffda" +
    "\003\uffda\004\uffda\024\uffda\050\uffda\061\uffda\140\uffda\145" +
    "\uffda\203\uffda\204\uffda\207\uffda\212\uffda\213\uffda\214\uffda" +
    "\215\uffda\001\002\000\004\007\u0313\001\002\000\016\015" +
    "\u0264\016\u0261\057\u025d\060\u025f\247\u0262\250\u0260\001\002" +
    "\000\004\012\u0311\001\002\000\006\021\074\022\076\001" +
    "\002\000\040\002\uffd9\003\uffd9\004\uffd9\024\uffd9\050\uffd9" +
    "\061\uffd9\140\uffd9\145\uffd9\203\uffd9\204\uffd9\207\uffd9\212" +
    "\uffd9\213\uffd9\214\uffd9\215\uffd9\001\002\000\006\021\074" +
    "\022\076\001\002\000\040\002\uffd8\003\uffd8\004\uffd8\024" +
    "\uffd8\050\uffd8\061\uffd8\140\uffd8\145\uffd8\203\uffd8\204\uffd8" +
    "\207\uffd8\212\uffd8\213\uffd8\214\uffd8\215\uffd8\001\002\000" +
    "\004\002\uffea\001\002\000\004\002\ufff3\001\002\000\004" +
    "\002\ufff4\001\002\000\004\162\u031b\001\002\000\006\021" +
    "\074\022\076\001\002\000\040\002\ufe33\003\ufe33\004\ufe33" +
    "\024\ufe33\050\ufe33\061\ufe33\140\ufe33\145\ufe33\203\ufe33\204" +
    "\ufe33\207\ufe33\212\ufe33\213\ufe33\214\ufe33\215\ufe33\001\002" +
    "\000\034\046\ufde2\216\u031e\217\u031d\220\ufde2\221\ufde2\222" +
    "\ufde2\223\ufde2\224\ufde2\225\ufde2\226\ufde2\227\ufde2\230\ufde2" +
    "\231\ufde2\001\002\000\030\046\ufe30\220\ufe30\221\ufe30\222" +
    "\ufe30\223\ufe30\224\ufe30\225\ufe30\226\ufe30\227\ufe30\230\ufe30" +
    "\231\ufe30\001\002\000\030\046\ufe31\220\ufe31\221\ufe31\222" +
    "\ufe31\223\ufe31\224\ufe31\225\ufe31\226\ufe31\227\ufe31\230\ufe31" +
    "\231\ufe31\001\002\000\030\046\ufe32\220\ufe32\221\ufe32\222" +
    "\ufe32\223\ufe32\224\ufe32\225\ufe32\226\ufe32\227\ufe32\230\ufe32" +
    "\231\ufe32\001\002\000\030\046\ufde2\220\u0323\221\u0321\222" +
    "\ufde2\223\ufde2\224\ufde2\225\ufde2\226\ufde2\227\ufde2\230\ufde2" +
    "\231\ufde2\001\002\000\024\046\ufe2d\222\ufe2d\223\ufe2d\224" +
    "\ufe2d\225\ufe2d\226\ufe2d\227\ufe2d\230\ufe2d\231\ufe2d\001\002" +
    "\000\024\046\ufe2e\222\ufe2e\223\ufe2e\224\ufe2e\225\ufe2e\226" +
    "\ufe2e\227\ufe2e\230\ufe2e\231\ufe2e\001\002\000\024\046\ufde2" +
    "\222\u0325\223\u0326\224\u0328\225\u0329\226\ufde2\227\ufde2\230" +
    "\ufde2\231\ufde2\001\002\000\024\046\ufe2f\222\ufe2f\223\ufe2f" +
    "\224\ufe2f\225\ufe2f\226\ufe2f\227\ufe2f\230\ufe2f\231\ufe2f\001" +
    "\002\000\014\046\ufe28\226\ufe28\227\ufe28\230\ufe28\231\ufe28" +
    "\001\002\000\014\046\ufe2c\226\ufe2c\227\ufe2c\230\ufe2c\231" +
    "\ufe2c\001\002\000\014\046\ufe2b\226\ufe2b\227\ufe2b\230\ufe2b" +
    "\231\ufe2b\001\002\000\014\046\ufde2\226\u032e\227\u032d\230" +
    "\u032c\231\ufde2\001\002\000\014\046\ufe2a\226\ufe2a\227\ufe2a" +
    "\230\ufe2a\231\ufe2a\001\002\000\014\046\ufe29\226\ufe29\227" +
    "\ufe29\230\ufe29\231\ufe29\001\002\000\006\046\ufe24\231\ufe24" +
    "\001\002\000\006\046\ufde2\231\u0331\001\002\000\006\046" +
    "\ufe25\231\ufe25\001\002\000\006\046\ufe26\231\ufe26\001\002" +
    "\000\006\046\ufe27\231\ufe27\001\002\000\004\046\ufe22\001" +
    "\002\000\004\046\u0332\001\002\000\004\046\ufe23\001\002" +
    "\000\004\061\024\001\002\000\042\002\ufde2\003\ufde2\004" +
    "\ufde2\024\ufde2\046\u0336\050\ufde2\061\ufde2\140\ufde2\145\ufde2" +
    "\203\ufde2\204\ufde2\207\ufde2\212\ufde2\213\ufde2\214\ufde2\215" +
    "\ufde2\001\002\000\040\002\ufe20\003\ufe20\004\ufe20\024\ufe20" +
    "\050\ufe20\061\ufe20\140\ufe20\145\ufe20\203\ufe20\204\ufe20\207" +
    "\ufe20\212\ufe20\213\ufe20\214\ufe20\215\ufe20\001\002\000\040" +
    "\002\ufe34\003\ufe34\004\ufe34\024\ufe34\050\ufe34\061\ufe34\140" +
    "\ufe34\145\ufe34\203\ufe34\204\ufe34\207\ufe34\212\ufe34\213\ufe34" +
    "\214\ufe34\215\ufe34\001\002\000\004\050\u0337\001\002\000" +
    "\042\002\ufde2\003\ufde2\004\ufde2\024\ufde2\050\ufde2\061\ufde2" +
    "\140\ufde2\145\ufde2\203\ufde2\204\ufde2\207\ufde2\212\ufde2\213" +
    "\ufde2\214\ufde2\215\ufde2\243\u033a\001\002\000\040\002\ufe1e" +
    "\003\ufe1e\004\ufe1e\024\ufe1e\050\ufe1e\061\ufe1e\140\ufe1e\145" +
    "\ufe1e\203\ufe1e\204\ufe1e\207\ufe1e\212\ufe1e\213\ufe1e\214\ufe1e" +
    "\215\ufe1e\001\002\000\040\002\ufe21\003\ufe21\004\ufe21\024" +
    "\ufe21\050\ufe21\061\ufe21\140\ufe21\145\ufe21\203\ufe21\204\ufe21" +
    "\207\ufe21\212\ufe21\213\ufe21\214\ufe21\215\ufe21\001\002\000" +
    "\004\013\u033c\001\002\000\040\002\ufe1f\003\ufe1f\004\ufe1f" +
    "\024\ufe1f\050\ufe1f\061\ufe1f\140\ufe1f\145\ufe1f\203\ufe1f\204" +
    "\ufe1f\207\ufe1f\212\ufe1f\213\ufe1f\214\ufe1f\215\ufe1f\001\002" +
    "\000\042\002\ufde2\003\ufde2\004\ufde2\020\u033f\024\ufde2\050" +
    "\ufde2\061\ufde2\140\ufde2\145\ufde2\203\ufde2\204\ufde2\207\ufde2" +
    "\212\ufde2\213\ufde2\214\ufde2\215\ufde2\001\002\000\040\002" +
    "\ufe1d\003\ufe1d\004\ufe1d\024\ufe1d\050\ufe1d\061\ufe1d\140\ufe1d" +
    "\145\ufe1d\203\ufe1d\204\ufe1d\207\ufe1d\212\ufe1d\213\ufe1d\214" +
    "\ufe1d\215\ufe1d\001\002\000\040\002\ufe1b\003\ufe1b\004\ufe1b" +
    "\024\ufe1b\050\ufe1b\061\ufe1b\140\ufe1b\145\ufe1b\203\ufe1b\204" +
    "\ufe1b\207\ufe1b\212\ufe1b\213\ufe1b\214\ufe1b\215\ufe1b\001\002" +
    "\000\004\013\u0340\001\002\000\042\002\ufde2\003\ufde2\004" +
    "\ufde2\020\u033f\024\ufde2\050\ufde2\061\ufde2\140\ufde2\145\ufde2" +
    "\203\ufde2\204\ufde2\207\ufde2\212\ufde2\213\ufde2\214\ufde2\215" +
    "\ufde2\001\002\000\040\002\ufe1c\003\ufe1c\004\ufe1c\024\ufe1c" +
    "\050\ufe1c\061\ufe1c\140\ufe1c\145\ufe1c\203\ufe1c\204\ufe1c\207" +
    "\ufe1c\212\ufe1c\213\ufe1c\214\ufe1c\215\ufe1c\001\002\000\004" +
    "\002\ufff0\001\002\000\004\002\ufffc\001\002\000\040\002" +
    "\uffc6\003\uffc6\004\uffc6\024\uffc6\050\uffc6\061\uffc6\140\uffc6" +
    "\145\uffc6\203\uffc6\204\uffc6\207\uffc6\212\uffc6\213\uffc6\214" +
    "\uffc6\215\uffc6\001\002\000\004\002\ufff7\001\002\000\004" +
    "\002\ufff5\001\002\000\004\003\u0427\001\002\000\006\005" +
    "\u041d\025\u037c\001\002\000\042\005\ufde2\006\u024c\011\056" +
    "\013\063\020\ufde2\025\ufde2\036\062\054\u0352\061\u0347\107" +
    "\u034e\110\u0353\171\u0351\205\061\206\057\244\u034f\245\u034a" +
    "\001\002\000\004\011\u03ff\001\002\000\042\005\ufde2\006" +
    "\u024c\011\056\013\063\020\ufde2\025\ufde2\036\062\054\u0352" +
    "\061\u0347\107\u034e\110\u0353\171\u0351\205\061\206\057\244" +
    "\u034f\245\u034a\001\002\000\040\005\ufde2\011\056\013\063" +
    "\020\ufde2\025\ufde2\036\062\054\u0352\061\u0347\107\u034e\110" +
    "\u0353\171\u0351\205\061\206\057\244\u034f\245\u034a\001\002" +
    "\000\006\021\074\022\076\001\002\000\004\011\u0376\001" +
    "\002\000\004\011\u0372\001\002\000\010\005\uff6f\020\uff6f" +
    "\025\uff6f\001\002\000\004\011\u036e\001\002\000\006\005" +
    "\uff85\025\uff85\001\002\000\004\011\u0360\001\002\000\010" +
    "\005\uff82\020\u035e\025\uff82\001\002\000\014\005\uff84\013" +
    "\u0358\020\u0357\025\uff84\034\u0356\001\002\000\004\013\u035d" +
    "\001\002\000\040\005\ufde2\011\056\013\063\020\ufde2\025" +
    "\ufde2\036\062\054\u0352\061\u0347\107\u034e\110\u0353\171\u0351" +
    "\205\061\206\057\244\u034f\245\u034a\001\002\000\042\005" +
    "\ufe7c\013\ufe7c\020\ufe7c\021\ufe7c\022\ufe7c\025\ufe7c\027\ufe7c" +
    "\031\ufe7c\032\ufe7c\033\ufe7c\034\ufe7c\035\ufe7c\044\ufe7c\064" +
    "\ufe7c\066\ufe7c\106\ufe7c\001\002\000\010\005\uff83\020\u035a" +
    "\025\uff83\001\002\000\040\005\ufde2\011\056\013\063\020" +
    "\ufde2\025\ufde2\036\062\054\u0352\061\u0347\107\u034e\110\u0353" +
    "\171\u0351\205\061\206\057\244\u034f\245\u034a\001\002\000" +
    "\006\005\uff80\025\uff80\001\002\000\006\005\uff81\025\uff81" +
    "\001\002\000\042\005\ufe7d\013\ufe7d\020\ufe7d\021\ufe7d\022" +
    "\ufe7d\025\ufe7d\027\ufe7d\031\ufe7d\032\ufe7d\033\ufe7d\034\ufe7d" +
    "\035\ufe7d\044\ufe7d\064\ufe7d\066\ufe7d\106\ufe7d\001\002\000" +
    "\040\005\ufde2\011\056\013\063\020\ufde2\025\ufde2\036\062" +
    "\054\u0352\061\u0347\107\u034e\110\u0353\171\u0351\205\061\206" +
    "\057\244\u034f\245\u034a\001\002\000\006\005\uff7f\025\uff7f" +
    "\001\002\000\024\011\ufde2\013\ufde2\036\ufde2\054\u0366\062" +
    "\u0363\063\u0361\205\ufde2\206\ufde2\247\u0365\001\002\000\014" +
    "\011\uff6d\013\uff6d\036\uff6d\205\uff6d\206\uff6d\001\002\000" +
    "\014\011\uff6c\013\uff6c\036\uff6c\205\uff6c\206\uff6c\001\002" +
    "\000\014\011\uff6e\013\uff6e\036\uff6e\205\uff6e\206\uff6e\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\004\012\u0369\001\002\000\004\012\u0367\001" +
    "\002\000\014\005\uff78\013\u0358\020\uff78\025\uff78\034\u0356" +
    "\001\002\000\010\005\uff79\020\uff79\025\uff79\001\002\000" +
    "\014\005\uff76\013\u0358\020\uff76\025\uff76\034\u0356\001\002" +
    "\000\010\005\uff77\020\uff77\025\uff77\001\002\000\004\012" +
    "\u036c\001\002\000\014\005\uff7a\013\u0358\020\uff7a\025\uff7a" +
    "\034\u0356\001\002\000\010\005\uff7b\020\uff7b\025\uff7b\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\004\012\u0370\001\002\000\014\005\uff72\013" +
    "\u0358\020\uff72\025\uff72\034\u0356\001\002\000\010\005\uff73" +
    "\020\uff73\025\uff73\001\002\000\014\011\056\013\063\036" +
    "\062\205\061\206\057\001\002\000\004\012\u0374\001\002" +
    "\000\014\005\uff74\013\u0358\020\uff74\025\uff74\034\u0356\001" +
    "\002\000\010\005\uff75\020\uff75\025\uff75\001\002\000\014" +
    "\011\056\013\063\036\062\205\061\206\057\001\002\000" +
    "\004\012\u0378\001\002\000\014\005\uff7c\013\u0358\020\uff7c" +
    "\025\uff7c\034\u0356\001\002\000\010\005\uff7d\020\uff7d\025" +
    "\uff7d\001\002\000\046\002\uff86\003\uff86\004\uff86\021\uff86" +
    "\022\uff86\024\uff86\046\uff86\050\uff86\061\uff86\140\uff86\145" +
    "\uff86\203\uff86\204\uff86\207\uff86\212\uff86\213\uff86\214\uff86" +
    "\215\uff86\001\002\000\006\005\u037e\025\u037c\001\002\000" +
    "\014\011\056\013\063\036\062\205\061\206\057\001\002" +
    "\000\014\021\ufde2\022\ufde2\064\ufde2\066\ufde2\106\274\001" +
    "\002\000\004\025\u037c\001\002\000\014\021\ufde2\022\ufde2" +
    "\064\ufde2\066\ufde2\106\274\001\002\000\012\021\ufde2\022" +
    "\ufde2\064\u0383\066\ufde2\001\002\000\010\021\uff6a\022\uff6a" +
    "\066\uff6a\001\002\000\010\021\ufde2\022\ufde2\066\373\001" +
    "\002\000\004\065\u0384\001\002\000\014\011\056\013\063" +
    "\036\062\205\061\206\057\001\002\000\012\021\ufde2\022" +
    "\ufde2\066\ufde2\067\u0388\001\002\000\010\021\uff68\022\uff68" +
    "\066\uff68\001\002\000\010\021\uff6b\022\uff6b\066\uff6b\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\010\021\uff69\022\uff69\066\uff69\001\002\000" +
    "\010\037\u038e\075\u038c\076\u038b\001\002\000\012\057\uff65" +
    "\060\uff65\247\uff65\250\uff65\001\002\000\012\057\uff66\060" +
    "\uff66\247\uff66\250\uff66\001\002\000\012\057\u025d\060\u025f" +
    "\247\u0262\250\u0260\001\002\000\012\057\uff64\060\uff64\247" +
    "\uff64\250\uff64\001\002\000\010\021\uff67\022\uff67\066\uff67" +
    "\001\002\000\006\021\074\022\076\001\002\000\046\002" +
    "\uff90\003\uff90\004\uff90\021\uff90\022\uff90\024\uff90\046\uff90" +
    "\050\uff90\061\uff90\140\uff90\145\uff90\203\uff90\204\uff90\207" +
    "\uff90\212\uff90\213\uff90\214\uff90\215\uff90\001\002\000\012" +
    "\021\ufde2\022\ufde2\064\u0383\066\ufde2\001\002\000\010\021" +
    "\ufde2\022\ufde2\066\373\001\002\000\006\021\074\022\076" +
    "\001\002\000\046\002\uff8a\003\uff8a\004\uff8a\021\uff8a\022" +
    "\uff8a\024\uff8a\046\uff8a\050\uff8a\061\uff8a\140\uff8a\145\uff8a" +
    "\203\uff8a\204\uff8a\207\uff8a\212\uff8a\213\uff8a\214\uff8a\215" +
    "\uff8a\001\002\000\034\013\u0358\021\ufe86\022\ufe86\027\u039e" +
    "\031\u0399\032\u039c\033\u039a\034\u0356\044\u039b\045\u039d\064" +
    "\ufe86\066\ufe86\106\ufe86\001\002\000\020\013\u0358\021\ufe84" +
    "\022\ufe84\034\u0356\064\ufe84\066\ufe84\106\ufe84\001\002\000" +
    "\014\021\ufe85\022\ufe85\064\ufe85\066\ufe85\106\ufe85\001\002" +
    "\000\004\030\u03e3\001\002\000\004\030\u03e0\001\002\000" +
    "\004\011\u03d3\001\002\000\004\030\u03d0\001\002\000\004" +
    "\011\u03c3\001\002\000\004\026\u03bd\001\002\000\014\011" +
    "\056\013\063\036\062\205\061\206\057\001\002\000\014" +
    "\021\ufe87\022\ufe87\064\ufe87\066\ufe87\106\ufe87\001\002\000" +
    "\026\021\ufe88\022\ufe88\027\u039e\031\u0399\032\u039c\033\u039a" +
    "\044\u03a3\064\ufe88\066\ufe88\106\ufe88\001\002\000\014\021" +
    "\ufe89\022\ufe89\064\ufe89\066\ufe89\106\ufe89\001\002\000\004" +
    "\011\u03a4\001\002\000\014\011\056\013\063\036\062\205" +
    "\061\206\057\001\002\000\004\011\u03a6\001\002\000\014" +
    "\011\056\013\063\036\062\205\061\206\057\001\002\000" +
    "\004\012\u03a8\001\002\000\004\046\u03a9\001\002\000\004" +
    "\013\u03aa\001\002\000\004\047\u03ab\001\002\000\004\011" +
    "\u03ac\001\002\000\014\011\056\013\063\036\062\205\061" +
    "\206\057\001\002\000\004\012\u03ae\001\002\000\004\012" +
    "\u03af\001\002\000\020\013\ufe81\021\ufe81\022\ufe81\034\ufe81" +
    "\064\ufe81\066\ufe81\106\ufe81\001\002\000\020\013\ufe83\021" +
    "\ufe83\022\ufe83\034\ufe83\064\ufe83\066\ufe83\106\ufe83\001\002" +
    "\000\010\013\u0358\034\u0356\035\u03b2\001\002\000\014\011" +
    "\056\013\063\036\062\205\061\206\057\001\002\000\004" +
    "\035\u03b4\001\002\000\014\011\056\013\063\036\062\205" +
    "\061\206\057\001\002\000\004\037\u03b6\001\002\000\014" +
    "\011\056\013\063\036\062\205\061\206\057\001\002\000" +
    "\024\021\ufe7b\022\ufe7b\027\u039e\031\u0399\032\u039c\033\u039a" +
    "\064\ufe7b\066\ufe7b\106\ufe7b\001\002\000\014\021\ufe7a\022" +
    "\ufe7a\064\ufe7a\066\ufe7a\106\ufe7a\001\002\000\004\037\u03ba" +
    "\001\002\000\014\011\056\013\063\036\062\205\061\206" +
    "\057\001\002\000\024\021\ufe79\022\ufe79\027\u039e\031\u0399" +
    "\032\u039c\033\u039a\064\ufe79\066\ufe79\106\ufe79\001\002\000" +
    "\014\021\ufe78\022\ufe78\064\ufe78\066\ufe78\106\ufe78\001\002" +
    "\000\024\011\ufe73\013\ufe73\036\ufe73\040\u03c0\041\u03be\042" +
    "\u03c2\043\u03c1\205\ufe73\206\ufe73\001\002\000\014\011\ufe6e" +
    "\013\ufe6e\036\ufe6e\205\ufe6e\206\ufe6e\001\002\000\014\011" +
    "\ufe77\013\ufe77\036\ufe77\205\ufe77\206\ufe77\001\002\000\014" +
    "\011\ufe6f\013\ufe6f\036\ufe6f\205\ufe6f\206\ufe6f\001\002\000" +
    "\014\011\ufe6c\013\ufe6c\036\ufe6c\205\ufe6c\206\ufe6c\001\002" +
    "\000\014\011\ufe6d\013\ufe6d\036\ufe6d\205\ufe6d\206\ufe6d\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\004\011\u03c5\001\002\000\014\011\056\013" +
    "\063\036\062\205\061\206\057\001\002\000\004\012\u03c7" +
    "\001\002\000\004\046\u03c8\001\002\000\004\013\u03c9\001" +
    "\002\000\004\047\u03ca\001\002\000\004\011\u03cb\001\002" +
    "\000\014\011\056\013\063\036\062\205\061\206\057\001" +
    "\002\000\004\012\u03cd\001\002\000\004\012\u03ce\001\002" +
    "\000\020\013\ufe7e\021\ufe7e\022\ufe7e\034\ufe7e\064\ufe7e\066" +
    "\ufe7e\106\ufe7e\001\002\000\020\013\ufe7f\021\ufe7f\022\ufe7f" +
    "\034\ufe7f\064\ufe7f\066\ufe7f\106\ufe7f\001\002\000\004\026" +
    "\u03d1\001\002\000\024\011\ufe70\013\ufe70\036\ufe70\040\u03c0" +
    "\041\u03be\042\u03c2\043\u03c1\205\ufe70\206\ufe70\001\002\000" +
    "\014\011\ufe74\013\ufe74\036\ufe74\205\ufe74\206\ufe74\001\002" +
    "\000\014\011\056\013\063\036\062\205\061\206\057\001" +
    "\002\000\004\011\u03d5\001\002\000\014\011\056\013\063" +
    "\036\062\205\061\206\057\001\002\000\004\012\u03d7\001" +
    "\002\000\004\046\u03d8\001\002\000\004\013\u03d9\001\002" +
    "\000\004\047\u03da\001\002\000\004\011\u03db\001\002\000" +
    "\014\011\056\013\063\036\062\205\061\206\057\001\002" +
    "\000\004\012\u03dd\001\002\000\004\012\u03de\001\002\000" +
    "\020\013\ufe80\021\ufe80\022\ufe80\034\ufe80\064\ufe80\066\ufe80" +
    "\106\ufe80\001\002\000\020\013\ufe82\021\ufe82\022\ufe82\034" +
    "\ufe82\064\ufe82\066\ufe82\106\ufe82\001\002\000\004\026\u03e1" +
    "\001\002\000\024\011\ufe72\013\ufe72\036\ufe72\040\u03c0\041" +
    "\u03be\042\u03c2\043\u03c1\205\ufe72\206\ufe72\001\002\000\014" +
    "\011\ufe76\013\ufe76\036\ufe76\205\ufe76\206\ufe76\001\002\000" +
    "\004\026\u03e4\001\002\000\024\011\ufe71\013\ufe71\036\ufe71" +
    "\040\u03c0\041\u03be\042\u03c2\043\u03c1\205\ufe71\206\ufe71\001" +
    "\002\000\014\011\ufe75\013\ufe75\036\ufe75\205\ufe75\206\ufe75" +
    "\001\002\000\006\005\u03f5\025\u037c\001\002\000\040\005" +
    "\ufde2\011\056\013\063\020\ufde2\025\ufde2\036\062\054\u0352" +
    "\061\u0347\107\u034e\110\u0353\171\u0351\205\061\206\057\244" +
    "\u034f\245\u034a\001\002\000\006\005\u03ea\025\u037c\001\002" +
    "\000\014\021\ufde2\022\ufde2\064\ufde2\066\ufde2\106\274\001" +
    "\002\000\004\025\u037c\001\002\000\014\021\ufde2\022\ufde2" +
    "\064\ufde2\066\ufde2\106\274\001\002\000\012\021\ufde2\022" +
    "\ufde2\064\u0383\066\ufde2\001\002\000\010\021\ufde2\022\ufde2" +
    "\066\373\001\002\000\006\021\074\022\076\001\002\000" +
    "\046\002\uff91\003\uff91\004\uff91\021\uff91\022\uff91\024\uff91" +
    "\046\uff91\050\uff91\061\uff91\140\uff91\145\uff91\203\uff91\204" +
    "\uff91\207\uff91\212\uff91\213\uff91\214\uff91\215\uff91\001\002" +
    "\000\012\021\ufde2\022\ufde2\064\u0383\066\ufde2\001\002\000" +
    "\010\021\ufde2\022\ufde2\066\373\001\002\000\006\021\074" +
    "\022\076\001\002\000\046\002\uff8b\003\uff8b\004\uff8b\021" +
    "\uff8b\022\uff8b\024\uff8b\046\uff8b\050\uff8b\061\uff8b\140\uff8b" +
    "\145\uff8b\203\uff8b\204\uff8b\207\uff8b\212\uff8b\213\uff8b\214" +
    "\uff8b\215\uff8b\001\002\000\014\021\ufde2\022\ufde2\064\ufde2" +
    "\066\ufde2\106\274\001\002\000\004\025\u037c\001\002\000" +
    "\014\021\ufde2\022\ufde2\064\ufde2\066\ufde2\106\274\001\002" +
    "\000\012\021\ufde2\022\ufde2\064\u0383\066\ufde2\001\002\000" +
    "\010\021\ufde2\022\ufde2\066\373\001\002\000\006\021\074" +
    "\022\076\001\002\000\046\002\uff8e\003\uff8e\004\uff8e\021" +
    "\uff8e\022\uff8e\024\uff8e\046\uff8e\050\uff8e\061\uff8e\140\uff8e" +
    "\145\uff8e\203\uff8e\204\uff8e\207\uff8e\212\uff8e\213\uff8e\214" +
    "\uff8e\215\uff8e\001\002\000\012\021\ufde2\022\ufde2\064\u0383" +
    "\066\ufde2\001\002\000\010\021\ufde2\022\ufde2\066\373\001" +
    "\002\000\006\021\074\022\076\001\002\000\046\002\uff88" +
    "\003\uff88\004\uff88\021\uff88\022\uff88\024\uff88\046\uff88\050" +
    "\uff88\061\uff88\140\uff88\145\uff88\203\uff88\204\uff88\207\uff88" +
    "\212\uff88\213\uff88\214\uff88\215\uff88\001\002\000\014\011" +
    "\056\013\063\036\062\205\061\206\057\001\002\000\004" +
    "\012\u0401\001\002\000\014\005\uff70\013\u0358\020\uff70\025" +
    "\uff70\034\u0356\001\002\000\010\005\uff71\020\uff71\025\uff71" +
    "\001\002\000\006\005\u0412\025\u037c\001\002\000\040\005" +
    "\ufde2\011\056\013\063\020\ufde2\025\ufde2\036\062\054\u0352" +
    "\061\u0347\107\u034e\110\u0353\171\u0351\205\061\206\057\244" +
    "\u034f\245\u034a\001\002\000\006\005\u0407\025\u037c\001\002" +
    "\000\014\021\ufde2\022\ufde2\064\ufde2\066\ufde2\106\274\001" +
    "\002\000\004\025\u037c\001\002\000\014\021\ufde2\022\ufde2" +
    "\064\ufde2\066\ufde2\106\274\001\002\000\012\021\ufde2\022" +
    "\ufde2\064\u0383\066\ufde2\001\002\000\010\021\ufde2\022\ufde2" +
    "\066\373\001\002\000\006\021\074\022\076\001\002\000" +
    "\046\002\uff92\003\uff92\004\uff92\021\uff92\022\uff92\024\uff92" +
    "\046\uff92\050\uff92\061\uff92\140\uff92\145\uff92\203\uff92\204" +
    "\uff92\207\uff92\212\uff92\213\uff92\214\uff92\215\uff92\001\002" +
    "\000\012\021\ufde2\022\ufde2\064\u0383\066\ufde2\001\002\000" +
    "\010\021\ufde2\022\ufde2\066\373\001\002\000\006\021\074" +
    "\022\076\001\002\000\046\002\uff8c\003\uff8c\004\uff8c\021" +
    "\uff8c\022\uff8c\024\uff8c\046\uff8c\050\uff8c\061\uff8c\140\uff8c" +
    "\145\uff8c\203\uff8c\204\uff8c\207\uff8c\212\uff8c\213\uff8c\214" +
    "\uff8c\215\uff8c\001\002\000\014\021\ufde2\022\ufde2\064\ufde2" +
    "\066\ufde2\106\274\001\002\000\004\025\u037c\001\002\000" +
    "\014\021\ufde2\022\ufde2\064\ufde2\066\ufde2\106\274\001\002" +
    "\000\012\021\ufde2\022\ufde2\064\u0383\066\ufde2\001\002\000" +
    "\010\021\ufde2\022\ufde2\066\373\001\002\000\006\021\074" +
    "\022\076\001\002\000\046\002\uff8f\003\uff8f\004\uff8f\021" +
    "\uff8f\022\uff8f\024\uff8f\046\uff8f\050\uff8f\061\uff8f\140\uff8f" +
    "\145\uff8f\203\uff8f\204\uff8f\207\uff8f\212\uff8f\213\uff8f\214" +
    "\uff8f\215\uff8f\001\002\000\012\021\ufde2\022\ufde2\064\u0383" +
    "\066\ufde2\001\002\000\010\021\ufde2\022\ufde2\066\373\001" +
    "\002\000\006\021\074\022\076\001\002\000\046\002\uff89" +
    "\003\uff89\004\uff89\021\uff89\022\uff89\024\uff89\046\uff89\050" +
    "\uff89\061\uff89\140\uff89\145\uff89\203\uff89\204\uff89\207\uff89" +
    "\212\uff89\213\uff89\214\uff89\215\uff89\001\002\000\014\021" +
    "\ufde2\022\ufde2\064\ufde2\066\ufde2\106\274\001\002\000\004" +
    "\025\u037c\001\002\000\014\021\ufde2\022\ufde2\064\ufde2\066" +
    "\ufde2\106\274\001\002\000\012\021\ufde2\022\ufde2\064\u0383" +
    "\066\ufde2\001\002\000\010\021\ufde2\022\ufde2\066\373\001" +
    "\002\000\006\021\074\022\076\001\002\000\046\002\uff8d" +
    "\003\uff8d\004\uff8d\021\uff8d\022\uff8d\024\uff8d\046\uff8d\050" +
    "\uff8d\061\uff8d\140\uff8d\145\uff8d\203\uff8d\204\uff8d\207\uff8d" +
    "\212\uff8d\213\uff8d\214\uff8d\215\uff8d\001\002\000\012\021" +
    "\ufde2\022\ufde2\064\u0383\066\ufde2\001\002\000\010\021\ufde2" +
    "\022\ufde2\066\373\001\002\000\006\021\074\022\076\001" +
    "\002\000\046\002\uff87\003\uff87\004\uff87\021\uff87\022\uff87" +
    "\024\uff87\046\uff87\050\uff87\061\uff87\140\uff87\145\uff87\203" +
    "\uff87\204\uff87\207\uff87\212\uff87\213\uff87\214\uff87\215\uff87" +
    "\001\002\000\006\005\uff7e\025\uff7e\001\002\000\004\002" +
    "\ufff2\001\002\000\006\021\074\022\076\001\002\000\014" +
    "\011\056\013\063\036\062\205\061\206\057\001\002\000" +
    "\020\011\056\013\063\021\074\022\076\036\062\205\061" +
    "\206\057\001\002\000\006\021\074\022\076\001\002\000" +
    "\040\002\ufe41\003\ufe41\004\ufe41\024\ufe41\050\ufe41\061\ufe41" +
    "\140\ufe41\145\ufe41\203\ufe41\204\ufe41\207\ufe41\212\ufe41\213" +
    "\ufe41\214\ufe41\215\ufe41\001\002\000\040\002\ufe40\003\ufe40" +
    "\004\ufe40\024\ufe40\050\ufe40\061\ufe40\140\ufe40\145\ufe40\203" +
    "\ufe40\204\ufe40\207\ufe40\212\ufe40\213\ufe40\214\ufe40\215\ufe40" +
    "\001\002\000\006\021\074\022\076\001\002\000\040\002" +
    "\ufe42\003\ufe42\004\ufe42\024\ufe42\050\ufe42\061\ufe42\140\ufe42" +
    "\145\ufe42\203\ufe42\204\ufe42\207\ufe42\212\ufe42\213\ufe42\214" +
    "\ufe42\215\ufe42\001\002\000\006\021\074\022\076\001\002" +
    "\000\040\002\ufe43\003\ufe43\004\ufe43\024\ufe43\050\ufe43\061" +
    "\ufe43\140\ufe43\145\ufe43\203\ufe43\204\ufe43\207\ufe43\212\ufe43" +
    "\213\ufe43\214\ufe43\215\ufe43\001\002\000\040\002\ufe3f\003" +
    "\ufe3f\004\ufe3f\024\ufe3f\050\ufe3f\061\ufe3f\140\ufe3f\145\ufe3f" +
    "\203\ufe3f\204\ufe3f\207\ufe3f\212\ufe3f\213\ufe3f\214\ufe3f\215" +
    "\ufe3f\001\002\000\004\002\uffee\001\002\000\004\002\uffeb" +
    "\001\002\000\004\002\ufff1\001\002\000\010\003\u049c\013" +
    "\u049e\062\u049b\001\002\000\010\003\u0490\013\u0491\142\u048f" +
    "\001\002\000\016\003\u0482\011\056\013\063\036\062\205" +
    "\061\206\057\001\002\000\016\003\u0440\011\056\013\063" +
    "\036\062\205\061\206\057\001\002\000\006\003\u043c\013" +
    "\u043d\001\002\000\006\021\074\022\076\001\002\000\006" +
    "\021\074\022\076\001\002\000\040\002\ufea8\003\ufea8\004" +
    "\ufea8\024\ufea8\050\ufea8\061\ufea8\140\ufea8\145\ufea8\203\ufea8" +
    "\204\ufea8\207\ufea8\212\ufea8\213\ufea8\214\ufea8\215\ufea8\001" +
    "\002\000\040\002\ufea7\003\ufea7\004\ufea7\024\ufea7\050\ufea7" +
    "\061\ufea7\140\ufea7\145\ufea7\203\ufea7\204\ufea7\207\ufea7\212" +
    "\ufea7\213\ufea7\214\ufea7\215\ufea7\001\002\000\006\021\074" +
    "\022\076\001\002\000\014\021\074\022\076\143\u0444\145" +
    "\u0446\203\u0442\001\002\000\004\144\u047e\001\002\000\076" +
    "\016\u0470\021\074\022\076\101\u046d\112\u0121\131\u046c\134" +
    "\u012f\146\u0127\147\u0123\150\u012b\151\u0130\152\u012e\153\u012d" +
    "\154\u0128\155\u0134\156\u0125\157\u0138\160\u0132\161\u0137\162" +
    "\u0129\163\u012c\164\u0136\165\u0126\166\u0122\167\u013a\170\u012a" +
    "\177\u0124\201\u0135\202\u0131\246\u0139\001\002\000\006\013" +
    "\u0450\111\u044f\001\002\000\040\002\ufec5\003\ufec5\004\ufec5" +
    "\024\ufec5\050\ufec5\061\ufec5\140\ufec5\145\ufec5\203\ufec5\204" +
    "\ufec5\207\ufec5\212\ufec5\213\ufec5\214\ufec5\215\ufec5\001\002" +
    "\000\010\013\u0449\111\u0448\144\u0447\001\002\000\004\013" +
    "\u044d\001\002\000\004\013\u044b\001\002\000\006\021\074" +
    "\022\076\001\002\000\040\002\ufebf\003\ufebf\004\ufebf\024" +
    "\ufebf\050\ufebf\061\ufebf\140\ufebf\145\ufebf\203\ufebf\204\ufebf" +
    "\207\ufebf\212\ufebf\213\ufebf\214\ufebf\215\ufebf\001\002\000" +
    "\006\021\074\022\076\001\002\000\040\002\ufebe\003\ufebe" +
    "\004\ufebe\024\ufebe\050\ufebe\061\ufebe\140\ufebe\145\ufebe\203" +
    "\ufebe\204\ufebe\207\ufebe\212\ufebe\213\ufebe\214\ufebe\215\ufebe" +
    "\001\002\000\006\021\074\022\076\001\002\000\040\002" +
    "\ufec0\003\ufec0\004\ufec0\024\ufec0\050\ufec0\061\ufec0\140\ufec0" +
    "\145\ufec0\203\ufec0\204\ufec0\207\ufec0\212\ufec0\213\ufec0\214" +
    "\ufec0\215\ufec0\001\002\000\004\013\u0468\001\002\000\064" +
    "\112\u0121\134\u012f\146\u0127\147\u0123\150\u012b\151\u0130\152" +
    "\u012e\153\u012d\154\u0128\155\u0134\156\u0125\157\u0138\160\u0132" +
    "\161\u0137\162\u0129\163\u012c\164\u0136\165\u0126\166\u0122\167" +
    "\u013a\170\u012a\177\u0124\201\u0135\202\u0131\246\u0139\001\002" +
    "\000\006\016\u0454\101\u0452\001\002\000\004\016\u0467\001" +
    "\002\000\010\021\074\022\076\111\u0455\001\002\000\010" +
    "\021\ufeab\022\ufeab\111\ufeab\001\002\000\004\013\u0457\001" +
    "\002\000\040\002\ufec4\003\ufec4\004\ufec4\024\ufec4\050\ufec4" +
    "\061\ufec4\140\ufec4\145\ufec4\203\ufec4\204\ufec4\207\ufec4\212" +
    "\ufec4\213\ufec4\214\ufec4\215\ufec4\001\002\000\010\113\u0459" +
    "\117\u045b\120\u0458\001\002\000\004\114\u0463\001\002\000" +
    "\004\114\u0460\001\002\000\006\021\074\022\076\001\002" +
    "\000\012\021\ufeb1\022\ufeb1\115\u045d\116\u045e\001\002\000" +
    "\006\021\ufeac\022\ufeac\001\002\000\006\021\ufeae\022\ufeae" +
    "\001\002\000\006\021\ufead\022\ufead\001\002\000\040\002" +
    "\ufec3\003\ufec3\004\ufec3\024\ufec3\050\ufec3\061\ufec3\140\ufec3" +
    "\145\ufec3\203\ufec3\204\ufec3\207\ufec3\212\ufec3\213\ufec3\214" +
    "\ufec3\215\ufec3\001\002\000\012\021\ufeb2\022\ufeb2\115\u0462" +
    "\116\u0461\001\002\000\006\021\ufeaf\022\ufeaf\001\002\000" +
    "\006\021\ufeb0\022\ufeb0\001\002\000\004\011\u0464\001\002" +
    "\000\004\013\u0465\001\002\000\004\012\u0466\001\002\000" +
    "\006\021\ufea9\022\ufea9\001\002\000\010\021\ufeaa\022\ufeaa" +
    "\111\ufeaa\001\002\000\014\021\074\022\076\113\u0459\117" +
    "\u045b\120\u0458\001\002\000\006\021\074\022\076\001\002" +
    "\000\040\002\ufec2\003\ufec2\004\ufec2\024\ufec2\050\ufec2\061" +
    "\ufec2\140\ufec2\145\ufec2\203\ufec2\204\ufec2\207\ufec2\212\ufec2" +
    "\213\ufec2\214\ufec2\215\ufec2\001\002\000\040\002\ufec1\003" +
    "\ufec1\004\ufec1\024\ufec1\050\ufec1\061\ufec1\140\ufec1\145\ufec1" +
    "\203\ufec1\204\ufec1\207\ufec1\212\ufec1\213\ufec1\214\ufec1\215" +
    "\ufec1\001\002\000\004\013\u047a\001\002\000\004\016\u0479" +
    "\001\002\000\006\021\074\022\076\001\002\000\004\013" +
    "\u0472\001\002\000\006\021\ufeb4\022\ufeb4\001\002\000\040" +
    "\002\ufec6\003\ufec6\004\ufec6\024\ufec6\050\ufec6\061\ufec6\140" +
    "\ufec6\145\ufec6\203\ufec6\204\ufec6\207\ufec6\212\ufec6\213\ufec6" +
    "\214\ufec6\215\ufec6\001\002\000\010\021\ufeb5\022\ufeb5\131" +
    "\u0473\001\002\000\004\013\u0474\001\002\000\012\016\u0476" +
    "\021\ufeb9\022\ufeb9\101\u0475\001\002\000\004\016\u0477\001" +
    "\002\000\006\021\ufebb\022\ufebb\001\002\000\006\021\ufeba" +
    "\022\ufeba\001\002\000\040\002\ufec7\003\ufec7\004\ufec7\024" +
    "\ufec7\050\ufec7\061\ufec7\140\ufec7\145\ufec7\203\ufec7\204\ufec7" +
    "\207\ufec7\212\ufec7\213\ufec7\214\ufec7\215\ufec7\001\002\000" +
    "\006\021\ufeb3\022\ufeb3\001\002\000\012\016\u047c\021\ufeb6" +
    "\022\ufeb6\101\u047b\001\002\000\004\016\u047d\001\002\000" +
    "\006\021\ufeb8\022\ufeb8\001\002\000\006\021\ufeb7\022\ufeb7" +
    "\001\002\000\004\013\u047f\001\002\000\100\012\ufebc\016" +
    "\ufebc\021\ufebc\022\ufebc\101\ufebc\112\ufebc\131\ufebc\134\ufebc" +
    "\146\ufebc\147\ufebc\150\ufebc\151\ufebc\152\ufebc\153\ufebc\154" +
    "\ufebc\155\ufebc\156\ufebc\157\ufebc\160\ufebc\161\ufebc\162\ufebc" +
    "\163\ufebc\164\ufebc\165\ufebc\166\ufebc\167\ufebc\170\ufebc\177" +
    "\ufebc\201\ufebc\202\ufebc\246\ufebc\001\002\000\040\002\ufebd" +
    "\003\ufebd\004\ufebd\024\ufebd\050\ufebd\061\ufebd\140\ufebd\145" +
    "\ufebd\203\ufebd\204\ufebd\207\ufebd\212\ufebd\213\ufebd\214\ufebd" +
    "\215\ufebd\001\002\000\006\011\u0486\034\u0485\001\002\000" +
    "\006\021\074\022\076\001\002\000\040\002\ufea0\003\ufea0" +
    "\004\ufea0\024\ufea0\050\ufea0\061\ufea0\140\ufea0\145\ufea0\203" +
    "\ufea0\204\ufea0\207\ufea0\212\ufea0\213\ufea0\214\ufea0\215\ufea0" +
    "\001\002\000\004\034\u048b\001\002\000\004\061\024\001" +
    "\002\000\004\203\u0442\001\002\000\004\012\u0488\001\002" +
    "\000\004\034\ufe9f\001\002\000\006\021\074\022\076\001" +
    "\002\000\040\002\ufea2\003\ufea2\004\ufea2\024\ufea2\050\ufea2" +
    "\061\ufea2\140\ufea2\145\ufea2\203\ufea2\204\ufea2\207\ufea2\212" +
    "\ufea2\213\ufea2\214\ufea2\215\ufea2\001\002\000\004\061\024" +
    "\001\002\000\006\021\074\022\076\001\002\000\040\002" +
    "\ufea1\003\ufea1\004\ufea1\024\ufea1\050\ufea1\061\ufea1\140\ufea1" +
    "\145\ufea1\203\ufea1\204\ufea1\207\ufea1\212\ufea1\213\ufea1\214" +
    "\ufea1\215\ufea1\001\002\000\006\131\u0493\141\u0495\001\002" +
    "\000\006\131\ufeca\141\ufeca\001\002\000\006\021\074\022" +
    "\076\001\002\000\006\131\ufecb\141\ufecb\001\002\000\040" +
    "\002\ufecc\003\ufecc\004\ufecc\024\ufecc\050\ufecc\061\ufecc\140" +
    "\ufecc\145\ufecc\203\ufecc\204\ufecc\207\ufecc\212\ufecc\213\ufecc" +
    "\214\ufecc\215\ufecc\001\002\000\004\013\u049a\001\002\000" +
    "\006\021\074\022\076\001\002\000\004\130\u0496\001\002" +
    "\000\004\037\u0497\001\002\000\004\013\u0498\001\002\000" +
    "\006\021\ufec9\022\ufec9\001\002\000\040\002\ufecd\003\ufecd" +
    "\004\ufecd\024\ufecd\050\ufecd\061\ufecd\140\ufecd\145\ufecd\203" +
    "\ufecd\204\ufecd\207\ufecd\212\ufecd\213\ufecd\214\ufecd\215\ufecd" +
    "\001\002\000\006\021\ufec8\022\ufec8\001\002\000\004\035" +
    "\ufea3\001\002\000\006\021\074\022\076\001\002\000\004" +
    "\035\u049f\001\002\000\004\035\ufea4\001\002\000\014\011" +
    "\056\013\063\036\062\205\061\206\057\001\002\000\006" +
    "\021\074\022\076\001\002\000\040\002\ufea6\003\ufea6\004" +
    "\ufea6\024\ufea6\050\ufea6\061\ufea6\140\ufea6\145\ufea6\203\ufea6" +
    "\204\ufea6\207\ufea6\212\ufea6\213\ufea6\214\ufea6\215\ufea6\001" +
    "\002\000\040\002\ufea5\003\ufea5\004\ufea5\024\ufea5\050\ufea5" +
    "\061\ufea5\140\ufea5\145\ufea5\203\ufea5\204\ufea5\207\ufea5\212" +
    "\ufea5\213\ufea5\214\ufea5\215\ufea5\001\002\000\004\025\u04b3" +
    "\001\002\000\006\021\074\022\076\001\002\000\014\011" +
    "\056\013\063\036\062\205\061\206\057\001\002\000\012" +
    "\014\u04a7\021\074\022\076\025\u037c\001\002\000\010\021" +
    "\074\022\076\025\u037c\001\002\000\010\021\074\022\076" +
    "\106\274\001\002\000\040\002\uffb4\003\uffb4\004\uffb4\024" +
    "\uffb4\050\uffb4\061\uffb4\140\uffb4\145\uffb4\203\uffb4\204\uffb4" +
    "\207\uffb4\212\uffb4\213\uffb4\214\uffb4\215\uffb4\001\002\000" +
    "\040\002\uffb8\003\uffb8\004\uffb8\024\uffb8\050\uffb8\061\uffb8" +
    "\140\uffb8\145\uffb8\203\uffb8\204\uffb8\207\uffb8\212\uffb8\213" +
    "\uffb8\214\uffb8\215\uffb8\001\002\000\006\021\074\022\076" +
    "\001\002\000\040\002\uffbc\003\uffbc\004\uffbc\024\uffbc\050" +
    "\uffbc\061\uffbc\140\uffbc\145\uffbc\203\uffbc\204\uffbc\207\uffbc" +
    "\212\uffbc\213\uffbc\214\uffbc\215\uffbc\001\002\000\040\002" +
    "\uffb6\003\uffb6\004\uffb6\024\uffb6\050\uffb6\061\uffb6\140\uffb6" +
    "\145\uffb6\203\uffb6\204\uffb6\207\uffb6\212\uffb6\213\uffb6\214" +
    "\uffb6\215\uffb6\001\002\000\010\021\074\022\076\106\274" +
    "\001\002\000\040\002\uffba\003\uffba\004\uffba\024\uffba\050" +
    "\uffba\061\uffba\140\uffba\145\uffba\203\uffba\204\uffba\207\uffba" +
    "\212\uffba\213\uffba\214\uffba\215\uffba\001\002\000\006\021" +
    "\074\022\076\001\002\000\040\002\uffbe\003\uffbe\004\uffbe" +
    "\024\uffbe\050\uffbe\061\uffbe\140\uffbe\145\uffbe\203\uffbe\204" +
    "\uffbe\207\uffbe\212\uffbe\213\uffbe\214\uffbe\215\uffbe\001\002" +
    "\000\040\002\uffb3\003\uffb3\004\uffb3\024\uffb3\050\uffb3\061" +
    "\uffb3\140\uffb3\145\uffb3\203\uffb3\204\uffb3\207\uffb3\212\uffb3" +
    "\213\uffb3\214\uffb3\215\uffb3\001\002\000\014\011\056\013" +
    "\063\036\062\205\061\206\057\001\002\000\012\014\u04b5" +
    "\021\074\022\076\025\u037c\001\002\000\010\021\074\022" +
    "\076\025\u037c\001\002\000\040\002\uffb5\003\uffb5\004\uffb5" +
    "\024\uffb5\050\uffb5\061\uffb5\140\uffb5\145\uffb5\203\uffb5\204" +
    "\uffb5\207\uffb5\212\uffb5\213\uffb5\214\uffb5\215\uffb5\001\002" +
    "\000\010\021\074\022\076\106\274\001\002\000\040\002" +
    "\uffb9\003\uffb9\004\uffb9\024\uffb9\050\uffb9\061\uffb9\140\uffb9" +
    "\145\uffb9\203\uffb9\204\uffb9\207\uffb9\212\uffb9\213\uffb9\214" +
    "\uffb9\215\uffb9\001\002\000\006\021\074\022\076\001\002" +
    "\000\040\002\uffbd\003\uffbd\004\uffbd\024\uffbd\050\uffbd\061" +
    "\uffbd\140\uffbd\145\uffbd\203\uffbd\204\uffbd\207\uffbd\212\uffbd" +
    "\213\uffbd\214\uffbd\215\uffbd\001\002\000\010\021\074\022" +
    "\076\106\274\001\002\000\040\002\uffb7\003\uffb7\004\uffb7" +
    "\024\uffb7\050\uffb7\061\uffb7\140\uffb7\145\uffb7\203\uffb7\204" +
    "\uffb7\207\uffb7\212\uffb7\213\uffb7\214\uffb7\215\uffb7\001\002" +
    "\000\040\002\uffbb\003\uffbb\004\uffbb\024\uffbb\050\uffbb\061" +
    "\uffbb\140\uffbb\145\uffbb\203\uffbb\204\uffbb\207\uffbb\212\uffbb" +
    "\213\uffbb\214\uffbb\215\uffbb\001\002\000\006\021\074\022" +
    "\076\001\002\000\040\002\uffbf\003\uffbf\004\uffbf\024\uffbf" +
    "\050\uffbf\061\uffbf\140\uffbf\145\uffbf\203\uffbf\204\uffbf\207" +
    "\uffbf\212\uffbf\213\uffbf\214\uffbf\215\uffbf\001\002\000\004" +
    "\002\ufff8\001\002\000\004\002\uffe9\001\002\000\014\011" +
    "\056\013\063\036\062\205\061\206\057\001\002\000\006" +
    "\021\074\022\076\001\002\000\004\051\u04c5\001\002\000" +
    "\014\011\056\013\063\036\062\205\061\206\057\001\002" +
    "\000\014\014\u04c7\021\074\022\076\025\u037c\106\274\001" +
    "\002\000\012\021\074\022\076\025\u037c\106\274\001\002" +
    "\000\010\021\074\022\076\106\274\001\002\000\040\002" +
    "\uffa3\003\uffa3\004\uffa3\024\uffa3\050\uffa3\061\uffa3\140\uffa3" +
    "\145\uffa3\203\uffa3\204\uffa3\207\uffa3\212\uffa3\213\uffa3\214" +
    "\uffa3\215\uffa3\001\002\000\006\021\074\022\076\001\002" +
    "\000\040\002\uffa4\003\uffa4\004\uffa4\024\uffa4\050\uffa4\061" +
    "\uffa4\140\uffa4\145\uffa4\203\uffa4\204\uffa4\207\uffa4\212\uffa4" +
    "\213\uffa4\214\uffa4\215\uffa4\001\002\000\040\002\uffab\003" +
    "\uffab\004\uffab\024\uffab\050\uffab\061\uffab\140\uffab\145\uffab" +
    "\203\uffab\204\uffab\207\uffab\212\uffab\213\uffab\214\uffab\215" +
    "\uffab\001\002\000\006\021\074\022\076\001\002\000\040" +
    "\002\uffac\003\uffac\004\uffac\024\uffac\050\uffac\061\uffac\140" +
    "\uffac\145\uffac\203\uffac\204\uffac\207\uffac\212\uffac\213\uffac" +
    "\214\uffac\215\uffac\001\002\000\040\002\uffa7\003\uffa7\004" +
    "\uffa7\024\uffa7\050\uffa7\061\uffa7\140\uffa7\145\uffa7\203\uffa7" +
    "\204\uffa7\207\uffa7\212\uffa7\213\uffa7\214\uffa7\215\uffa7\001" +
    "\002\000\010\021\074\022\076\106\274\001\002\000\006" +
    "\021\074\022\076\001\002\000\040\002\uffa8\003\uffa8\004" +
    "\uffa8\024\uffa8\050\uffa8\061\uffa8\140\uffa8\145\uffa8\203\uffa8" +
    "\204\uffa8\207\uffa8\212\uffa8\213\uffa8\214\uffa8\215\uffa8\001" +
    "\002\000\040\002\uffaf\003\uffaf\004\uffaf\024\uffaf\050\uffaf" +
    "\061\uffaf\140\uffaf\145\uffaf\203\uffaf\204\uffaf\207\uffaf\212" +
    "\uffaf\213\uffaf\214\uffaf\215\uffaf\001\002\000\006\021\074" +
    "\022\076\001\002\000\040\002\uffb0\003\uffb0\004\uffb0\024" +
    "\uffb0\050\uffb0\061\uffb0\140\uffb0\145\uffb0\203\uffb0\204\uffb0" +
    "\207\uffb0\212\uffb0\213\uffb0\214\uffb0\215\uffb0\001\002\000" +
    "\004\037\u04d8\001\002\000\014\014\uffa1\021\uffa1\022\uffa1" +
    "\025\uffa1\106\uffa1\001\002\000\030\011\u04dc\013\063\015" +
    "\u04db\016\u04da\036\062\057\u025d\060\u025f\205\061\206\057" +
    "\247\u0262\250\u0260\001\002\000\030\014\uff9b\020\u04f0\021" +
    "\uff9b\022\uff9b\025\uff9b\052\u04e4\053\u04e3\054\u04e6\055\u04e1" +
    "\056\u04e5\106\uff9b\001\002\000\016\014\uff9c\020\u04ee\021" +
    "\uff9c\022\uff9c\025\uff9c\106\uff9c\001\002\000\016\014\uff9d" +
    "\020\u04ec\021\uff9d\022\uff9d\025\uff9d\106\uff9d\001\002\000" +
    "\024\011\u04dc\013\063\036\062\057\u025d\060\u025f\205\061" +
    "\206\057\247\u0262\250\u0260\001\002\000\032\012\uff9a\014" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\025\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\106\uff9a\001\002\000\032\012" +
    "\uff99\014\uff99\020\uff99\021\uff99\022\uff99\025\uff99\052\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\106\uff99\001\002\000" +
    "\016\012\u04e2\052\u04e4\053\u04e3\054\u04e6\055\u04e1\056\u04e5" +
    "\001\002\000\016\012\103\052\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\001\002\000\024\011\u04dc\013\063\036\062" +
    "\057\u025d\060\u025f\205\061\206\057\247\u0262\250\u0260\001" +
    "\002\000\032\012\uff93\014\uff93\020\uff93\021\uff93\022\uff93" +
    "\025\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\106" +
    "\uff93\001\002\000\024\011\u04dc\013\063\036\062\057\u025d" +
    "\060\u025f\205\061\206\057\247\u0262\250\u0260\001\002\000" +
    "\024\011\u04dc\013\063\036\062\057\u025d\060\u025f\205\061" +
    "\206\057\247\u0262\250\u0260\001\002\000\024\011\u04dc\013" +
    "\063\036\062\057\u025d\060\u025f\205\061\206\057\247\u0262" +
    "\250\u0260\001\002\000\024\011\u04dc\013\063\036\062\057" +
    "\u025d\060\u025f\205\061\206\057\247\u0262\250\u0260\001\002" +
    "\000\032\012\uff96\014\uff96\020\uff96\021\uff96\022\uff96\025" +
    "\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\106\uff96" +
    "\001\002\000\032\012\uff94\014\uff94\020\uff94\021\uff94\022" +
    "\uff94\025\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\106\uff94\001\002\000\032\012\uff98\014\uff98\020\uff98\021" +
    "\uff98\022\uff98\025\uff98\052\uff98\053\uff98\054\u04e6\055\u04e1" +
    "\056\u04e5\106\uff98\001\002\000\032\012\uff97\014\uff97\020" +
    "\uff97\021\uff97\022\uff97\025\uff97\052\uff97\053\uff97\054\u04e6" +
    "\055\u04e1\056\u04e5\106\uff97\001\002\000\032\012\uff95\014" +
    "\uff95\020\uff95\021\uff95\022\uff95\025\uff95\052\uff95\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\106\uff95\001\002\000\014\011" +
    "\056\013\063\036\062\205\061\206\057\001\002\000\014" +
    "\014\uffa0\021\uffa0\022\uffa0\025\uffa0\106\uffa0\001\002\000" +
    "\014\011\056\013\063\036\062\205\061\206\057\001\002" +
    "\000\014\014\uff9f\021\uff9f\022\uff9f\025\uff9f\106\uff9f\001" +
    "\002\000\014\011\056\013\063\036\062\205\061\206\057" +
    "\001\002\000\014\014\uff9e\021\uff9e\022\uff9e\025\uff9e\106" +
    "\uff9e\001\002\000\040\002\uffa2\003\uffa2\004\uffa2\024\uffa2" +
    "\050\uffa2\061\uffa2\140\uffa2\145\uffa2\203\uffa2\204\uffa2\207" +
    "\uffa2\212\uffa2\213\uffa2\214\uffa2\215\uffa2\001\002\000\004" +
    "\051\u04c5\001\002\000\014\014\u04f5\021\074\022\076\025" +
    "\u037c\106\274\001\002\000\012\021\074\022\076\025\u037c" +
    "\106\274\001\002\000\010\021\074\022\076\106\274\001" +
    "\002\000\040\002\uffa5\003\uffa5\004\uffa5\024\uffa5\050\uffa5" +
    "\061\uffa5\140\uffa5\145\uffa5\203\uffa5\204\uffa5\207\uffa5\212" +
    "\uffa5\213\uffa5\214\uffa5\215\uffa5\001\002\000\006\021\074" +
    "\022\076\001\002\000\040\002\uffa6\003\uffa6\004\uffa6\024" +
    "\uffa6\050\uffa6\061\uffa6\140\uffa6\145\uffa6\203\uffa6\204\uffa6" +
    "\207\uffa6\212\uffa6\213\uffa6\214\uffa6\215\uffa6\001\002\000" +
    "\040\002\uffad\003\uffad\004\uffad\024\uffad\050\uffad\061\uffad" +
    "\140\uffad\145\uffad\203\uffad\204\uffad\207\uffad\212\uffad\213" +
    "\uffad\214\uffad\215\uffad\001\002\000\006\021\074\022\076" +
    "\001\002\000\040\002\uffae\003\uffae\004\uffae\024\uffae\050" +
    "\uffae\061\uffae\140\uffae\145\uffae\203\uffae\204\uffae\207\uffae" +
    "\212\uffae\213\uffae\214\uffae\215\uffae\001\002\000\010\021" +
    "\074\022\076\106\274\001\002\000\040\002\uffa9\003\uffa9" +
    "\004\uffa9\024\uffa9\050\uffa9\061\uffa9\140\uffa9\145\uffa9\203" +
    "\uffa9\204\uffa9\207\uffa9\212\uffa9\213\uffa9\214\uffa9\215\uffa9" +
    "\001\002\000\006\021\074\022\076\001\002\000\040\002" +
    "\uffaa\003\uffaa\004\uffaa\024\uffaa\050\uffaa\061\uffaa\140\uffaa" +
    "\145\uffaa\203\uffaa\204\uffaa\207\uffaa\212\uffaa\213\uffaa\214" +
    "\uffaa\215\uffaa\001\002\000\040\002\uffb1\003\uffb1\004\uffb1" +
    "\024\uffb1\050\uffb1\061\uffb1\140\uffb1\145\uffb1\203\uffb1\204" +
    "\uffb1\207\uffb1\212\uffb1\213\uffb1\214\uffb1\215\uffb1\001\002" +
    "\000\006\021\074\022\076\001\002\000\040\002\uffb2\003" +
    "\uffb2\004\uffb2\024\uffb2\050\uffb2\061\uffb2\140\uffb2\145\uffb2" +
    "\203\uffb2\204\uffb2\207\uffb2\212\uffb2\213\uffb2\214\uffb2\215" +
    "\uffb2\001\002\000\004\002\001\001\002\000\016\003\u0507" +
    "\011\056\013\063\036\062\205\061\206\057\001\002\000" +
    "\006\021\074\022\076\001\002\000\006\021\074\022\076" +
    "\001\002\000\040\002\ufe8a\003\ufe8a\004\ufe8a\024\ufe8a\050" +
    "\ufe8a\061\ufe8a\140\ufe8a\145\ufe8a\203\ufe8a\204\ufe8a\207\ufe8a" +
    "\212\ufe8a\213\ufe8a\214\ufe8a\215\ufe8a\001\002\000\040\002" +
    "\ufe8b\003\ufe8b\004\ufe8b\024\ufe8b\050\ufe8b\061\ufe8b\140\ufe8b" +
    "\145\ufe8b\203\ufe8b\204\ufe8b\207\ufe8b\212\ufe8b\213\ufe8b\214" +
    "\ufe8b\215\ufe8b\001\002\000\004\002\ufffd\001\002\000\004" +
    "\002\ufff9\001\002\000\004\002\ufffa\001\002\000\006\021" +
    "\074\022\076\001\002\000\006\021\074\022\076\001\002" +
    "\000\040\002\ufe39\003\ufe39\004\ufe39\024\ufe39\050\ufe39\061" +
    "\ufe39\140\ufe39\145\ufe39\203\ufe39\204\ufe39\207\ufe39\212\ufe39" +
    "\213\ufe39\214\ufe39\215\ufe39\001\002\000\040\002\ufe38\003" +
    "\ufe38\004\ufe38\024\ufe38\050\ufe38\061\ufe38\140\ufe38\145\ufe38" +
    "\203\ufe38\204\ufe38\207\ufe38\212\ufe38\213\ufe38\214\ufe38\215" +
    "\ufe38\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u050e\000\064\002\010\003\050\004\006\012\030\021" +
    "\043\026\031\027\025\030\004\051\005\125\013\137\026" +
    "\140\044\142\024\145\035\146\022\147\016\150\032\152" +
    "\042\153\020\154\034\155\047\156\045\217\036\220\012" +
    "\221\017\001\001\000\004\011\u050d\001\001\000\062\003" +
    "\050\004\006\012\030\021\043\026\u050b\027\025\030\004" +
    "\051\005\125\013\137\026\140\044\142\024\145\035\146" +
    "\022\147\016\150\032\152\042\153\020\154\034\155\047" +
    "\156\045\217\036\220\012\221\017\001\001\000\062\003" +
    "\050\004\006\012\030\021\043\026\u050a\027\025\030\004" +
    "\051\005\125\013\137\026\140\044\142\024\145\035\146" +
    "\022\147\016\150\032\152\042\153\020\154\034\155\047" +
    "\156\045\217\036\220\012\221\017\001\001\000\062\003" +
    "\050\004\006\012\030\021\043\026\u0509\027\025\030\004" +
    "\051\005\125\013\137\026\140\044\142\024\145\035\146" +
    "\022\147\016\150\032\152\042\153\020\154\034\155\047" +
    "\156\045\217\036\220\012\221\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\u04c1\011\u04c3\001\001" +
    "\000\062\003\050\004\006\012\030\021\043\026\u04c0\027" +
    "\025\030\004\051\005\125\013\137\026\140\044\142\024" +
    "\145\035\146\022\147\016\150\032\152\042\153\020\154" +
    "\034\155\047\156\045\217\036\220\012\221\017\001\001" +
    "\000\062\003\050\004\006\012\030\021\043\026\u04bf\027" +
    "\025\030\004\051\005\125\013\137\026\140\044\142\024" +
    "\145\035\146\022\147\016\150\032\152\042\153\020\154" +
    "\034\155\047\156\045\217\036\220\012\221\017\001\001" +
    "\000\004\007\u04a2\001\001\000\002\001\001\000\062\003" +
    "\050\004\006\012\030\021\043\026\u0435\027\025\030\004" +
    "\051\005\125\013\137\026\140\044\142\024\145\035\146" +
    "\022\147\016\150\032\152\042\153\020\154\034\155\047" +
    "\156\045\217\036\220\012\221\017\001\001\000\062\003" +
    "\050\004\006\012\030\021\043\026\u0434\027\025\030\004" +
    "\051\005\125\013\137\026\140\044\142\024\145\035\146" +
    "\022\147\016\150\032\152\042\153\020\154\034\155\047" +
    "\156\045\217\036\220\012\221\017\001\001\000\062\003" +
    "\050\004\006\012\030\021\043\026\u0433\027\025\030\004" +
    "\051\005\125\013\137\026\140\044\142\024\145\035\146" +
    "\022\147\016\150\032\152\042\153\020\154\034\155\047" +
    "\156\045\217\036\220\012\221\017\001\001\000\004\011" +
    "\u042b\001\001\000\062\003\050\004\006\012\030\021\043" +
    "\026\u0427\027\025\030\004\051\005\125\013\137\026\140" +
    "\044\142\024\145\035\146\022\147\016\150\032\152\042" +
    "\153\020\154\034\155\047\156\045\217\036\220\012\221" +
    "\017\001\001\000\014\007\u034b\011\u0354\027\u034f\044\u0347" +
    "\047\u0353\001\001\000\062\003\050\004\006\012\030\021" +
    "\043\026\u0345\027\025\030\004\051\005\125\013\137\026" +
    "\140\044\142\024\145\035\146\022\147\016\150\032\152" +
    "\042\153\020\154\034\155\047\156\045\217\036\220\012" +
    "\221\017\001\001\000\002\001\001\000\062\003\050\004" +
    "\006\012\030\021\043\026\u0344\027\025\030\004\051\005" +
    "\125\013\137\026\140\044\142\024\145\035\146\022\147" +
    "\016\150\032\152\042\153\020\154\034\155\047\156\045" +
    "\217\036\220\012\221\017\001\001\000\004\006\u0343\001" +
    "\001\000\062\003\050\004\006\012\030\021\043\026\u0342" +
    "\027\025\030\004\051\005\125\013\137\026\140\044\142" +
    "\024\145\035\146\022\147\016\150\032\152\042\153\020" +
    "\154\034\155\047\156\045\217\036\220\012\221\017\001" +
    "\001\000\002\001\001\000\062\003\050\004\006\012\030" +
    "\021\043\026\u0341\027\025\030\004\051\005\125\013\137" +
    "\026\140\044\142\024\145\035\146\022\147\016\150\032" +
    "\152\042\153\020\154\034\155\047\156\045\217\036\220" +
    "\012\221\017\001\001\000\004\011\u0317\001\001\000\062" +
    "\003\050\004\006\012\030\021\043\026\u0316\027\025\030" +
    "\004\051\005\125\013\137\026\140\044\142\024\145\035" +
    "\146\022\147\016\150\032\152\042\153\020\154\034\155" +
    "\047\156\045\217\036\220\012\221\017\001\001\000\062" +
    "\003\050\004\006\012\030\021\043\026\u0315\027\025\030" +
    "\004\051\005\125\013\137\026\140\044\142\024\145\035" +
    "\146\022\147\016\150\032\152\042\153\020\154\034\155" +
    "\047\156\045\217\036\220\012\221\017\001\001\000\062" +
    "\003\050\004\006\012\030\021\043\026\u0314\027\025\030" +
    "\004\051\005\125\013\137\026\140\044\142\024\145\035" +
    "\146\022\147\016\150\032\152\042\153\020\154\034\155" +
    "\047\156\045\217\036\220\012\221\017\001\001\000\006" +
    "\007\u024c\011\u024d\001\001\000\026\027\244\052\246\053" +
    "\253\054\245\075\237\076\252\077\254\105\236\170\240" +
    "\171\235\001\001\000\002\001\001\000\062\003\050\004" +
    "\006\012\030\021\043\026\125\027\025\030\004\051\005" +
    "\125\013\137\026\140\044\142\024\145\035\146\022\147" +
    "\016\150\032\152\042\153\020\154\034\155\047\156\045" +
    "\217\036\220\012\221\017\001\001\000\062\003\050\004" +
    "\006\012\030\021\043\026\124\027\025\030\004\051\005" +
    "\125\013\137\026\140\044\142\024\145\035\146\022\147" +
    "\016\150\032\152\042\153\020\154\034\155\047\156\045" +
    "\217\036\220\012\221\017\001\001\000\062\003\050\004" +
    "\006\012\030\021\043\026\123\027\025\030\004\051\005" +
    "\125\013\137\026\140\044\142\024\145\035\146\022\147" +
    "\016\150\032\152\042\153\020\154\034\155\047\156\045" +
    "\217\036\220\012\221\017\001\001\000\062\003\050\004" +
    "\006\012\030\021\043\026\122\027\025\030\004\051\005" +
    "\125\013\137\026\140\044\142\024\145\035\146\022\147" +
    "\016\150\032\152\042\153\020\154\034\155\047\156\045" +
    "\217\036\220\012\221\017\001\001\000\004\011\112\001" +
    "\001\000\062\003\050\004\006\012\030\021\043\026\106" +
    "\027\025\030\004\051\005\125\013\137\026\140\044\142" +
    "\024\145\035\146\022\147\016\150\032\152\042\153\020" +
    "\154\034\155\047\156\045\217\036\220\012\221\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\105" +
    "\001\001\000\004\011\103\001\001\000\004\011\057\001" +
    "\001\000\004\011\101\001\001\000\002\001\001\000\004" +
    "\006\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\121" +
    "\001\001\000\004\011\117\001\001\000\006\006\114\011" +
    "\115\001\001\000\004\006\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\116\001\001\000\002\001" +
    "\001\000\004\006\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\214\151\210\001\001" +
    "\000\006\011\150\135\200\001\001\000\006\011\150\135" +
    "\166\001\001\000\006\011\150\135\147\001\001\000\002" +
    "\001\001\000\004\006\144\001\001\000\002\001\001\000" +
    "\004\006\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\156\001\001\000\004\006\155\001\001\000" +
    "\002\001\001\000\004\011\152\001\001\000\002\001\001" +
    "\000\006\011\150\135\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\150\135\162\001\001\000\004\006" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\170\001\001\000\004\006\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\150\135\174\001\001\000\004\006\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\202" +
    "\001\001\000\004\006\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\150\135\206\001\001\000\004\006\207\001\001\000" +
    "\002\001\001\000\004\006\234\001\001\000\002\001\001" +
    "\000\004\006\224\001\001\000\002\001\001\000\004\006" +
    "\215\001\001\000\002\001\001\000\004\011\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\230\151" +
    "\231\001\001\000\004\006\233\001\001\000\004\006\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u0115\001\001\000\004\011\u0112\001" +
    "\001\000\004\006\u0111\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\255\144\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\264\001" +
    "\001\000\004\100\266\001\001\000\004\101\370\001\001" +
    "\000\006\027\267\103\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\274\027\272\001\001\000\002" +
    "\001\001\000\022\011\323\027\317\035\310\036\304\040" +
    "\321\041\315\042\314\043\306\001\001\000\006\027\275" +
    "\104\277\001\001\000\002\001\001\000\004\011\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\323\036\356\040\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\347\035\310\036\304\040\321\043\346" +
    "\001\001\000\004\037\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\323\040\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\323\035\310\036\304\040" +
    "\321\042\355\043\306\001\001\000\016\011\323\035\310" +
    "\036\304\040\321\042\354\043\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\323\035\310\036\304\040\321\043\361\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\323" +
    "\036\364\040\321\001\001\000\002\001\001\000\004\011" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\373\032\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\375\102\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\373\032\u0101\001\001\000\006\027\375\102\u0102" +
    "\001\001\000\002\001\001\000\006\034\u0106\213\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\213\u010b" +
    "\001\001\000\002\001\001\000\006\034\u0109\213\u0108\001" +
    "\001\000\004\213\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\u0114\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\u011f\027\u0118\112\u011b" +
    "\114\u0119\162\u011e\172\u011a\201\u011d\001\001\000\004\011" +
    "\u020e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\u0204\113\u0206\001\001\000\004\011" +
    "\u0203\001\001\000\004\173\u01df\001\001\000\002\001\001" +
    "\000\004\136\u0132\001\001\000\004\136\u01db\001\001\000" +
    "\004\136\u01da\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\136\u01d0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\u0143\122\u0145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\136\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u01be\001\001\000" +
    "\016\027\u014b\115\u0147\116\u0148\117\u0149\202\u0150\203\u014f" +
    "\001\001\000\006\027\u01a7\215\u01ba\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\120\u01b1\001\001\000\006" +
    "\027\255\144\u01ae\001\001\000\002\001\001\000\004\123" +
    "\u019d\001\001\000\004\011\u0196\001\001\000\010\027\u0179" +
    "\200\u0195\201\u017b\001\001\000\002\001\001\000\010\027" +
    "\u0179\200\u017a\201\u017b\001\001\000\006\027\u015b\107\u015d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\255\144\u0157\001\001" +
    "\000\002\001\001\000\004\011\u0159\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\110\u0170" +
    "\001\001\000\002\001\001\000\006\211\u0160\216\u015f\001" +
    "\001\000\006\027\u0164\212\u016e\001\001\000\002\001\001" +
    "\000\006\211\u016a\216\u015f\001\001\000\004\216\u0163\001" +
    "\001\000\006\027\u0164\212\u0167\001\001\000\002\001\001" +
    "\000\006\211\u0169\216\u015f\001\001\000\006\211\u0168\216" +
    "\u015f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\u0164\212\u016c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\u0173\111\u0175\001\001\000\002\001\001\000\006" +
    "\027\u0176\163\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\u017c\202\u017d\203\u014f\001" +
    "\001\000\002\001\001\000\010\027\u0179\200\u017e\201\u017b" +
    "\001\001\000\002\001\001\000\004\011\u0180\001\001\000" +
    "\006\027\u0181\204\u0183\001\001\000\002\001\001\000\004" +
    "\011\u0193\001\001\000\006\027\u0184\205\u0186\001\001\000" +
    "\002\001\001\000\004\206\u0188\001\001\000\006\027\u015b" +
    "\107\u0187\001\001\000\002\001\001\000\006\027\u0184\205" +
    "\u0192\001\001\000\004\210\u0191\001\001\000\004\210\u018b" +
    "\001\001\000\002\001\001\000\004\207\u018f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\027\u0198" +
    "\116\u0197\117\u0149\202\u0150\203\u014f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\u01a0\124" +
    "\u01a1\001\001\000\002\001\001\000\006\027\u01a7\215\u01a9" +
    "\001\001\000\002\001\001\000\006\027\u015b\107\u01a2\001" +
    "\001\000\006\027\u01a3\214\u01a5\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\u0179\200\u01a6\201\u017b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\u01a3\214\u01b2\001" +
    "\001\000\010\027\u0179\200\u01b3\201\u017b\001\001\000\002" +
    "\001\001\000\006\027\u01b5\121\u01b6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\u015b\107\u01bb\001\001\000" +
    "\006\027\u01a3\214\u01bc\001\001\000\010\027\u0179\200\u01bd" +
    "\201\u017b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\u015b\107\u01f0\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\255\144\u01e1\001\001" +
    "\000\004\174\u01e3\001\001\000\004\011\u01e4\001\001\000" +
    "\002\001\001\000\004\213\u01e5\001\001\000\006\027\u01e6" +
    "\175\u01e7\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u01e9\001\001\000\004\213\u01ea\001\001\000\006" +
    "\027\u01e6\175\u01eb\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\255\144\u01ee\001\001\000\004\174\u01ef" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\211" +
    "\u01f2\216\u015f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\176\u01f5\001\001\000\002\001\001\000\004\011" +
    "\u01f7\001\001\000\006\027\u01f8\177\u01f9\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u01fb\001\001\000" +
    "\006\027\u01f8\177\u01fc\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u01ff\001\001\000\006\027\u0181\204" +
    "\u0200\001\001\000\006\027\u0184\205\u0201\001\001\000\006" +
    "\027\u015b\107\u0202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\u011f\027\u0118\112\u020c" +
    "\114\u0119\162\u011e\172\u011a\201\u011d\001\001\000\002\001" +
    "\001\000\006\027\u0208\106\u0209\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\u0204\113\u020d\001\001\000\002\001\001\000\006" +
    "\027\255\144\u020f\001\001\000\004\174\u0210\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\u0213\055\u0216" +
    "\056\u0214\001\001\000\002\001\001\000\006\027\u0246\062" +
    "\u0248\001\001\000\006\027\u0217\057\u0219\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\060" +
    "\u021a\061\u021c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\060\u021e\061\u021c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\u0226\063\u0227\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\064\u022d\065\u022b\066\u022e\067" +
    "\u0229\071\u022a\073\u022c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\u0226\063\u0244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\u0235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\u023a\001\001\000\002\001\001\000\004\070\u023d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\u0240\070\u0242\074\u0243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u02e8\001\001\000\002\001\001\000\004\011\u028b" +
    "\001\001\000\002\001\001\000\006\011\150\135\u027f\001" +
    "\001\000\004\011\u0250\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u0253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u025d\010\u025a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u0264\010\u025a" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u0266\010\u025a\001\001\000\002\001\001\000\004\006\u0268" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u026b\001\001\000\002\001\001\000\006\005\u026d\010\u025a" +
    "\001\001\000\002\001\001\000\006\005\u0270\010\u025a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0272" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0275\001\001\000\002\001\001\000\004\006\u0277\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u027a\010" +
    "\u025a\001\001\000\002\001\001\000\004\006\u027c\001\001" +
    "\000\002\001\001\000\004\006\u027e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0281\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u0285\010\u025a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0287" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u028a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u028d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u0291\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0297\010\u025a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0299\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u029c\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u02a0\010\u025a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u02a2\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u02a5\001" +
    "\001\000\002\001\001\000\006\005\u02a8\010\u025a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u02aa\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u02ad" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u02b1\010\u025a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u02b3\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u02b6\001\001\000\002\001\001\000\004" +
    "\011\u02b8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u02bc\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u02c2\010\u025a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u02c4\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u02c7\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u02cb\010\u025a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u02cd\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u02d0\001" +
    "\001\000\002\001\001\000\006\005\u02d3\010\u025a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u02d5\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u02d8" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u02dc\010\u025a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u02de\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u02e1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u02ec\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u02f3\010" +
    "\u025a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u02f5\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u02f8\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u02fc\010\u025a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u02fe\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0301\001\001\000\002\001" +
    "\001\000\004\006\u0303\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u0307\010\u025a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0309\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u030c\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u030f\010\u025a" +
    "\001\001\000\002\001\001\000\004\006\u0311\001\001\000" +
    "\002\001\001\000\004\006\u0313\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0319\001\001\000\002\001\001" +
    "\000\006\027\u031b\157\u031e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\u031f\160\u0321" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\u0323\161\u0326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\u0329\222" +
    "\u032a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\u032e\223\u032f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0332\001" +
    "\001\000\006\027\u0333\164\u0334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\u0337\165" +
    "\u0338\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\166\u033a\001\001\000\002\001\001\000\006\027\u033d\167" +
    "\u033c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\u033d\167\u0340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u041b\001\001\000\014\007\u0403\011\u0354\027\u034f" +
    "\044\u0402\047\u0353\001\001\000\002\001\001\000\014\007" +
    "\u03e6\011\u0354\027\u034f\044\u03e5\047\u0353\001\001\000\012" +
    "\011\u0354\027\u034f\044\u037a\047\u0353\001\001\000\004\006" +
    "\u0379\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u0358\001\001\000\002" +
    "\001\001\000\012\011\u0354\027\u034f\044\u035b\047\u0353\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\u0354" +
    "\027\u034f\044\u035a\047\u0353\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\u0354\027\u034f" +
    "\044\u035e\047\u0353\001\001\000\002\001\001\000\006\027" +
    "\u0361\050\u0363\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u036a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u0367\001\001\000\002" +
    "\001\001\000\004\025\u0369\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\u036c\001\001\000\002\001\001" +
    "\000\004\011\u036e\001\001\000\002\001\001\000\004\025" +
    "\u0370\001\001\000\002\001\001\000\004\011\u0372\001\001" +
    "\000\002\001\001\000\004\025\u0374\001\001\000\002\001" +
    "\001\000\004\011\u0376\001\001\000\002\001\001\000\004" +
    "\025\u0378\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u037c\001\001\000\006\011\u0395\020\u0396\001\001" +
    "\000\006\014\u0391\027\272\001\001\000\004\013\u037e\001" +
    "\001\000\006\014\u037f\027\272\001\001\000\006\027\u0380" +
    "\045\u0381\001\001\000\002\001\001\000\006\027\373\032" +
    "\u038f\001\001\000\002\001\001\000\004\011\u0384\001\001" +
    "\000\006\027\u0385\031\u0386\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\u0389\033\u0388\001\001\000\002" +
    "\001\001\000\004\046\u038c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u038e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0390\001\001\000\002\001" +
    "\001\000\006\027\u0380\045\u0392\001\001\000\006\027\373" +
    "\032\u0393\001\001\000\004\006\u0394\001\001\000\002\001" +
    "\001\000\010\015\u039f\016\u039e\025\u03a0\001\001\000\004" +
    "\025\u0397\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u03b0\001\001\000" +
    "\002\001\001\000\006\015\u03a1\016\u039e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u03a4\001\001\000" +
    "\002\001\001\000\004\011\u03a6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u03ac\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u03af\001\001\000\002\001" +
    "\001\000\004\025\u03b2\001\001\000\004\011\u03b8\001\001" +
    "\000\002\001\001\000\004\011\u03b4\001\001\000\002\001" +
    "\001\000\004\011\u03b6\001\001\000\006\015\u03b7\016\u039e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u03ba\001\001\000\006\015\u03bb\016\u039e\001\001\000\002" +
    "\001\001\000\004\017\u03be\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u03c3\001\001\000\002\001\001\000" +
    "\004\011\u03c5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u03cb\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\u03ce\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u03d1\001\001\000\002\001\001\000\004" +
    "\011\u03d3\001\001\000\002\001\001\000\004\011\u03d5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u03db\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u03de" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u03e1\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\u03e4\001\001\000\002\001\001\000\004\013\u03f3\001" +
    "\001\000\012\011\u0354\027\u034f\044\u03e7\047\u0353\001\001" +
    "\000\004\013\u03e8\001\001\000\006\014\u03ef\027\272\001" +
    "\001\000\004\013\u03ea\001\001\000\006\014\u03eb\027\272" +
    "\001\001\000\006\027\u0380\045\u03ec\001\001\000\006\027" +
    "\373\032\u03ed\001\001\000\004\006\u03ee\001\001\000\002" +
    "\001\001\000\006\027\u0380\045\u03f0\001\001\000\006\027" +
    "\373\032\u03f1\001\001\000\004\006\u03f2\001\001\000\002" +
    "\001\001\000\006\014\u03fa\027\272\001\001\000\004\013" +
    "\u03f5\001\001\000\006\014\u03f6\027\272\001\001\000\006" +
    "\027\u0380\045\u03f7\001\001\000\006\027\373\032\u03f8\001" +
    "\001\000\004\006\u03f9\001\001\000\002\001\001\000\006" +
    "\027\u0380\045\u03fb\001\001\000\006\027\373\032\u03fc\001" +
    "\001\000\004\006\u03fd\001\001\000\002\001\001\000\004" +
    "\011\u03ff\001\001\000\002\001\001\000\004\025\u0401\001" +
    "\001\000\002\001\001\000\004\013\u0410\001\001\000\012" +
    "\011\u0354\027\u034f\044\u0404\047\u0353\001\001\000\004\013" +
    "\u0405\001\001\000\006\014\u040c\027\272\001\001\000\004" +
    "\013\u0407\001\001\000\006\014\u0408\027\272\001\001\000" +
    "\006\027\u0380\045\u0409\001\001\000\006\027\373\032\u040a" +
    "\001\001\000\004\006\u040b\001\001\000\002\001\001\000" +
    "\006\027\u0380\045\u040d\001\001\000\006\027\373\032\u040e" +
    "\001\001\000\004\006\u040f\001\001\000\002\001\001\000" +
    "\006\014\u0417\027\272\001\001\000\004\013\u0412\001\001" +
    "\000\006\014\u0413\027\272\001\001\000\006\027\u0380\045" +
    "\u0414\001\001\000\006\027\373\032\u0415\001\001\000\004" +
    "\006\u0416\001\001\000\002\001\001\000\006\027\u0380\045" +
    "\u0418\001\001\000\006\027\373\032\u0419\001\001\000\004" +
    "\006\u041a\001\001\000\002\001\001\000\006\014\u0422\027" +
    "\272\001\001\000\004\013\u041d\001\001\000\006\014\u041e" +
    "\027\272\001\001\000\006\027\u0380\045\u041f\001\001\000" +
    "\006\027\373\032\u0420\001\001\000\004\006\u0421\001\001" +
    "\000\002\001\001\000\006\027\u0380\045\u0423\001\001\000" +
    "\006\027\373\032\u0424\001\001\000\004\006\u0425\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0432\001\001\000\004\011\u0430\001\001\000\006" +
    "\006\u042d\011\u042e\001\001\000\004\006\u042c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u042f\001\001" +
    "\000\002\001\001\000\004\006\u0431\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\141\u049c\001\001\000\004\126" +
    "\u048d\001\001\000\004\011\u0480\001\001\000\004\011\u0440" +
    "\001\001\000\002\001\001\000\004\006\u043e\001\001\000" +
    "\004\006\u043d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u047f\001\001\000\006\006\u0444\130\u0442\001" +
    "\001\000\002\001\001\000\010\006\u0470\131\u046d\136\u046e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0449" +
    "\001\001\000\002\001\001\000\004\006\u044b\001\001\000" +
    "\002\001\001\000\004\006\u044d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\136\u0450\001\001\000\004\133" +
    "\u0452\001\001\000\002\001\001\000\004\006\u0455\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\132\u0459\134\u045b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u045e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\u0469\132" +
    "\u0468\134\u045b\001\001\000\004\006\u046a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0477\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\143\u0483\001\001\000\004\006\u0482\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0488\001" +
    "\001\000\004\130\u0486\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0489\001\001\000\002\001\001\000" +
    "\004\030\u048b\001\001\000\004\006\u048c\001\001\000\002" +
    "\001\001\000\004\127\u0493\001\001\000\002\001\001\000" +
    "\004\006\u0491\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0498\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u04a1\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u049f\001\001\000\004\006\u04a0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u04b1\001\001\000\004\011\u04a5\001\001\000\006\006" +
    "\u04a8\013\u04a7\001\001\000\006\006\u04ac\013\u04ad\001\001" +
    "\000\010\006\u04a9\014\u04aa\027\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u04ab\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\u04ae\014\u04af\027" +
    "\272\001\001\000\002\001\001\000\004\006\u04b0\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u04b3\001" +
    "\001\000\006\006\u04b5\013\u04b6\001\001\000\006\006\u04bb" +
    "\013\u04ba\001\001\000\002\001\001\000\010\006\u04b7\014" +
    "\u04b8\027\272\001\001\000\002\001\001\000\004\006\u04b9" +
    "\001\001\000\002\001\001\000\010\006\u04bc\014\u04bd\027" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u04be\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u04f2\001\001\000\004\006\u04f1" +
    "\001\001\000\004\022\u04c5\001\001\000\006\011\u04d5\024" +
    "\u04d6\001\001\000\012\006\u04c8\013\u04c7\014\u04c9\027\272" +
    "\001\001\000\012\006\u04ce\013\u04cf\014\u04d0\027\272\001" +
    "\001\000\010\006\u04cb\014\u04cc\027\272\001\001\000\002" +
    "\001\001\000\004\006\u04ca\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u04cd\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\u04d2\014\u04d3\027\272\001" +
    "\001\000\004\006\u04d1\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u04d4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\u04dd\011\u04dc" +
    "\023\u04d8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\u04dd\011\u04df\023\u04de\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\u04dd\011\u04dc\023\u04ea\001\001" +
    "\000\002\001\001\000\010\010\u04dd\011\u04dc\023\u04e9\001" +
    "\001\000\010\010\u04dd\011\u04dc\023\u04e8\001\001\000\010" +
    "\010\u04dd\011\u04dc\023\u04e7\001\001\000\010\010\u04dd\011" +
    "\u04dc\023\u04e6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\u04d5\024\u04ec\001\001\000\002\001\001\000\006" +
    "\011\u04d5\024\u04ee\001\001\000\002\001\001\000\006\011" +
    "\u04d5\024\u04f0\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u04f3\001\001\000\012\006\u04f6\013\u04f5\014" +
    "\u04f7\027\272\001\001\000\012\006\u04fd\013\u04fc\014\u04fe" +
    "\027\272\001\001\000\010\006\u04f9\014\u04fa\027\272\001" +
    "\001\000\002\001\001\000\004\006\u04f8\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u04fb\001\001\000" +
    "\002\001\001\000\010\006\u0500\014\u0501\027\272\001\001" +
    "\000\002\001\001\000\004\006\u04ff\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0502\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u0505\001\001\000" +
    "\004\006\u0508\001\001\000\004\006\u0507\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u050f\001\001\000\004" +
    "\006\u050e\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public ArrayList<ErrorJ> error = new ArrayList<ErrorJ>();

    public Symbol gets(){
        return this.s;
    }
    public void syntax_error(Symbol s){
    this.s = s;
    int linea = this.s.right;
    int columna = this.s.left;
    String value = (String)this.s.value;
    ErrorJ Sintax_E = new ErrorJ(linea,columna,value);
    error.add(Sintax_E);
}
    protected int error_sync_size () {
        //System.out.println("error_sync_size was called.");
        return 1; // not recommended by the CUP manual

     // but we need recovery after the next successful shift
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintax$actions {
  private final sintax parser;

  /** Constructor */
  CUP$sintax$actions(sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintax$do_action_part00000000(
    int                        CUP$sintax$act_num,
    java_cup.runtime.lr_parser CUP$sintax$parser,
    java.util.Stack            CUP$sintax$stack,
    int                        CUP$sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintax$result;

      /* select the action based on the action number */
      switch (CUP$sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintax$stack.elementAt(CUP$sintax$top-1)).value;
		RESULT = start_val;
              CUP$sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintax$parser.done_parsing();
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("START",20, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("START",20, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXPRESIONES ::= INSERT_F START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPRESIONES ::= DELETE_F START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPRESIONES ::= UPDATE_F START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPRESIONES ::= SELECT_F START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPRESIONES ::= CREATE_F START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPRESIONES ::= ALTERDATABASE START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRESIONES ::= ALTERTABLE START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESIONES ::= ALTERUSER START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESIONES ::= ALTERVIEW START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESIONES ::= ALTERINDEX START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESIONES ::= DROPDATABASE START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESIONES ::= DROPTABLE START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESIONES ::= DROPUSER START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESIONES ::= DROPINDEX START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESIONES ::= DROPVIEW START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESIONES ::= TRUNCATETABLE START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESIONES ::= BEGINTRANSACTION START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESIONES ::= CursorDeclare START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESIONES ::= ROLLBACKTCL START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESIONES ::= COMMITTCL START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESIONES ::= SAVEPOINTTCL START 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSERT_F ::= INSERT TOP_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre OUTPUT VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-12)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSERT_F ::= INSERT TOP_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre OUTPUT VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-13)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSERT_F ::= INSERT TOP_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-11)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSERT_F ::= INSERT TOP_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-12)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSERT_F ::= INSERT INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre OUTPUT VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-11)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSERT_F ::= INSERT INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre OUTPUT VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-12)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSERT_F ::= INSERT INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-10)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSERT_F ::= INSERT INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-11)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSERT_F ::= INSERT INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre DEFAULT VALUES FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSERT_F ::= INSERT TOP_F INTO OBJECT_F OUTPUT VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-9)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSERT_F ::= INSERT TOP_F INTO OBJECT_F OUTPUT VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-10)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSERT_F ::= INSERT TOP_F INTO OBJECT_F VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSERT_F ::= INSERT TOP_F INTO OBJECT_F VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-9)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSERT_F ::= INSERT INTO OBJECT_F OUTPUT VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSERT_F ::= INSERT INTO OBJECT_F OUTPUT VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-9)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSERT_F ::= INSERT INTO OBJECT_F VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSERT_F ::= INSERT INTO OBJECT_F VALUES DEFAULT VALUES FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSERT_F ::= INSERT TOP_F OBJECT_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre OUTPUT VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-13)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSERT_F ::= INSERT TOP_F OBJECT_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre OUTPUT VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-14)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSERT_F ::= INSERT TOP_F OBJECT_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-12)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSERT_F ::= INSERT TOP_F OBJECT_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-13)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSERT_F ::= INSERT OBJECT_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre OUTPUT VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-12)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSERT_F ::= INSERT OBJECT_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre OUTPUT VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-13)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSERT_F ::= INSERT OBJECT_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-11)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSERT_F ::= INSERT OBJECT_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-12)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSERT_F ::= INSERT OBJECT_F INTO OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre DEFAULT VALUES FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-9)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSERT_F ::= INSERT TOP_F OBJECT_F INTO OBJECT_F OUTPUT VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-10)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSERT_F ::= INSERT TOP_F OBJECT_F INTO OBJECT_F OUTPUT VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-11)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSERT_F ::= INSERT TOP_F OBJECT_F INTO OBJECT_F VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-9)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSERT_F ::= INSERT TOP_F OBJECT_F INTO OBJECT_F VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-10)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSERT_F ::= INSERT OBJECT_F OUTPUT OBJECT_FDROP INTO OBJECT_F VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-10)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSERT_F ::= INSERT OBJECT_F OUTPUT OBJECT_FDROP INTO OBJECT_F VALUES Parentesis_de_apertura DEFAULT VALUES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-11)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSERT_F ::= INSERT OBJECT_F INTO OBJECT_F VALUES Parentesis_de_apertura VALORES Parentesis_de_cierre FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSERT_F ::= INSERT OBJECT_F INTO OBJECT_F VALUES DEFAULT VALUES FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSERT_F ::= error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INSERT_F",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALORES ::= DEFAULT Coma VALORES 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALORES ::= NULL Coma VALORES 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALORES ::= CONST Coma VALORES 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALORES ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALORES ::= NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALORES ::= CONST 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DELETE_F ::= DELETE TOP_F FROM OBJECT_F OUTPUT FROM_F WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DELETE_F ::= DELETE FROM OBJECT_F OUTPUT FROM_F WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DELETE_F ::= DELETE TOP_F FROM OBJECT_F FROM_F WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DELETE_F ::= DELETE FROM OBJECT_F FROM_F WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DELETE_F ::= DELETE TOP_F FROM OBJECT_F OUTPUT FROM_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DELETE_F ::= DELETE FROM OBJECT_F OUTPUT FROM_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DELETE_F ::= DELETE TOP_F FROM OBJECT_F FROM_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DELETE_F ::= DELETE FROM OBJECT_F FROM_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DELETE_F ::= DELETE TOP_F FROM OBJECT_F OUTPUT FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DELETE_F ::= DELETE FROM OBJECT_F OUTPUT FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DELETE_F ::= DELETE TOP_F FROM OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DELETE_F ::= DELETE FROM OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DELETE_F ::= DELETE error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DELETE_F",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // UPDATE_F ::= UPDATE TOP_F OBJECT_F SET_F OUTPUT FROM_F WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // UPDATE_F ::= UPDATE TOP_F OBJECT_F SET_F OUTPUT FROM_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // UPDATE_F ::= UPDATE OBJECT_F SET_F OUTPUT FROM_F WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // UPDATE_F ::= UPDATE OBJECT_F SET_F OUTPUT FROM_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // UPDATE_F ::= UPDATE TOP_F OBJECT_F SET_F FROM_F WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // UPDATE_F ::= UPDATE TOP_F OBJECT_F SET_F FROM_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // UPDATE_F ::= UPDATE OBJECT_F SET_F FROM_F WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // UPDATE_F ::= UPDATE OBJECT_F SET_F FROM_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // UPDATE_F ::= UPDATE TOP_F OBJECT_F SET_F OUTPUT WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // UPDATE_F ::= UPDATE TOP_F OBJECT_F SET_F OUTPUT FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // UPDATE_F ::= UPDATE OBJECT_F SET_F OUTPUT WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // UPDATE_F ::= UPDATE OBJECT_F SET_F OUTPUT FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // UPDATE_F ::= UPDATE TOP_F OBJECT_F SET_F WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // UPDATE_F ::= UPDATE TOP_F OBJECT_F SET_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // UPDATE_F ::= UPDATE OBJECT_F SET_F WHERE_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // UPDATE_F ::= UPDATE OBJECT_F SET_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // UPDATE_F ::= UPDATE error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("UPDATE_F",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SET_F ::= SET SET_EXP 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SET_F",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SET_EXP ::= OBJECT_F Igual DEFAULT Coma SET_EXP 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SET_EXP",18, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SET_EXP ::= OBJECT_F Igual NULL Coma SET_EXP 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SET_EXP",18, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SET_EXP ::= OBJECT_F Igual EXP_F Coma SET_EXP 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SET_EXP",18, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SET_EXP ::= OBJECT_F Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SET_EXP",18, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SET_EXP ::= OBJECT_F Igual NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SET_EXP",18, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SET_EXP ::= OBJECT_F Igual EXP_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SET_EXP",18, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP_F ::= OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXP_F",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP_F ::= CONST 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXP_F",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP_F ::= EXP_F Suma EXP_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXP_F",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP_F ::= EXP_F Resta EXP_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXP_F",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP_F ::= EXP_F Multiplicacion EXP_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXP_F",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP_F ::= EXP_F Division EXP_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXP_F",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP_F ::= EXP_F Porcentaje EXP_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXP_F",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP_F ::= Parentesis_de_apertura EXP_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXP_F",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SELECT_F ::= SELECT ALL TOP_F SELECT_FILES INTO FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-9)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SELECT_F ::= SELECT DISTINCT TOP_F SELECT_FILES INTO FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-9)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SELECT_F ::= SELECT TOP_F SELECT_FILES INTO FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SELECT_F ::= SELECT ALL SELECT_FILES INTO FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SELECT_F ::= SELECT DISTINCT SELECT_FILES INTO FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SELECT_F ::= SELECT SELECT_FILES INTO FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SELECT_F ::= SELECT ALL TOP_F SELECT_FILES FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SELECT_F ::= SELECT DISTINCT TOP_F SELECT_FILES FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SELECT_F ::= SELECT TOP_F SELECT_FILES FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SELECT_F ::= SELECT ALL SELECT_FILES FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SELECT_F ::= SELECT DISTINCT SELECT_FILES FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SELECT_F ::= SELECT SELECT_FILES FROM_F WHERE_F GROUP_F ORDER_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SELECT_F ::= SELECT error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_F",22, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SELECT_FILES ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FILES",34, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SELECT_FILES ::= OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FILES",34, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SELECT_FILES ::= OBJECT_F AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FILES",34, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SELECT_FILES ::= SELECT_FUNCTIONS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FILES",34, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SELECT_FILES ::= OBJECT_F Coma SELECT_FILES 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FILES",34, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SELECT_FILES ::= OBJECT_F AS_F Coma SELECT_FILES 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FILES",34, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SELECT_FILES ::= SELECT_FUNCTIONS Coma SELECT_FILES 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FILES",34, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SELECT_FILES ::= SELECT error 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FILES",34, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SELECT_FUNCTIONS ::= AVG Parentesis_de_apertura OBJECT_F Parentesis_de_cierre AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SELECT_FUNCTIONS ::= AVG Parentesis_de_apertura OBJECT_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SELECT_FUNCTIONS ::= COUNT Parentesis_de_apertura DISTINCT_F OBJECT_F Parentesis_de_cierre AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SELECT_FUNCTIONS ::= COUNT Parentesis_de_apertura DISTINCT_F OBJECT_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SELECT_FUNCTIONS ::= COUNT Parentesis_de_apertura Multiplicacion Parentesis_de_cierre AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SELECT_FUNCTIONS ::= COUNT Parentesis_de_apertura Multiplicacion Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SELECT_FUNCTIONS ::= COUNT Parentesis_de_apertura Int Parentesis_de_cierre AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SELECT_FUNCTIONS ::= COUNT Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SELECT_FUNCTIONS ::= MIN Parentesis_de_apertura OBJECT_F Parentesis_de_cierre AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SELECT_FUNCTIONS ::= MIN Parentesis_de_apertura OBJECT_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SELECT_FUNCTIONS ::= MAX Parentesis_de_apertura OBJECT_F Parentesis_de_cierre AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SELECT_FUNCTIONS ::= MAX Parentesis_de_apertura OBJECT_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SELECT_FUNCTIONS ::= SUM Parentesis_de_apertura OBJECT_F Parentesis_de_cierre AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SELECT_FUNCTIONS ::= SUM Parentesis_de_apertura OBJECT_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SELECT_FUNCTIONS ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SELECT_FUNCTIONS",37, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DISTINCT_F ::= ALL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DISTINCT_F",38, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DISTINCT_F ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DISTINCT_F",38, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DISTINCT_F ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DISTINCT_F",38, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // GROUP_F ::= GROUP BY OBJECT_F HAVING_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("GROUP_F",35, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // GROUP_F ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("GROUP_F",35, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // HAVING_F ::= HAVING EXPRE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("HAVING_F",23, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // HAVING_F ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("HAVING_F",23, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRE ::= OBJECT_F COMP CONST 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EXPRE",25, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // COMP ::= Mayor 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("COMP",36, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // COMP ::= Menor 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("COMP",36, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // COMP ::= Igual 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("COMP",36, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ORDER_F ::= ORDER BY ORDER_FUNC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ORDER_F",24, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ORDER_F ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ORDER_F",24, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ORDER_FUNC ::= OrderB ORDER_FUNC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ORDER_FUNC",26, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ORDER_FUNC ::= ORDER_FUNC OrderB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ORDER_FUNC",26, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ORDER_FUNC ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ORDER_FUNC",26, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ORDER_FUNC ::= Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ORDER_FUNC",26, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ORDER_FUNC ::= ORDER_FUNC Coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ORDER_FUNC",26, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ORDER_FUNC ::= Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ORDER_FUNC",26, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OrderB",137, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OrderB",137, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CREATE_F ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CREATE_F",39, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CREATE_F ::= CREATE error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CREATE_F",39, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateA",40, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateA",40, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateA",40, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateA",40, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateA",40, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateA",40, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateA",40, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CreateUser ::= USER Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",41, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CreateDB ::= DATABASE Identificador CreateDBA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",42, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",43, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",44, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CreateDBB ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",44, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Primary",45, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Primary ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Primary",45, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",46, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",46, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // FileSpec ::= Parentesis_de_apertura NAME Igual String Coma FILENAME Igual String Optionals Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",47, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-9)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // COLLATEDB ::= COLLATE Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",48, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // COLLATEDB ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",48, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Optionals",49, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Optionals ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Optionals",49, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Optional",50, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Optional",50, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Optional",50, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Size ::= Sizew 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Size",51, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Size ::= Sizenw 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Size",51, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Sizew ::= SIZE Igual Int Size_A 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Sizew",52, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Sizenw ::= SIZE Igual Int 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Sizenw",53, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Size_A",54, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Size_A",54, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Size_A",54, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Size_A",54, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",55, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Maxsize_A ::= Int Size_A 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",56, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",56, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Filegrowth ::= FILEGROWTH Igual Int Filegrowth_A 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",57, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",58, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",58, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Filegrowth_A ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",58, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // CreateView ::= VIEW OBJECT_F AS SELECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateView",59, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX Identificador ON OBJECT_F ColumnIndex IncludeIndex WHERE_F OptionalOn 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",60, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-9)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",61, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CreateIndexA ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",61, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ColumnIndex ::= Parentesis_de_apertura ColumnIndexA Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",62, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // ColumnIndexA ::= Identificador ORDER_F ColumnIndexB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",63, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ColumnIndexB ::= Coma Identificador ORDER_F ColumnIndexB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",64, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ColumnIndexB ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",64, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // IncludeIndex ::= INCLUDE Parentesis_de_apertura OBJECT_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",65, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // IncludeIndex ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",65, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // OptionalOn ::= ON OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",66, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OptionalOn ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",66, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // CreateTable ::= TABLE OBJECT_F Parentesis_de_apertura CNC CNCA Parentesis_de_cierre FileGroup 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",67, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",68, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // FileGroup ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",68, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("NFR",69, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NFR ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("NFR",69, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("NFR1",70, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("NFR1",70, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("NFR2",71, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NFR2 ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("NFR2",71, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CNC",72, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CNC",72, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CNC",72, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CNCA",73, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CNCA ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CNCA",73, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",120, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",121, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",121, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES OBJECT_F ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",121, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TableConstrA ::= CHECK NFR Parentesis_de_apertura SearchCondition Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",121, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TableConstrB ::= Parentesis_de_apertura OBJECT_F OrderB TableConstrC Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",122, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TableConstrC ::= Coma OBJECT_F OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",123, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TableConstrC ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",123, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TableConstrD ::= Parentesis_de_apertura OBJECT_F TableConstrE Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",124, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TableConstrE ::= Coma OBJECT_F TableConstrE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",125, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TableConstrE ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",125, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // TableIndex ::= INDEX OBJECT_F ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",112, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // ColumnDef ::= OBJECT_F TIPODATO ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",74, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ColumnDefZ ::= CONSTRAINT OBJECT_F ColumnDefY 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",75, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",75, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // ColumnDefZ ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",75, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",76, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",76, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",76, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",76, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",76, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",77, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ColumnDefX ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",77, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ColumnDefF ::= Parentesis_de_apertura Int Coma Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",139, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // ColumnDefF ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",139, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",78, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",78, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",79, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",79, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ColumnDefV ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",79, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",113, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ColumnDefG ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",113, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",138, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ColumnDefH ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",138, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ColumnDefA ::= COLLATE OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",80, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ColumnDefA ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",80, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ColumnDefD ::= Int 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",81, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ColumnDefD ::= Float 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",81, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // ColumnDefD ::= String 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",81, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // ColumnDefD ::= Bit 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",81, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",81, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",82, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ColumnDefE ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",82, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",126, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // ColumnConstr ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",126, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ColumnConstrA ::= CONSTRAINT OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",127, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ColumnConstrA ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",127, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",128, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC Parentesis_de_apertura OBJECT_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",128, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",128, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ColumnConstrB ::= ColumnConstrD REFERENCES OBJECT_F ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",128, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ColumnConstrB ::= CHECK NFR Parentesis_de_apertura SearchCondition Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",128, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",98, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",98, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ColumnConstrC ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",98, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",129, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ColumnConstrD ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",129, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ColumnConstrE ::= Parentesis_de_apertura OBJECT_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",130, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ColumnConstrE ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",130, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",131, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ColumnConstrF ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",131, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",132, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",132, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",133, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",133, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintax$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$sintax$do_action_part00000001(
    int                        CUP$sintax$act_num,
    java_cup.runtime.lr_parser CUP$sintax$parser,
    java.util.Stack            CUP$sintax$stack,
    int                        CUP$sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintax$result;

      /* select the action based on the action number */
      switch (CUP$sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",134, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",134, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // SearchCondition ::= NOT Predicate SearchConditionA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",135, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // SearchCondition ::= Predicate SearchConditionA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",135, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // SearchCondition ::= Parentesis_de_apertura SearchCondition Parentesis_de_cierre SearchConditionA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",135, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",136, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",136, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // SearchConditionA ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",136, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ALTERDATABASE ::= ALTER DATABASE database_name alter_database_sentencia FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERDATABASE",83, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ALTERDATABASE ::= ALTER DATABASE error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERDATABASE",83, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // database_name ::= Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("database_name",84, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // database_name ::= CURRENT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("database_name",84, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // alter_database_sentencia ::= MODIFY NAME Igual Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_database_sentencia",85, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // alter_database_sentencia ::= COLLATE Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_database_sentencia",85, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ALTERTABLE ::= ALTER TABLE OBJECT_F alter_column alter_column_sentencia FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ALTERTABLE ::= ALTER TABLE OBJECT_F alter_column FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ALTERTABLE ::= ALTER TABLE OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ALTERTABLE ::= ALTER TABLE OBJECT_F ADD Identificador TIPODATO null_notnull FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ALTERTABLE ::= ALTER TABLE OBJECT_F ADD Identificador TIPODATO null_notnull CONSTRAINT Identificador constraint_type FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-10)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ALTERTABLE ::= ALTER TABLE OBJECT_F ADD CONSTRAINT Identificador FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ALTERTABLE ::= ALTER TABLE OBJECT_F ADD CONSTRAINT Identificador constraint_type FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ALTERTABLE ::= ALTER TABLE OBJECT_F DROP COLUMN Identificador FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ALTERTABLE ::= ALTER TABLE OBJECT_F DROP Identificador FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ALTERTABLE ::= ALTER TABLE OBJECT_F DROP CONSTRAINT Identificador FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ALTERTABLE ::= ALTER TABLE error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERTABLE",93, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // alter_column ::= ALTER COLUMN Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_column",86, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // alter_column_sentencia ::= TIPODATO Identificador COLLATE Identificador NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_column_sentencia",87, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // alter_column_sentencia ::= TIPODATO Identificador COLLATE Identificador NOT NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_column_sentencia",87, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // alter_column_sentencia ::= TIPODATO Identificador COLLATE Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_column_sentencia",87, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // alter_column_sentencia ::= COLLATE Identificador NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_column_sentencia",87, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // alter_column_sentencia ::= COLLATE Identificador NOT NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_column_sentencia",87, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // alter_column_sentencia ::= COLLATE Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_column_sentencia",87, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // alter_column_sentencia ::= TIPODATO Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_column_sentencia",87, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // alter_column_sentencia ::= NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_column_sentencia",87, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // alter_column_sentencia ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_column_sentencia",87, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // constraint_type ::= PRIMARY KEY 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("constraint_type",88, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // constraint_type ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("constraint_type",88, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // constraint_type ::= PRIMARY KEY CLUSTERED 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("constraint_type",88, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // constraint_type ::= PRIMARY KEY NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("constraint_type",88, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // constraint_type ::= UNIQUE CLUSTERED 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("constraint_type",88, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // constraint_type ::= UNIQUE NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("constraint_type",88, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // constraint_type ::= foreign_key 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("constraint_type",88, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // null_notnull ::= NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("null_notnull",89, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // null_notnull ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("null_notnull",89, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // foreign_key ::= FOREIGN KEY Parentesis_de_apertura Identificador Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("foreign_key",90, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ALTERUSER ::= ALTER USER Identificador FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERUSER",94, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ALTERUSER ::= ALTER USER error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERUSER",94, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ALTERINDEX ::= ALTER INDEX alter_index ON OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERINDEX",106, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ALTERINDEX ::= ALTER INDEX error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERINDEX",106, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // alter_index ::= Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_index",95, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // alter_index ::= ALL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_index",95, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // ALTERVIEW ::= ALTER VIEW OBJECT_F AS SELECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERVIEW",96, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // ALTERVIEW ::= ALTER VIEW OBJECT_F alter_view AS SELECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERVIEW",96, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // ALTERVIEW ::= ALTER VIEW error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ALTERVIEW",96, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // alter_view ::= Parentesis_de_apertura alter_column Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("alter_view",97, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // DROPDATABASE ::= DROP DATABASE OBJECT_FDROP FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPDATABASE",99, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // DROPDATABASE ::= DROP DATABASE Corchete_de_apertura IF EXISTS Corchete_de_cierre OBJECT_FDROP FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPDATABASE",99, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // DROPDATABASE ::= DROP DATABASE error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPDATABASE",99, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // DROPTABLE ::= DROP TABLE OBJECT_FDROP FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPTABLE",100, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // DROPTABLE ::= DROP TABLE Corchete_de_apertura IF EXISTS Corchete_de_cierre OBJECT_FDROP FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPTABLE",100, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // DROPTABLE ::= DROP TABLE error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPTABLE",100, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // DROPUSER ::= DROP USER Identificador FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPUSER",101, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // DROPUSER ::= DROP USER Corchete_de_apertura IF EXISTS Corchete_de_cierre Identificador FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPUSER",101, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // DROPUSER ::= DROP USER error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPUSER",101, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // DROPINDEX ::= DROP INDEX drop_relational_or_xml_or_spatial_index FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPINDEX",102, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // DROPINDEX ::= DROP INDEX Corchete_de_apertura IF EXISTS Corchete_de_cierre drop_relational_or_xml_or_spatial_index FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPINDEX",102, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // DROPINDEX ::= DROP INDEX OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPINDEX",102, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // DROPINDEX ::= DROP INDEX Corchete_de_apertura IF EXISTS Corchete_de_cierre OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPINDEX",102, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // DROPINDEX ::= DROP INDEX error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPINDEX",102, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // drop_relational_or_xml_or_spatial_index ::= Identificador ON OBJECT_F Coma Identificador ON OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index",103, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // drop_relational_or_xml_or_spatial_index ::= Identificador ON OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("drop_relational_or_xml_or_spatial_index",103, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // DROPVIEW ::= DROP VIEW OBJECT_FDROP FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPVIEW",104, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // DROPVIEW ::= DROP VIEW Corchete_de_apertura IF EXISTS Corchete_de_cierre OBJECT_FDROP FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPVIEW",104, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // DROPVIEW ::= DROP VIEW error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DROPVIEW",104, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // TRUNCATETABLE ::= TRUNCATE TABLE OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TRUNCATETABLE",105, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // TRUNCATETABLE ::= TRUNCATE TABLE error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TRUNCATETABLE",105, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // FROM_F ::= FROM OBJECT_F AS_F JOIN_F1 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FROM_F",9, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // FROM_F ::= FROM OBJECT_F AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FROM_F",9, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // FROM_F ::= FROM OBJECT_F JOIN_F1 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FROM_F",9, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // FROM_F ::= FROM OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FROM_F",9, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // FROM_F ::= FROM PIVOT_F AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FROM_F",9, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // FROM_F ::= FROM PIVOT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FROM_F",9, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // PIVOT_F ::= OBJECT_F AS_F PIVOT Parentesis_de_apertura OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre FOR Identificador IN Parentesis_de_apertura OBJECT_F Parentesis_de_cierre Parentesis_de_cierre AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("PIVOT_F",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-15)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // PIVOT_F ::= OBJECT_F PIVOT Parentesis_de_apertura OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre FOR Identificador IN Parentesis_de_apertura OBJECT_F Parentesis_de_cierre Parentesis_de_cierre AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("PIVOT_F",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-14)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // PIVOT_F ::= OBJECT_F AS_F PIVOT Parentesis_de_apertura OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre FOR Identificador IN Parentesis_de_apertura OBJECT_F Parentesis_de_cierre Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("PIVOT_F",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-14)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // PIVOT_F ::= OBJECT_F PIVOT Parentesis_de_apertura OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre FOR Identificador IN Parentesis_de_apertura OBJECT_F Parentesis_de_cierre Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("PIVOT_F",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-13)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // PIVOT_F ::= OBJECT_F UNPIVOT Parentesis_de_apertura OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre FOR Identificador IN Parentesis_de_apertura OBJECT_F Parentesis_de_cierre Parentesis_de_cierre AS_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("PIVOT_F",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-14)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // PIVOT_F ::= OBJECT_F UNPIVOT Parentesis_de_apertura OBJECT_F Parentesis_de_apertura OBJECT_F Parentesis_de_cierre FOR Identificador IN Parentesis_de_apertura OBJECT_F Parentesis_de_cierre Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("PIVOT_F",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-13)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // AS_F ::= AS Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("AS_F",19, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // AS_F ::= Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("AS_F",19, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // JOIN_F1 ::= JOIN_F2 OBJECT_F AS_F ON OBJECT_F Igual OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F1",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // JOIN_F1 ::= JOIN_F2 OBJECT_F AS_F ON OBJECT_F Igual OBJECT_F JOIN_F1 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F1",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // JOIN_F1 ::= JOIN_F2 OBJECT_F ON OBJECT_F Igual OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F1",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // JOIN_F1 ::= JOIN_F2 OBJECT_F ON OBJECT_F Igual OBJECT_F JOIN_F1 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F1",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // JOIN_F2 ::= INNER JOIN JHINT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F2",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // JOIN_F2 ::= FULL OUTER JOIN JHINT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F2",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // JOIN_F2 ::= LEFT OUTER JOIN JHINT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F2",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // JOIN_F2 ::= RIGHT OUTER JOIN JHINT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F2",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // JOIN_F2 ::= INNER JOIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F2",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // JOIN_F2 ::= FULL OUTER JOIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F2",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // JOIN_F2 ::= LEFT OUTER JOIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F2",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // JOIN_F2 ::= RIGHT OUTER JOIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JOIN_F2",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // JHINT_F ::= LOOP 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JHINT_F",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // JHINT_F ::= HASH 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JHINT_F",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // JHINT_F ::= MERGE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JHINT_F",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // JHINT_F ::= REMOTE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("JHINT_F",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // WHERE_F ::= WHERE search_condition 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("WHERE_F",10, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // WHERE_F ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("WHERE_F",10, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // search_condition ::= search_condition_without_match 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("search_condition",31, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // search_condition ::= search_condition_without_match AND search_condition_without_match 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("search_condition",31, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // search_condition ::= search_condition_without_match OR search_condition_without_match 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("search_condition",31, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // search_condition ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("search_condition",31, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // search_condition_without_match ::= Parentesis_de_apertura search_condition_without_match_2 Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("search_condition_without_match",32, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // search_condition_without_match ::= search_condition_without_match_2 Coma search_condition_without_match_2 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("search_condition_without_match",32, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // search_condition_without_match ::= search_condition_without_match_2 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("search_condition_without_match",32, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // search_condition_without_match_2 ::= and_or_not predicate 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("search_condition_without_match_2",33, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // search_condition_without_match_2 ::= predicate and_or_not predicate 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("search_condition_without_match_2",33, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // search_condition_without_match_2 ::= predicate 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("search_condition_without_match_2",33, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // predicate ::= predicate_expression signos predicate_expression 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("predicate",28, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // predicate ::= ESCAPE String 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("predicate",28, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // predicate ::= predicate_expression signos 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("predicate",28, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // predicate_expression ::= OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("predicate_expression",30, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // predicate_expression ::= Int 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("predicate_expression",30, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // predicate_expression ::= Float 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("predicate_expression",30, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // predicate_expression ::= String 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("predicate_expression",30, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // signos ::= IS NOT NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // signos ::= Igual 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // signos ::= Mayor 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // signos ::= Menor 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // signos ::= Diferente 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // signos ::= Menor_o_igual 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // signos ::= Mayor_o_igual 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // signos ::= NOT LIKE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // signos ::= LIKE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // signos ::= BETWEEN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // signos ::= NOT BETWEEN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // signos ::= NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // signos ::= IS NULL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // signos ::= IS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // signos ::= IS NOT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // signos ::= NOT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("signos",29, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // and_or_not ::= AND 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("and_or_not",27, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // and_or_not ::= OR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("and_or_not",27, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // and_or_not ::= NOT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("and_or_not",27, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // and_or_not ::= AND NOT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("and_or_not",27, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // and_or_not ::= OR NOT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("and_or_not",27, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // BEGINTRANSACTION ::= BEGIN TRANSACTION OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BEGINTRANSACTION",107, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // BEGINTRANSACTION ::= BEGIN TRAN OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BEGINTRANSACTION",107, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // BEGINTRANSACTION ::= BEGIN OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BEGINTRANSACTION",107, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // BEGINTRANSACTION ::= BEGIN TRAN FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BEGINTRANSACTION",107, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // BEGINTRANSACTION ::= BEGIN error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BEGINTRANSACTION",107, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // COMMITTCL ::= COMMIT TRANSACTION OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("COMMITTCL",141, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // COMMITTCL ::= COMMIT TRAN OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("COMMITTCL",141, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // COMMITTCL ::= COMMIT OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("COMMITTCL",141, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // COMMITTCL ::= COMMIT TRAN FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("COMMITTCL",141, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // COMMITTCL ::= COMMIT error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("COMMITTCL",141, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // SAVEPOINTTCL ::= SAVEPOINT OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINTTCL",142, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // SAVEPOINTTCL ::= SAVEPOINT error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINTTCL",142, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // ROLLBACKTCL ::= ROLLBACK TRANSACTION OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACKTCL",143, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // ROLLBACKTCL ::= ROLLBACK TRAN OBJECT_F FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACKTCL",143, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // ROLLBACKTCL ::= ROLLBACK error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACKTCL",143, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // CursorDeclare ::= DECLARE OBJECT_F CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR SELECT_F CursorDeclaref 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",108, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-10)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // CursorDeclare ::= DECLARE error FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",108, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",109, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",109, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // CursorDeclarea ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",109, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",110, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",110, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // CursorDeclareb ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",110, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",111, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",111, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",111, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",111, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // CursorDeclarec ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",111, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",144, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",144, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",144, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // CursorDeclared ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",144, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",145, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // CursorDeclaree ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",145, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",114, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // CursorDeclaref ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",114, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",115, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // CursorDeclareg ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",115, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // ColumnListA ::= Identificador ColumnListB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",116, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // ColumnListB ::= Coma Identificador ColumnListB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",117, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // ColumnListB ::= EMPTY_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",117, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // TOP_F ::= TOP Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TOP_F",5, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // TOP_F ::= TOP Parentesis_de_apertura Int Parentesis_de_cierre PERCENT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TOP_F",5, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // TOP_F ::= TOP Int 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TOP_F",5, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // TOP_F ::= TOP Int PERCENT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TOP_F",5, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // TIPODATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // TIPODATO ::= CHAR Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // TIPODATO ::= BINARY 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // TIPODATO ::= BINARY Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // TIPODATO ::= BLOB 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // TIPODATO ::= BLOB Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // TIPODATO ::= BIT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // TIPODATO ::= BIT Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // TIPODATO ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // TIPODATO ::= SMALLINT Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // TIPODATO ::= INT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // TIPODATO ::= INT Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // TIPODATO ::= INTEGER 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // TIPODATO ::= INTEGER Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // TIPODATO ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // TIPODATO ::= VARCHAR Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // TIPODATO ::= VARCHAR Parentesis_de_apertura MAX Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // TIPODATO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // TIPODATO ::= FLOAT Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // TIPODATO ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // TIPODATO ::= DATE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // TIPODATO ::= YEAR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // TIPODATO ::= IMAGE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // TIPODATO ::= REAL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // TIPODATO ::= TIME 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // TIPODATO ::= TIMESTAMP 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // TIPODATO ::= CURSOR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // TIPODATO ::= TABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // TIPODATO ::= TEXT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // TIPODATO ::= BYTE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // TIPODATO ::= LONG TIPODATO 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // TIPODATO ::= DOUBLE TIPODATO 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // TIPODATO ::= NCHAR TIPODATO 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // TIPODATO ::= IDENTITY TIPODATO 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // TIPODATO ::= NVARCHAR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // TIPODATO ::= NVARCHAR Parentesis_de_apertura Int Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // TIPODATO ::= NVARCHAR Parentesis_de_apertura MAX Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",92, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // OBJECT_FDROP ::= OBJECT_F Coma OBJECT_F Coma OBJECT_FDROP 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_FDROP",91, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // OBJECT_FDROP ::= OBJECT_F Coma OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_FDROP",91, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // OBJECT_FDROP ::= OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_FDROP",91, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // OBJECT_F ::= Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_F",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // OBJECT_F ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_F",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // OBJECT_F ::= Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_F",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // OBJECT_F ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_F",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // OBJECT_F ::= Numeral Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_F",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // OBJECT_F ::= Doble_numeral Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_F",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // OBJECT_F ::= Identificador Coma OBJECT_F 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_F",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // OBJECT_F ::= Parentesis_de_apertura OBJECT_F Parentesis_de_cierre 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_F",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // CONST ::= Int 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CONST",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // CONST ::= String 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CONST",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // CONST ::= Bit 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CONST",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // CONST ::= Float 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("CONST",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // EMPTY_F ::= 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EMPTY_F",21, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()),((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // FIN ::= Punto_y_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FIN",4, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // FIN ::= GO 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FIN",4, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // FIN ::= GO Punto_y_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FIN",4, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // FIN ::= Punto_y_coma GO 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FIN",4, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintax$do_action(
    int                        CUP$sintax$act_num,
    java_cup.runtime.lr_parser CUP$sintax$parser,
    java.util.Stack            CUP$sintax$stack,
    int                        CUP$sintax$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$sintax$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$sintax$do_action_part00000000(
                               CUP$sintax$act_num,
                               CUP$sintax$parser,
                               CUP$sintax$stack,
                               CUP$sintax$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$sintax$do_action_part00000001(
                               CUP$sintax$act_num,
                               CUP$sintax$parser,
                               CUP$sintax$stack,
                               CUP$sintax$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
